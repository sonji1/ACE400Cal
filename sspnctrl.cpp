// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "sspnctrl.h"

// Dispatch interfaces referenced by this interface
#include "font.h"
#include "picture.h"

/////////////////////////////////////////////////////////////////////////////
// CSSPNCtrl

IMPLEMENT_DYNCREATE(CSSPNCtrl, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CSSPNCtrl properties

CString CSSPNCtrl::GetCaption()
{
	CString result;
	GetProperty(DISPID_CAPTION, VT_BSTR, (void*)&result);
	return result;
}

void CSSPNCtrl::SetCaption(LPCTSTR propVal)
{
	SetProperty(DISPID_CAPTION, VT_BSTR, propVal);
}

short CSSPNCtrl::GetBevelWidth()
{
	short result;
	GetProperty(0x7, VT_I2, (void*)&result);
	return result;
}

void CSSPNCtrl::SetBevelWidth(short propVal)
{
	SetProperty(0x7, VT_I2, propVal);
}

short CSSPNCtrl::GetBorderWidth()
{
	short result;
	GetProperty(0x8, VT_I2, (void*)&result);
	return result;
}

void CSSPNCtrl::SetBorderWidth(short propVal)
{
	SetProperty(0x8, VT_I2, propVal);
}

long CSSPNCtrl::GetBevelOuter()
{
	long result;
	GetProperty(0x9, VT_I4, (void*)&result);
	return result;
}

void CSSPNCtrl::SetBevelOuter(long propVal)
{
	SetProperty(0x9, VT_I4, propVal);
}

long CSSPNCtrl::GetBevelInner()
{
	long result;
	GetProperty(0xa, VT_I4, (void*)&result);
	return result;
}

void CSSPNCtrl::SetBevelInner(long propVal)
{
	SetProperty(0xa, VT_I4, propVal);
}

BOOL CSSPNCtrl::GetRoundedCorners()
{
	BOOL result;
	GetProperty(0xb, VT_BOOL, (void*)&result);
	return result;
}

void CSSPNCtrl::SetRoundedCorners(BOOL propVal)
{
	SetProperty(0xb, VT_BOOL, propVal);
}

BOOL CSSPNCtrl::GetOutline()
{
	BOOL result;
	GetProperty(0xc, VT_BOOL, (void*)&result);
	return result;
}

void CSSPNCtrl::SetOutline(BOOL propVal)
{
	SetProperty(0xc, VT_BOOL, propVal);
}

long CSSPNCtrl::GetFloodType()
{
	long result;
	GetProperty(0xd, VT_I4, (void*)&result);
	return result;
}

void CSSPNCtrl::SetFloodType(long propVal)
{
	SetProperty(0xd, VT_I4, propVal);
}

unsigned long CSSPNCtrl::GetFloodColor()
{
	unsigned long result;
	GetProperty(0xe, VT_I4, (void*)&result);
	return result;
}

void CSSPNCtrl::SetFloodColor(unsigned long propVal)
{
	SetProperty(0xe, VT_I4, propVal);
}

short CSSPNCtrl::GetFloodPercent()
{
	short result;
	GetProperty(0xf, VT_I2, (void*)&result);
	return result;
}

void CSSPNCtrl::SetFloodPercent(short propVal)
{
	SetProperty(0xf, VT_I2, propVal);
}

long CSSPNCtrl::GetShadowColor()
{
	long result;
	GetProperty(0x10, VT_I4, (void*)&result);
	return result;
}

void CSSPNCtrl::SetShadowColor(long propVal)
{
	SetProperty(0x10, VT_I4, propVal);
}

BOOL CSSPNCtrl::GetFloodShowPct()
{
	BOOL result;
	GetProperty(0x11, VT_BOOL, (void*)&result);
	return result;
}

void CSSPNCtrl::SetFloodShowPct(BOOL propVal)
{
	SetProperty(0x11, VT_BOOL, propVal);
}

long CSSPNCtrl::GetFont3D()
{
	long result;
	GetProperty(0x12, VT_I4, (void*)&result);
	return result;
}

void CSSPNCtrl::SetFont3D(long propVal)
{
	SetProperty(0x12, VT_I4, propVal);
}

long CSSPNCtrl::GetAlignment()
{
	long result;
	GetProperty(0x13, VT_I4, (void*)&result);
	return result;
}

void CSSPNCtrl::SetAlignment(long propVal)
{
	SetProperty(0x13, VT_I4, propVal);
}

long CSSPNCtrl::GetAutoSize()
{
	long result;
	GetProperty(0x14, VT_I4, (void*)&result);
	return result;
}

void CSSPNCtrl::SetAutoSize(long propVal)
{
	SetProperty(0x14, VT_I4, propVal);
}

COleFont CSSPNCtrl::GetFont()
{
	LPDISPATCH pDispatch;
	GetProperty(DISPID_FONT, VT_DISPATCH, (void*)&pDispatch);
	return COleFont(pDispatch);
}

void CSSPNCtrl::SetFont(LPDISPATCH propVal)
{
	SetProperty(DISPID_FONT, VT_DISPATCH, propVal);
}

BOOL CSSPNCtrl::GetEnabled()
{
	BOOL result;
	GetProperty(DISPID_ENABLED, VT_BOOL, (void*)&result);
	return result;
}

void CSSPNCtrl::SetEnabled(BOOL propVal)
{
	SetProperty(DISPID_ENABLED, VT_BOOL, propVal);
}

long CSSPNCtrl::GetMousePointer()
{
	long result;
	GetProperty(0x15, VT_I4, (void*)&result);
	return result;
}

void CSSPNCtrl::SetMousePointer(long propVal)
{
	SetProperty(0x15, VT_I4, propVal);
}

CPicture CSSPNCtrl::GetMouseIcon()
{
	LPDISPATCH pDispatch;
	GetProperty(0x16, VT_DISPATCH, (void*)&pDispatch);
	return CPicture(pDispatch);
}

void CSSPNCtrl::SetMouseIcon(LPDISPATCH propVal)
{
	SetProperty(0x16, VT_DISPATCH, propVal);
}

OLE_COLOR CSSPNCtrl::GetBackColor()
{
	OLE_COLOR result;
	GetProperty(DISPID_BACKCOLOR, VT_I4, (void*)&result);
	return result;
}

void CSSPNCtrl::SetBackColor(OLE_COLOR propVal)
{
	SetProperty(DISPID_BACKCOLOR, VT_I4, propVal);
}

OLE_COLOR CSSPNCtrl::GetForeColor()
{
	OLE_COLOR result;
	GetProperty(DISPID_FORECOLOR, VT_I4, (void*)&result);
	return result;
}

void CSSPNCtrl::SetForeColor(OLE_COLOR propVal)
{
	SetProperty(DISPID_FORECOLOR, VT_I4, propVal);
}

OLE_HANDLE CSSPNCtrl::GetHWnd()
{
	OLE_HANDLE result;
	GetProperty(DISPID_HWND, VT_I4, (void*)&result);
	return result;
}

void CSSPNCtrl::SetHWnd(OLE_HANDLE propVal)
{
	SetProperty(DISPID_HWND, VT_I4, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CSSPNCtrl operations

void CSSPNCtrl::Refresh()
{
	InvokeHelper(DISPID_REFRESH, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
