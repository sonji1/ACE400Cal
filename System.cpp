#include "stdafx.h"
#include "ACE400Cal.h"
#include "System.h"

CSystem g_sSystem;


CSystem::~CSystem()
{


}

void CSystem::InitMember() 
{
	::ZeroMemory(m_nBlockNumber, sizeof(m_nBlockNumber));
	::ZeroMemory(m_nBlockType, sizeof(m_nBlockType));

	m_nRJigFileNum = -1;
	m_nSystemType = -1;
	::ZeroMemory(m_saRJigData_2W, sizeof(m_saRJigData_2W));
	::ZeroMemory(m_saRJigData_4W, sizeof(m_saRJigData_4W));

	InitCalData();
	//TRACE("CSystem::InitMember(): sizeof(m_nBlockNumber)=%d\n", sizeof(m_nBlockNumber));
	//TRACE("CSystem::InitMember(): sizeof(m_nBlockType)=%d\n", sizeof(m_nBlockType));
	//TRACE("CSystem::InitMember(): sizeof(m_saRJigData_2W)=%d\n", sizeof(m_saRJigData_2W));
	//TRACE("CSystem::InitMember(): sizeof(m_saRJigData_4W)=%d\n", sizeof(m_saRJigData_4W));
}

void CSystem::InitCalData() 
{

	::ZeroMemory(m_saCalData, sizeof(m_saCalData));
	::FillMemory(m_dAdVb, sizeof(m_dAdVb), -1);
	::FillMemory(m_dVb, sizeof(m_dVb), -1);
	::ZeroMemory(m_dCalTime, sizeof(m_dCalTime));

	//TRACE("CSystem::InitCalData(): sizeof(m_saCalData)=%d\n", sizeof(m_saCalData));
	//TRACE("CSystem::InitCalData(): sizeof(m_dAdVb)=%d\n", sizeof(m_dAdVb));
	//TRACE("CSystem::InitCalData(): sizeof(m_dVb)=%d\n", sizeof(m_dVb));
	//TRACE("CSystem::InitCalData(): sizeof(m_dCalTime)=%d\n", sizeof(m_dCalTime));
}

// 특정 CalMode, RJig의 data만 초기화
BOOL CSystem::InitCal_RJigData(int nCalMode, int nRJigId)		// nRJigId 는 CalDataId와 동일
{
	CString strTemp;

	// range check
	if (nCalMode < 0 || nCalMode >= MAX_TEST_MODE) {
		strTemp.Format("InitCalData: nCalMode=%d Range(0 <= nCalMode < %d) Over!", nCalMode, MAX_TEST_MODE);
		ERR.Set(RANGE_OVER, strTemp);
		return FALSE;
	}

	if (nRJigId < 0 || nRJigId >= MAX_CAL_DATA) {
		strTemp.Format("InitCalData: nRJigId=%d Range(0 <= nRJigId < %d) Over!", nRJigId, MAX_CAL_DATA);
		ERR.Set(RANGE_OVER, strTemp);
		return FALSE;
	}

	m_saCalData[nCalMode][nRJigId].dMeasR_Avg = 0;
	m_saCalData[nCalMode][nRJigId].dMeasR_Max = 0;
	m_saCalData[nCalMode][nRJigId].dMeasR_MaxDiffRate = 0;
	m_saCalData[nCalMode][nRJigId].dMeasR_Min = 0;
	m_saCalData[nCalMode][nRJigId].dMeasR_MinDiffRate = 0;

	m_saCalData[nCalMode][nRJigId].dMeasVc_Avg = 0;
	m_saCalData[nCalMode][nRJigId].dMeasI_Avg = 0;
	m_saCalData[nCalMode][nRJigId].dMeasAdVc_Avg = 0;
	m_saCalData[nCalMode][nRJigId].dMeasAdI_Avg = 0;
	m_saCalData[nCalMode][nRJigId].nValid = 0;
	::ZeroMemory(&m_saCalData[nCalMode][nRJigId].sa_MeasData, sizeof(m_saCalData[nCalMode][nRJigId].sa_MeasData));

	return TRUE;
}

sTEST_CONDITION_RANGE g_saTestConditionRange[NUM_CAL_CONDITION_COL] = {
  { 0, 0    				}, 	//Col0  Name        // Min, Max 쓰지 않음.
  { 1, 2 					},	//Col1	CC
  { C_LV1, C_HV2 			},	//Col2	nVBSrc		// 1: C_LV1, 2: C_LV2, 3: C_HV1, 4: C_HV2
  { 1, MAX_VD				},	//Col3	nVSet		// 1~ 300	
  { IR1, IR5 				},	//Col4	nIRng		// 1~ 5
  { 1, 10000 				},	//Col5	nISet
  { 1, 200000 				},	//Col6	nDelay
  { 1, MAX_AD_COUNT 		},	//Col7 	nAdCnt
  { FT_B_VC_FAST, FT_B_4WIRE},	//Col8	nFilter		// 1: FT_B_VC_FAST, 3: FT_B_HV_OPEN, 4: FT_B_4WIRE
  { FT_A_I_FAST, FT_A_VB	},	//Col9	nIFilter	// 1: FT_A_I_FAST,  2: FT_A_I_SLOW,  3: FT_A_VB

  { 0, 5 					},	//Col10	nHvOffset	// HVOffset 미사용
  { 0, 4 					},	//Col11	nHVGain		// 0: HvGain 미사용,   1~ 4
  { 0, I_HIGH_GAIN_ON		},	//Col12	nIGain		// 0: I_HIGH_GAIN_NOT_USE  1: x1(I_HIGH_GAIN_OFF), 2: x10 (I_HIGH_GAIN_ON)
  { 0, F4W_GAIN_Fx1000		},	//Col13	n4WGain		// 0: 4W_GAIN_NOT_USE      1: Slow x1000, 2: Fast x10, 3:Fast x100, 4:Fast x1000
  { 0, 5 					},	//Col14	sCount
  { 0, 3 					}	//Col15	nTest		// 0:TEST_NOT_USE 1:TEST_OPEN, 2:TEST_SHORT(Leak), 3:TEST_4W

};

BOOL CSystem::Check_TestCondtionRange(int nCol,  int nCheckVal)
{
	int 	nMinVal, nMaxVal;
	CString strTemp;

	nMinVal = g_saTestConditionRange[nCol].nMinVal;
	nMaxVal = g_saTestConditionRange[nCol].nMaxVal;
	if (nCheckVal < nMinVal  || nCheckVal > nMaxVal)
	{
		strTemp.Format("Check_TestCondtionRange: nCol=%d nCheckVal=%d   (%d<= nCheckVal <= %d)", 
				nCol, nCheckVal, nMinVal, nMaxVal);
		ERR.Set(RANGE_OVER, strTemp);
		return FALSE;
	}

	return TRUE;
}

// m_saTestCondition[MAX_TEST_MODE]으로 CSystem에 멤버로 넣고 싶었으나
// 객체 array를 선언시에 아래와 같이 대량으로 초기화 하기 어려워서 객체 전역변수 array로 선언함
sTEST_CONDITION  g_saTestCondition[MAX_TEST_MODE] = {
//  CalModeName           CC VBSrc VSet IRng ISet Delay AdCnt Fil IFil HVO HVGn  IGn  4WGn sCnt Factor
  { "1 Open 1 V     " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },   
  { "2 Open 1 V     " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },
  { "3              " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },  
  { "4              " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },  
  { "5              " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },  
  { "6 Open 10 V    " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },           
  { "7 Open 10 V    " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },           
  { "8 Open 10 V    " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },           
  { "9 Open 10 V    " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },           
  { "10             " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },   
  { "11 Open 20 V   " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },            
  { "12 Open 20 V   " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },            
  { "13 Open 20 V   " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },            
  { "14 Open 20 V   " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },            
  { "15             " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },
  { "16 Open 30 V   " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },            
  { "17 Open 30 V   " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },            
  { "18 Open 30 V   " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },            
  { "19 Open 30 V   " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },            
  { "20             " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },   
  { "21 Open 40 V   " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },            
  { "22 Open 40 V   " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },            
  { "23 Open 40 V   " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                     
  { "24 Open 40 V   " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                     
  { "25             " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },            
  { "26 Open 50 V   " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                     
  { "27 Open 50 V   " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                     
  { "28 Open 50 V   " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                     
  { "29 Open 50 V   " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                     
  { "30             " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },            
  { "31 Open 60 V   " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                     
  { "32 Open 60 V   " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                     
  { "33 Open 60 V   " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                     
  { "34 Open 60 V   " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                     
  { "35             " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },            
  { "36 Open 70 V   " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                     
  { "37 Open 70 V   " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                     
  { "38 Open 70 V   " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                     
  { "39 Open 70 V   " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                     
  { "40             " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },            
  { "41 Open 80 V   " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                     
  { "42 Open 80 V   " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                     
  { "43 Open 80 V   " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                     
  { "44 Open 80 V   " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                     
  { "45             " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },             
  { "46 Open 90 V   " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                     
  { "47 Open 90 V   " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                     
  { "48 Open 90 V   " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                     
  { "49 Open 90 V   " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                     
  { "50             " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },             
  { "51 Open 100 V  " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                      
  { "52 Open 100 V  " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                      
  { "53 Open 100 V  " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                      
  { "54 Open 100 V  " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                      
  { "55             " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },             
  { "56 Open 110 V  " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                      
  { "57 Open 110 V  " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                      
  { "58 Open 110 V  " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                      
  { "59 Open 110 V  " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                      
  { "60             " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },             
  { "61 Open 120 V  " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                      
  { "62 Open 120 V  " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                      
  { "63 Open 120 V  " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                      
  { "64 Open 120 V  " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                      
  { "65             " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },             
  { "66 Open 130 V  " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                      
  { "67 Open 130 V  " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                      
  { "68 Open 130 V  " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                      
  { "69 Open 130 V  " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                      
  { "70             " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },             
  { "71 Open 140 V  " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                      
  { "72 Open 140 V  " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                      
  { "73 Open 140 V  " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                      
  { "74 Open 140 V  " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                      
  { "75             " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },             
  { "76 Open 150 V  " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                      
  { "77 Open 150 V  " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                      
  { "78 Open 150 V  " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                      
  { "79 Open 150 V  " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                      
  { "80             " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },             
  { "81 Open 160 V  " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                      
  { "82 Open 160 V  " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                      
  { "83 Open 160 V  " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                      
  { "84 Open 160 V  " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                      
  { "85             " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },             
  { "86 Open 170 V  " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                      
  { "87 Open 170 V  " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                      
  { "88 Open 170 V  " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                      
  { "89 Open 170 V  " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                      
  { "90             " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },             
  { "91 Open 180 V  " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                      
  { "92 Open 180 V  " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                      
  { "93 Open 180 V  " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                      
  { "94 Open 180 V  " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                      
  { "95             " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },             
  { "96 Open 190 V  " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                      
  { "97 Open 190 V  " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                      
  { "98 Open 190 V  " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                      
  { "99 Open 190 V  " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                      
  { "100            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },             
  { "101 Open 200 V " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                       
  { "102 Open 200 V " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                       
  { "103 Open 200 V " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                       
  { "104 Open 200 V " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                       
  { "105            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },              
  { "106 Open 210 V " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                       
  { "107 Open 210 V " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                       
  { "108 Open 210 V " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                       
  { "109 Open 210 V " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                       
  { "110            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },              
  { "111 Open 220 V " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                       
  { "112 Open 220 V " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                       
  { "113 Open 220 V " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                       
  { "114 Open 220 V " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                       
  { "115            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },              
  { "116 Open 230 V " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                       
  { "117 Open 230 V " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                       
  { "118 Open 230 V " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                       
  { "119 Open 230 V " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                       
  { "120            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },              
  { "121 Open 240 V " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                       
  { "122 Open 240 V " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                       
  { "123 Open 240 V " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                       
  { "124 Open 240 V " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                       
  { "125            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },              
  { "126 Open 250 V " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                       
  { "127 Open 250 V " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                       
  { "128 Open 250 V " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                       
  { "129 Open 250 V " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                       
  { "130            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },
  { "131 Open 260 V " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                       
  { "132 Open 260 V " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                       
  { "133 Open 260 V " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                       
  { "134 Open 260 V " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                       
  { "135            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },              
  { "136 Open 270 V " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                       
  { "137 Open 270 V " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                       
  { "138 Open 270 V " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                       
  { "139 Open 270 V " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                       
  { "140            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },              
  { "141 Open 280 V " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                       
  { "142 Open 280 V " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                       
  { "143 Open 280 V " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                       
  { "144 Open 280 V " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                       
  { "145            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },              
  { "146 Open 290 V " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                       
  { "147 Open 290 V " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                       
  { "148 Open 290 V " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                       
  { "149 Open 290 V " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                       
  { "150            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },              
  { "151 Open 300 V " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                       
  { "152 Open 300 V " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                       
  { "153 Open 300 V " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                       
  { "154 Open 300 V " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                       
  { "155            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },              
  { "156            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },              
  { "157            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },              
  { "158            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },              
  { "159            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },              
  { "160            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },              
  { "161            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },              
  { "162            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },              
  { "163            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },              
  { "164            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },              
  { "165            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },              
  { "166            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },              
  { "167            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },              
  { "168            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },              
  { "169            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },              
  { "170            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },              
  { "171 4W         " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                
  { "172 4W         " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                
  { "173 4W         " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                
  { "174 4W         " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                
  { "175 4W         " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                
  { "176 4W         " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                
  { "177 4W         " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                
  { "178            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },             
  { "179            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },               
  { "180            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },               
  { "181 Self 10 V  " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                      
  { "182 Self 200 V " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                       
  { "183            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },               
  { "184            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },               
  { "185            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },               
  { "186            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },               
  { "187            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },               
  { "188            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },               
  { "189            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },               
  { "190            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },               
  { "191            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },               
  { "192            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },               
  { "193            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },               
  { "194            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },               
  { "195            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },               
  { "196            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },               
  { "197            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },               
  { "198            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },               
  { "199            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },               
  { "200            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },               
  { "201 Short 1 V  " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                      
  { "202            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },              
  { "203            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },              
  { "204            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },              
  { "205 Short 1 V  " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                      
  { "206 Short 10 V " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                       
  { "207 Short 10 V " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                       
  { "208            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },              
  { "209            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },              
  { "210            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },              
  { "211 Short 20 V " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                       
  { "212 Short 20 V " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                       
  { "213            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },              
  { "214            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },              
  { "215            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },              
  { "216 Short 30 V " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                       
  { "217 Short 30 V " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                       
  { "218            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },              
  { "219            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },              
  { "220            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },              
  { "221 Short 40 V " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                       
  { "222 Short 40 V " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                       
  { "223            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },              
  { "224            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },              
  { "225            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },              
  { "226 Short 50 V " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                       
  { "227 Short 50 V " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                       
  { "228            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },              
  { "229            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },              
  { "230            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },              
  { "231 Short 60 V " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                       
  { "232 Short 60 V " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                       
  { "233            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },              
  { "234            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },              
  { "235            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },              
  { "236 Short 70 V " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                       
  { "237 Short 70 V " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                       
  { "238            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },             
  { "239            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },              
  { "240            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },              
  { "241 Short 80 V " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                       
  { "242 Short 80 V " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                       
  { "243            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },              
  { "244            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },              
  { "245            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },              
  { "246 Short 90 V " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                       
  { "247 Short 90 V " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                       
  { "248            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },              
  { "249            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },             
  { "250            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },              
  { "251 Short 100 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "252 Short 100 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "253            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },             
  { "254            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },              
  { "255            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },              
  { "256 Short 110 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "257 Short 110 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "258 Short 110 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "259 Short 110 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "260 Short 110 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "261 Short 120 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "262 Short 120 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "263 Short 120 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "264 Short 120 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "265 Short 120 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "266 Short 130 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "267 Short 130 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "268 Short 130 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "269 Short 130 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "270 Short 130 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "271 Short 140 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "272 Short 140 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "273 Short 140 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "274 Short 140 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "275 Short 140 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "276 Short 150 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "277 Short 150 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "278 Short 150 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "279 Short 150 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "280 Short 150 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "281 Short 160 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "282 Short 160 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "283 Short 160 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "284 Short 160 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "285 Short 160 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "286 Short 170 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "287 Short 170 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "288 Short 170 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "289 Short 170 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "290 Short 170 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "291 Short 180 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "292 Short 180 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "293 Short 180 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "294 Short 180 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "295 Short 180 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "296 Short 190 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "297 Short 190 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "298 Short 190 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "299 Short 190 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "300 Short 190 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "301 Short 200 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "302 Short 200 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "303 Short 200 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "304 Short 200 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "305 Short 200 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "306 Short 210 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "307 Short 210 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "308 Short 210 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "309 Short 210 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "310 Short 210 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "311 Short 220 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "312 Short 220 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "313 Short 220 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "314 Short 220 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "315 Short 220 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "316 Short 230 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "317 Short 230 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "318 Short 230 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "319 Short 230 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "320 Short 230 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "321 Short 240 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "322 Short 240 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "323 Short 240 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "324 Short 240 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "325 Short 240 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "326 Short 250 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "327 Short 250 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "328 Short 250 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "329 Short 250 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "330 Short 250 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "331 Short 260 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "332 Short 260 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "333 Short 260 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "334 Short 260 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "335 Short 260 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "336 Short 270 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "337 Short 270 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "338 Short 270 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "339 Short 270 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "340 Short 270 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "341 Short 280 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "342 Short 280 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "343 Short 280 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "344 Short 280 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "345 Short 280 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "346 Short 290 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "347 Short 290 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "348 Short 290 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "349 Short 290 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "350 Short 290 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "351 Short 300 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "352 Short 300 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "353 Short 300 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "354 Short 300 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "355 Short 300 V" ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },                        
  { "356            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },               
  { "357            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },               
  { "358            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },               
  { "359            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   },               
  { "360            " ,   0,  -1,   0,  -1,   0,   0,   1,   1,   1,   0,   0,   0,   0,   1,   1   }
};


// ACE400의 경우 CChildView1::OnInitialUpdate()=> CFileSysInfo::LoadSaveSet21(2) 호출시 read함. 
// "C:\ACE400\SETUP\\SysSet21_ACE400.ini"에서 g_saTestCondition[MAX_TEST_MODE] 데이터 로드
//  첫컬럼은 지정된 name으로 변경불가 영역. 두번째 컬럼이후를 로딩한다.
BOOL 	CSystem::Load_TestCondtionData()
{
	FILE *fp; 
	char  fName[200]; 
	int i; 
	BOOL bRetVal = TRUE;


	::ZeroMemory(&fName, sizeof(fName));
	strcat(fName , g_sFile.ACE400_TestConditionPath);		// "C:\ACE400\SETUP\\SysSet21_ACE400.ini"

	if(!FileExists(fName)) 
	{ 	ERR.Set(FLAG_FILE_NOT_FOUND, fName); return FALSE; }

	fp=fopen(fName,"rt");
	if(fp == NULL)
	{ 	ERR.Set(FLAG_FILE_CANNOT_OPEN, fName); return FALSE; }

	int Num;

	// 파일 헤더 Read 
	for (i=0; i < 16; i++)
		fscanf(fp, "%10d", &Num);	// 파일 헤더는 저장하지 말자.  Skip
	fscanf(fp, "\n");

	// 파일 데이터 Read
	for (i=0; i < MAX_TEST_MODE; i++)
	{

		fscanf(fp, "%10d", &Num); 	// 첫 컬럼 Num 은 저장하지 말자. (i+1값과 같아서 불필요)
		fscanf(fp, "%10d", &g_saTestCondition[i].nCC);
		fscanf(fp, "%10d", &g_saTestCondition[i].nVBSrc);
		fscanf(fp, "%10d", &g_saTestCondition[i].nVSet);
		fscanf(fp, "%10d", &g_saTestCondition[i].nIRng);
		fscanf(fp, "%10d", &g_saTestCondition[i].nISet);
		fscanf(fp, "%10d", &g_saTestCondition[i].nDelay);
		fscanf(fp, "%10d", &g_saTestCondition[i].nAdCnt);

		fscanf(fp, "%10d", &g_saTestCondition[i].nFilter);
		fscanf(fp, "%10d", &g_saTestCondition[i].nIFilter);
		fscanf(fp, "%10d", &g_saTestCondition[i].nHvOffset);
		fscanf(fp, "%10d", &g_saTestCondition[i].nHVGain);
		fscanf(fp, "%10d", &g_saTestCondition[i].nIGain);
		fscanf(fp, "%10d", &g_saTestCondition[i].n4WGain);
		fscanf(fp, "%10d", &g_saTestCondition[i].sCount);
		fscanf(fp, "%10d", &g_saTestCondition[i].nTest);
		fscanf(fp, "\n");
	}
	fclose(fp);


	// Load한  calMode, TestCondtion의 Range를 체크한다.
	CString strTemp("");
	CString title=""; CString state=""; CString sol="";

	for (i=0; i < MAX_TEST_MODE; i++)
	{
		if (Check_TestCondtionRange(15, g_saTestCondition[i].nTest) == FALSE)
		{ 	strTemp.Format("Load_TestCondtionData: CalMode=%d: \n%s", i, ERR.m_strState);
			ERR.Set(RANGE_OVER, strTemp);
			ErrMsg(); ERR.Reset(); 
			bRetVal = FALSE;
			continue; 
		}
	
		// Test를 수행하지 않는 케이스라면 range 체크 필요 없이 다음 케이스 진행
		if(	g_saTestCondition[i].nTest == TEST_NOT_USE)
			continue;

		if (Check_TestCondtionRange(1, g_saTestCondition[i].nCC) == FALSE)
		{ 	strTemp.Format("Load_TestCondtionData: CalMode=%d:\n%s", i, ERR.m_strState);
			ERR.Set(RANGE_OVER, strTemp);
			ErrMsg(); ERR.Reset(); 
			bRetVal = FALSE;
			continue; 
		}
		
		if (Check_TestCondtionRange(2, g_saTestCondition[i].nVBSrc) == FALSE)
		{ 	strTemp.Format("Load_TestCondtionData: CalMode=%d: \n%s", i, ERR.m_strState);
			ERR.Set(RANGE_OVER, strTemp);
			ErrMsg(); ERR.Reset(); 
			bRetVal = FALSE;
			continue; 
		}
	
		if (Check_TestCondtionRange(3, g_saTestCondition[i].nVSet) == FALSE)
		{ 	strTemp.Format("Load_TestCondtionData: CalMode=%d: \n%s", i, ERR.m_strState);
			ERR.Set(RANGE_OVER, strTemp);
			ErrMsg(); ERR.Reset(); 
			bRetVal = FALSE;
			continue; 
		}
	
		if (Check_TestCondtionRange(4, g_saTestCondition[i].nIRng) == FALSE)
		{ 	strTemp.Format("Load_TestCondtionData: CalMode=%d: \n%s", i, ERR.m_strState);
			ERR.Set(RANGE_OVER, strTemp);
			ErrMsg(); ERR.Reset(); 
			bRetVal = FALSE;
			continue; 
		}
	
		if (Check_TestCondtionRange(5, g_saTestCondition[i].nISet) == FALSE)
		{ 	strTemp.Format("Load_TestCondtionData: CalMode=%d: \n%s", i, ERR.m_strState);
			ERR.Set(RANGE_OVER, strTemp);
			ErrMsg(); ERR.Reset(); 
			bRetVal = FALSE;
			continue; 
		}
	
		if (Check_TestCondtionRange(6, g_saTestCondition[i].nDelay) == FALSE)
		{ 	strTemp.Format("Load_TestCondtionData: CalMode=%d: \n%s", i, ERR.m_strState);
			ERR.Set(RANGE_OVER, strTemp);
			ErrMsg(); ERR.Reset(); 
			bRetVal = FALSE;
			continue; 
		}
	
		if (Check_TestCondtionRange(7, g_saTestCondition[i].nAdCnt) == FALSE)
		{ 	strTemp.Format("Load_TestCondtionData: CalMode=%d: \n%s", i, ERR.m_strState);
			ERR.Set(RANGE_OVER, strTemp);
			ErrMsg(); ERR.Reset(); 
			bRetVal = FALSE;
			continue; 
		}
	
		if (Check_TestCondtionRange(8, g_saTestCondition[i].nFilter) == FALSE)
		{ 	strTemp.Format("Load_TestCondtionData: CalMode=%d: \n%s", i, ERR.m_strState);
			ERR.Set(RANGE_OVER, strTemp);
			ErrMsg(); ERR.Reset(); 
			bRetVal = FALSE;
			continue; 
		}
	
		if (Check_TestCondtionRange(9, g_saTestCondition[i].nIFilter) == FALSE)
		{ 	strTemp.Format("Load_TestCondtionData: CalMode=%d: \n%s", i, ERR.m_strState);
			ERR.Set(RANGE_OVER, strTemp);
			ErrMsg(); ERR.Reset(); 
			bRetVal = FALSE;
			continue; 
		}
	
		if (Check_TestCondtionRange(10, g_saTestCondition[i].nHvOffset) == FALSE)
		{ 	strTemp.Format("Load_TestCondtionData: CalMode=%d: \n%s", i, ERR.m_strState);
			ERR.Set(RANGE_OVER, strTemp);
			ErrMsg(); ERR.Reset(); 
			bRetVal = FALSE;
			continue; 
		}
	
		if (Check_TestCondtionRange(11, g_saTestCondition[i].nHVGain) == FALSE)
		{ 	strTemp.Format("Load_TestCondtionData: CalMode=%d: \n%s", i, ERR.m_strState);
			ERR.Set(RANGE_OVER, strTemp);
			ErrMsg(); ERR.Reset(); 
			bRetVal = FALSE;
			continue; 
		}
	
		if (Check_TestCondtionRange(12, g_saTestCondition[i].nIGain) == FALSE)
		{ 	strTemp.Format("Load_TestCondtionData: CalMode=%d: \n%s", i, ERR.m_strState);
			ERR.Set(RANGE_OVER, strTemp);
			ErrMsg(); ERR.Reset(); 
			bRetVal = FALSE;
			continue; 
		}
	
		if (Check_TestCondtionRange(13, g_saTestCondition[i].n4WGain) == FALSE)
		{ 	strTemp.Format("Load_TestCondtionData: CalMode=%d: \n%s", i, ERR.m_strState);
			ERR.Set(RANGE_OVER, strTemp);
			ErrMsg(); ERR.Reset(); 
			bRetVal = FALSE;
			continue; 
		}
	
		if (Check_TestCondtionRange(14, g_saTestCondition[i].sCount) == FALSE)
		{ strTemp.Format("Load_TestCondtionData: CalMode=%d: \n%s", i, ERR.m_strState);
			ERR.Set(RANGE_OVER, strTemp);
			ErrMsg(); ERR.Reset(); 
			bRetVal = FALSE;
			continue; 
		}
	
	}
	return bRetVal;
}

// "C:\ACE400\SETUP\\SysSet21_ACE400.ini"에 g_saTestCondition[MAX_TEST_MODE] 데이터 Save
BOOL CSystem::Save_TestCondtionData()
{
	FILE *fp; 
	char  fName[200]; 
	int i; 

	::ZeroMemory(&fName, sizeof(fName));
	
	// Test 후에 실제 ini 파일 Path 로 바꾼다.=> 테스트 완료.
	//strcat(fName , ".\\Parameter\\SysSet21_ACE400.ini"); 
	
	strcat(fName , g_sFile.ACE400_TestConditionPath);		// "C:\ACE400\SETUP\\SysSet21_ACE400.ini"

	
	//if(!FileExists(fName)) 
	//{ 	ERR.Set(FLAG_FILE_NOT_FOUND, fName); return FALSE; }

	fp=fopen(fName,"wt");
	if(fp == NULL)
	{ 	
		TRACE("%s", strerror( errno ));
		ERR.Set(FLAG_FILE_CANNOT_OPEN, fName); return FALSE; 
	}

	// 파일 헤더 출력
	for (i=0; i < 14; i++)
		fprintf(fp, "%10d", i);	
	fprintf(fp, "%10d", 0);
	fprintf(fp, "%10d", 0);
	fprintf(fp, "\n");

	// 파일 데이터 출력: TestCondtion Data
	for (i=0; i < MAX_TEST_MODE; i++)
	{

		fprintf(fp, "%10d", i+1);	
		fprintf(fp, "%10d", g_saTestCondition[i].nCC);			// 1
		fprintf(fp, "%10d", g_saTestCondition[i].nVBSrc);		// 2
		fprintf(fp, "%10d", g_saTestCondition[i].nVSet);		// 3
		fprintf(fp, "%10d", g_saTestCondition[i].nIRng);		// 4
		fprintf(fp, "%10d", g_saTestCondition[i].nISet);		// 5
		fprintf(fp, "%10d", g_saTestCondition[i].nDelay);		// 6
		fprintf(fp, "%10d", g_saTestCondition[i].nAdCnt);		// 7
			
		fprintf(fp, "%10d", g_saTestCondition[i].nFilter);		// 8
		fprintf(fp, "%10d", g_saTestCondition[i].nIFilter);		// 9
		fprintf(fp, "%10d", g_saTestCondition[i].nHvOffset);	// 10
		fprintf(fp, "%10d", g_saTestCondition[i].nHVGain);		// 11
		fprintf(fp, "%10d", g_saTestCondition[i].nIGain);		// 12
		fprintf(fp, "%10d", g_saTestCondition[i].n4WGain);		// 13
		fprintf(fp, "%10d", g_saTestCondition[i].sCount);		// 14
		fprintf(fp, "%10d", g_saTestCondition[i].nTest);		// 15

		fprintf(fp, "\n");

	}

	fclose(fp);
	return TRUE;
}


// "C:\ACE400\SETUP\\SysSet21_4W.ini"에서 g_saTestCondition[MAX_TEST_MODE] 데이터 로드
//  첫컬럼은 지정된 name으로 변경불가 영역. 두번째 컬럼이후를 로딩한다.
BOOL 	CSystem::Load_4W_RangeData()
{
	FILE *fp; 
	char  fName[200]; 
	int i; 
	BOOL bRetVal = TRUE;


	::ZeroMemory(&fName, sizeof(fName));
	strcat(fName , g_sFile.ACE400_4wRangePath);		// "C:\ACE400\SETUP\\SysSet21_4W.ini"

	if(!FileExists(fName)) 
	{ 	ERR.Set(FLAG_FILE_NOT_FOUND, fName); return FALSE; }

	fp=fopen(fName,"rt");
	if(fp == NULL)
	{ 	ERR.Set(FLAG_FILE_CANNOT_OPEN, fName); return FALSE; }



	// 파일 데이터 Read
	for (i=0; i < MAX_R_4W; i++)
	{
		//fscanf(fp, "%d\n", &m_na4W_R_max[i]);
		fscanf(fp, "%d\n", &m_na4W_Range[i]);
	}
	fclose(fp);

	return bRetVal;
}



// ACE400 CFileSysInfo::LoadSaveSet13(int type)  참고.
// "C:\\ACE400\\SETUP\\SysSet01.ini"에서 ACE400의 BlockType(QD, DD, SD) 정보를 획득
BOOL CSystem::Load_SysInfoData()
{
	FILE *fp; 
	char  fName[200]; 
	int i; 


	::ZeroMemory(&fName, sizeof(fName));
	strcat(fName , g_sFile.ACE400_SysInfoPath);		//  "C:\\ACE400\\SETUP\\SysSet01.ini"

	if(!FileExists(fName)) { 	
		ERR.Set(FLAG_FILE_NOT_FOUND, fName); return FALSE; 
	}

	fp=fopen(fName,"rt");
	if(fp == NULL) { 	
		ERR.Set(FLAG_FILE_CANNOT_OPEN, fName); return FALSE; 
	}

	int Num;

	// 20개 항목 skip.   
	for (i=0; i < 20; i++)
		fscanf(fp, "%10d", &Num);	
	fscanf(fp, "\n");

	// 21번째 항목 Read (blocType Read)   => BlockType-> SystemType으로 변경.
	//fscanf(fp, "%10d", &m_nBlockType[0]); 	// ACE400에서 SysSet13.m_nSet101 에 해당함.
	
	// 21번째 항목 Read (SystemType Read)
	fscanf(fp, "%10d", &m_nSystemType); 	// ACE400에서 SysSet13.m_nSet101 에 해당함.

	fclose(fp);
	return TRUE;
}


// ACE400  CModeSer13::On_RJigFileRead_ReadType()  참고
// ACE400과 동일하게  "C:\\ACE400\\BDL\\QC\\RJigReadType_S100.TXT" 또는 
//                    "C:\\ACE400\\BDL\\QC\\RJigReadType.TXT"에서 로드
#define	MAX_RJIG_ROW	32
#define	MAX_RJIG_COL	18
BOOL CSystem::Load_RJigData()
{
	FILE 	*fp; 
	char  	fName[200]; 
	int  	nFileNum = 0; 
	double 	RJigData1[MAX_RJIG_ROW][MAX_RJIG_COL];


	::ZeroMemory(&fName, sizeof(fName));
	//if(	 m_nBlockType[0] == S100_1 || m_nBlockType[0] == S100_2) 	// 3 or 4
	if(	 m_nSystemType == S100_1 || m_nSystemType == S100_2) 	// 3 or 4
	{
		strcat(fName, g_sFile.ACE400_RJigData_Path2 );
		nFileNum = 1;
	}
	else
	{
		strcat(fName, g_sFile.ACE400_RJigData_Path1 );
		nFileNum = 0;
	}
	

	if(!FileExists(fName)) 
	{ 	ERR.Set(FLAG_FILE_NOT_FOUND, fName); return FALSE; }

	fp=fopen(fName,"rt");
	if(fp == NULL)
	{ 	ERR.Set(FLAG_FILE_CANNOT_OPEN, fName); return FALSE; }

	int Num;
	int row, col;
	CString strTemp;

	//  파일 헤더 Read 
	for (col=0; col < MAX_RJIG_COL; col++)
		fscanf(fp, "%10d", &Num);	// 파일 헤더는 저장하지 말자.  Skip
	fscanf(fp, "\n");

	// RJigData1 파일 구조 그대로 일단 read 한다.
	::ZeroMemory (&RJigData1, sizeof(RJigData1));
	for (row = 0;  row < MAX_RJIG_ROW;  row++)
	{
		for (col = 0;  col < MAX_RJIG_COL;  col++)
		{	
			fscanf(fp, "%s", strTemp);
			RJigData1[row][col]=(double)atof(strTemp);		
		}
		fscanf(fp, "\n");
	}	 
	fclose(fp);


	// RJigData1의 데이터를 m_saRJigData_2W[][]와 m_saRJigData_4W[][]로 분배한다.
	for (row=0; row < MAX_RJIG_ROW; row++)		// 32
	{
		m_saRJigData_4W[nFileNum][row].nNo 	    = (int)RJigData1[row][0]; 	// 0 : 4W Pin Seq
		m_saRJigData_4W[nFileNum][row].nVbTrPin = (int)RJigData1[row][1]; 	// 1 : 4W VB TR Pin 
		m_saRJigData_4W[nFileNum][row].nVbRyPin = (int)RJigData1[row][2]; 	// 2 : 4W VB RY Pin 
		m_saRJigData_4W[nFileNum][row].nVcTrPin = (int)RJigData1[row][3]; 	// 3 : 4W VC TR Pin 
		m_saRJigData_4W[nFileNum][row].nVcRyPin = (int)RJigData1[row][4]; 	// 4 : 4W VC RY Pin 
		m_saRJigData_4W[nFileNum][row].dOrgR    = RJigData1[row][5]; 		// 5 : 4W Orginal R 

		// 2W Pin Seq1~ Seq32  (row0~ row31)
		m_saRJigData_2W[nFileNum][row].nNo 	    = (int)RJigData1[row][6]; 	// 6 : 2W Pin Seq  
		m_saRJigData_2W[nFileNum][row].nVbTrPin = (int)RJigData1[row][7]; 	// 7 : 2W VB TR Pin
		m_saRJigData_2W[nFileNum][row].nVcTrPin = (int)RJigData1[row][8]; 	// 8 : 2W VC TR Pin
		m_saRJigData_2W[nFileNum][row].dOrgR    = RJigData1[row][9]; 		// 9 : 4W Orginal R 

		// 2W Pin Seq33~ Seq64  (row32~ row63)
		m_saRJigData_2W[nFileNum][row + MAX_RJIG_ROW*1].nNo 	 = (int)RJigData1[row][10]; // 10 : 2W Pin Seq
		m_saRJigData_2W[nFileNum][row + MAX_RJIG_ROW*1].nVbTrPin = (int)RJigData1[row][11]; // 11 : 2W VB TR Pin
		m_saRJigData_2W[nFileNum][row + MAX_RJIG_ROW*1].nVcTrPin = (int)RJigData1[row][12]; // 12 : 2W VC TR Pin
		m_saRJigData_2W[nFileNum][row + MAX_RJIG_ROW*1].dOrgR    = RJigData1[row][13]; 		// 13 : 4W Orginal R 

		// 2W Pin Seq65~ Seq96  (row64~ row95)
		m_saRJigData_2W[nFileNum][row + MAX_RJIG_ROW*2].nNo 	 = (int)RJigData1[row][14]; // 14 : 2W Pin Seq
		m_saRJigData_2W[nFileNum][row + MAX_RJIG_ROW*2].nVbTrPin = (int)RJigData1[row][15]; // 15 : 2W VB TR Pin
		m_saRJigData_2W[nFileNum][row + MAX_RJIG_ROW*2].nVcTrPin = (int)RJigData1[row][16]; // 16 : 2W VC TR Pin
		m_saRJigData_2W[nFileNum][row + MAX_RJIG_ROW*2].dOrgR    = RJigData1[row][17]; 		// 17 : 4W Orginal R 

	}
	
	int i;
#if 0
	// 테스트를 위해 다시 출력해 본다. 
	fp=fopen(".\\Parameter\\saRJigData4W2W.csv","wt");
	if(fp == NULL)
	{ 	ERR.Set(FLAG_FILE_CANNOT_OPEN, ".\\Parameter\\saRJigData4W2W.csv"); return FALSE; }

	for (i=0; i < 5; i++)		// 헤더출력
		fprintf(fp, "%2d, ", i);
	fprintf(fp, "\n");

	for (i=0; i < MAX_4W_RJIG; i++)	//32
	{
		fprintf(fp, "%10d, ", m_saRJigData_4W[nFileNum][i].nNo);
		fprintf(fp, "%10d, ", m_saRJigData_4W[nFileNum][i].nVbTrPin);
		fprintf(fp, "%10d, ", m_saRJigData_4W[nFileNum][i].nVbRyPin);
		fprintf(fp, "%10d, ", m_saRJigData_4W[nFileNum][i].nVcTrPin);
		fprintf(fp, "%10d, ", m_saRJigData_4W[nFileNum][i].nVcRyPin);
		fprintf(fp, "%.3f, ", m_saRJigData_4W[nFileNum][i].dOrgR);
		fprintf(fp, "\n");

	}

	fprintf(fp, "\n");
	for (i=0; i < 5; i++)		// 헤더출력
		fprintf(fp, "%2d, ", i);
	fprintf(fp, "\n");

	for (i=0; i < MAX_2W_RJIG; i++)	//96
	{
		fprintf(fp, "%10d, ", m_saRJigData_2W[nFileNum][i].nNo);
		fprintf(fp, "%10d, ", m_saRJigData_2W[nFileNum][i].nVbTrPin);
		fprintf(fp, "%10d, ", m_saRJigData_2W[nFileNum][i].nVcTrPin);
		fprintf(fp, "%.3f, ", m_saRJigData_2W[nFileNum][i].dOrgR);
		fprintf(fp, "\n");
	}
	fclose(fp);
#endif

	// Load한 4W Pin의 Range를 체크
	for (i=0; i < MAX_4W_RJIG; i++)	//32
	{
		if (m_saRJigData_4W[nFileNum][i].nVbTrPin < 0  || m_saRJigData_4W[nFileNum][i].nVbTrPin >= MAX_MODEL_PIN)
		{
			strTemp.Format("Load_4WRJigData: i=%d m_saRJigData_4W[nFileNum][i].nVbTrPin=%d   (0<= pinNo < %d)", 
					i, m_saRJigData_4W[nFileNum][i].nVbTrPin, MAX_MODEL_PIN);
			ERR.Set(RANGE_OVER, strTemp);
			return FALSE;
		}

		if (m_saRJigData_4W[nFileNum][i].nVbRyPin < 0  || m_saRJigData_4W[nFileNum][i].nVbRyPin >= MAX_MODEL_PIN)
		{
			strTemp.Format("Load_4WRJigData: i=%d m_saRJigData_4W[nFileNum][i].nVbRyPin=%d   (0<= pinNo < %d)", 
					i, m_saRJigData_4W[nFileNum][i].nVbRyPin, MAX_MODEL_PIN);
			ERR.Set(RANGE_OVER, strTemp);
			return FALSE;
		}

		if (m_saRJigData_4W[nFileNum][i].nVcTrPin < 0  || m_saRJigData_4W[nFileNum][i].nVcTrPin >= MAX_MODEL_PIN)
		{
			strTemp.Format("Load_4WRJigData: i=%d m_saRJigData_4W[nFileNum][i].nVcTrPin=%d   (0<= pinNo < %d)", 
					i, m_saRJigData_4W[nFileNum][i].nVcTrPin, MAX_MODEL_PIN);
			ERR.Set(RANGE_OVER, strTemp);
			return FALSE;
		}

		if (m_saRJigData_4W[nFileNum][i].nVcRyPin < 0  || m_saRJigData_4W[nFileNum][i].nVcRyPin >= MAX_MODEL_PIN)
		{
			strTemp.Format("Load_4WRJigData: i=%d m_saRJigData_4W[nFileNum][i].nVcRyPin=%d   (0<= pinNo < %d)", 
					i, m_saRJigData_4W[nFileNum][i].nVcRyPin, MAX_MODEL_PIN);
			ERR.Set(RANGE_OVER, strTemp);
			return FALSE;
		}
	}

	// Load한 2W Pin의 Range를 체크
	for (i=0; i < MAX_2W_RJIG; i++)		// 96
	{
		if (m_saRJigData_2W[nFileNum][i].nVbTrPin < 0  || m_saRJigData_2W[nFileNum][i].nVbTrPin >= MAX_MODEL_PIN)
		{
			strTemp.Format("Load_2WRJigData: i=%d m_saRJigData_2W[nFileNum][i].nVbTrPin=%d   (0<= nCheckVal < %d)", 
					i, m_saRJigData_2W[nFileNum][i].nVbTrPin, MAX_MODEL_PIN);
			ERR.Set(RANGE_OVER, strTemp);
			return FALSE;
		}

		if (m_saRJigData_2W[nFileNum][i].nVcTrPin < 0  || m_saRJigData_2W[nFileNum][i].nVcTrPin >= MAX_MODEL_PIN)
		{
			strTemp.Format("Load_2WRJigData: i=%d m_saRJigData_2W[nFileNum][i].nVcTrPin=%d   (0<= nCheckVal < %d)", 
					i, m_saRJigData_2W[nFileNum][i].nVcTrPin, MAX_MODEL_PIN);
			ERR.Set(RANGE_OVER, strTemp);
			return FALSE;
		}
	}


	return TRUE;
}



// ACE400  CModeSer13::Onload(), CFileSysInfo::LoadSaveSer13(int type, int mode)  참고
// ("C:\\ACE400\\SETUP\\CAL\\CALR%02dB.INI",mode  ) 에서  m_saCalData 데이터의 이전 Ref 값 로드
BOOL CSystem::Load_PrevCalData(int nCalMode)
{
	FILE *fp; 
	char  fName[200]; 
	CString strTemp("");


	if (nCalMode < 0  || nCalMode >= MAX_TEST_MODE)
	{
		strTemp.Format("Load_PrevCalData: nCalMode=%d ( < 0 || >= %d)", nCalMode, MAX_TEST_MODE);
		ERR.Set(RANGE_OVER, strTemp);
		return FALSE;
	}

	::ZeroMemory(&fName, sizeof(fName));
	
	// g_sFile.ACE400_CalDataDir:  "C:\\ACE400\\SETUP\\CAL"
	strTemp.Format("%s\\CALR%02dB.INI",g_sFile.ACE400_CalDataDir, (nCalMode +1) );	
	strcat( fName ,  strTemp);		//son ex) fName  : nCalMode=5일때 C\ACE400\SETUP\CAL\CALR06B.INI
	

	if(!FileExists(fName)) 
	{ 	ERR.Set(FLAG_FILE_NOT_FOUND, fName); return FALSE; }

	fp = fopen(fName,"rt");
	if(fp == NULL)
	{ 	ERR.Set(FLAG_FILE_CANNOT_OPEN, fName); return FALSE; }

	int i= 0; 
	double dTempNum = 0;


	// 파일 data Read 
	for (i=0; i < MAX_CAL_DATA; i++)
	{

		fscanf(fp, "%s", strTemp);
		dTempNum= (double)atof(strTemp);
		m_saCalData[nCalMode][i].nUse = (int)dTempNum;

		// dOrgR에 해당하는데 m_saRJigData의 dOrgR을 사용하므로 여기선 skip.
		// CCalibDialog::SetGrid_RJigData(int nCalMode) 수행시에 미리 이 값을 확보함.
		fscanf(fp, "%s", strTemp);		

		fscanf(fp, "%s", strTemp);
		m_saCalData[nCalMode][i].dRefR_Avg = (double)atof(strTemp);

		fscanf(fp, "%s", strTemp);
		m_saCalData[nCalMode][i].dRefVcVal = (double)atof(strTemp);

		fscanf(fp, "%s", strTemp);
		m_saCalData[nCalMode][i].dRefIVal = (double)atof(strTemp);

		fscanf(fp, "\n");
	}

	fclose(fp);
	return TRUE;
}

// ACE400  CModeSer13::OnSave(), CFileSysInfo::LoadSaveSer13(int type(=1), int mode)  참고
// ("C:\\ACE400\\SETUP\\CAL\\CALR%02dB.INI",mode  ) 에  m_saCalData 데이터를 저장 
BOOL CSystem::Save_CalData(int nCalMode)
{
	FILE *fp; 
	char  fName[200]; 
	CString strTemp("");


	if (nCalMode < 0  || nCalMode >= MAX_TEST_MODE)
	{
		strTemp.Format("Save_CalData: nCalMode=%d ( < 0 || >= %d)", nCalMode, MAX_TEST_MODE);
		ERR.Set(RANGE_OVER, strTemp);
		return FALSE;
	}

	::ZeroMemory(&fName, sizeof(fName));
	
	// g_sFile.ACE400_CalDataDir:  "C:\\ACE400\\SETUP\\CAL"
	strTemp.Format("%s\\CALR%02dB.INI",g_sFile.ACE400_CalDataDir, (nCalMode +1) );	
	strcat( fName ,  strTemp);		//son ex) fName  : nCalMode=5일때 C\ACE400\SETUP\CAL\CALR06B.INI
	

	if(!FileExists(fName)) 
	{ 	ERR.Set(FLAG_FILE_NOT_FOUND, fName); return FALSE; }

	fp = fopen(fName,"wt");
	if(fp == NULL)
	{ 	ERR.Set(FLAG_FILE_CANNOT_OPEN, fName); return FALSE; }


	// 파일 data Save 
	
	int i= 0; 
	for (i=0; i < MAX_CAL_DATA; i++)
	{

		fprintf(fp, "%15.2f", (double)m_saCalData[nCalMode][i].nUse);
		fprintf(fp, "%15.2f", (double)m_saCalData[nCalMode][i].dOrgR);
		fprintf(fp, "%15.2f", (double)m_saCalData[nCalMode][i].dRefR_Avg);
		fprintf(fp, "%15.2f", (double)m_saCalData[nCalMode][i].dRefVcVal);
		fprintf(fp, "%15.2f", (double)m_saCalData[nCalMode][i].dRefIVal);

		fprintf(fp, "\n");
	}

	// ACE400의 CalData는 128개임. Output을 동일하게 맞춰 주기 위해 아래 코드 추가
	for (i=MAX_CAL_DATA; i < MAX_CAL_DATA_org; i++)
	{
		fprintf(fp, "%15.2f", (double)0);
		fprintf(fp, "%15.2f", (double)0);
		fprintf(fp, "%15.2f", (double)0);
		fprintf(fp, "%15.2f", (double)0);
		fprintf(fp, "%15.2f", (double)0);

		fprintf(fp, "\n");
	}
	fprintf(fp, "   \n");

	fclose(fp);
	return TRUE;
}


// ("C:\\ACE400\\SETUP\\LOGCAL\\001LOGRCal%d.csv",mode  ) 에  m_saCalData 데이터를 저장 
BOOL CSystem::Save_LogCalData(int nCalMode, int nMeasCount)
{
	FILE *fp; 
	char  fName[200]; 
	FILE *fpBad;
	char  fNameBad[200]; 
	CString strTemp("");

	if (nCalMode < 0  || nCalMode >= MAX_TEST_MODE)
	{
		strTemp.Format("Save_LogCalData(): nCalMode=%d Range( 0 <= nCalMode < %d) Error!", nCalMode, MAX_TEST_MODE);
		ERR.Set(RANGE_OVER, strTemp);
		return FALSE;
	}

	// CCalibDialog::SetGrid_RJigData(int nCalMode) 이후에 CSystem::Save_LogCalData(int nCalMode)가 
	// 호출되어야 m_nRJigFileNum 이 유효함..
	if (m_nRJigFileNum == -1)		// m_nRJigFileNum이 초기화되지 않은 경우.
	{
		strTemp.Format("Save_LogCalData(): Not Initialized m_nRJigFileNum=%d", m_nRJigFileNum);
		ERR.Set(SW_NO_INIT_VAR, strTemp);
		return FALSE;
	}

	sRJIG_DATA	*p_saRJigData;
	switch(g_saTestCondition[nCalMode].nTest)
	{
		case TEST_OPEN: case TEST_SHORT:
			p_saRJigData = (sRJIG_DATA*)m_saRJigData_2W[m_nRJigFileNum];
			break;
		case TEST_4W:
			p_saRJigData = (sRJIG_DATA*)m_saRJigData_4W[m_nRJigFileNum];
			break;
	}


	
	// g_sFile.ACE400_LogCalDataDir:  "C:\\ACE400\\SETUP\\LOGCAL"
	//son ex) fName  : nCalMode=5일때 C\ACE400\SETUP\LOGCAL\001LOGRCal6.csv
	//strTemp.Format("%s\\001LOGRCal%d.csv",g_sFile.ACE400_LogCalDataDir, (nCalMode +1) );	
	
	// 2017.11.30  Output 파일을 ACE400의 위치에 overwrite하지 않고 자체적으로 보관하기로 함.
	// ACE400 LogCal 디렉토리대신 ACE400Cal/Measure 디렉토리 사용.
	::ZeroMemory(&fName, sizeof(fName));
	strTemp.Format("%s\\001LOGRCal%d.csv",g_sFile.MeasureDir, (nCalMode +1) );	
	strcat( fName ,  strTemp);		

	// 2018.02.19  Bad 항목만 별도의 .csv 파일로 모으기  
	//    Bad항목은 CalMode별이 아니고 전체 Mode를 하나의 csv 파일로 합쳐서 출력한다.
	strTemp.Format("%s\\001LOGRCalBad.csv",g_sFile.MeasureDir );	
	::ZeroMemory(&fNameBad, sizeof(fNameBad));
	strcat( fNameBad ,  strTemp);		

	
/*
	if(!FileExists(fName)) 
	{ 	ERR.Set(FLAG_FILE_NOT_FOUND, fName); return FALSE; }
*/

	fp = fopen(fName,"wt");			// "wt" : 이전에 존재하는 파일 내용을 destroy하고 open
	if (fp == NULL)
	{ 	ERR.Set(FLAG_FILE_CANNOT_OPEN, fName); return FALSE; }

	fpBad = fopen(fNameBad,"at");	// "at" : 이전에 존재하는 파일 내용을 destroy하지 않고 open
	if (fpBad == NULL)
	{ 	ERR.Set(FLAG_FILE_CANNOT_OPEN, fNameBad); return FALSE; }


	//-------------------
	// 헤더 출력
	CTime curTime = CTime::GetCurrentTime();
	fprintf(fp, "<CALIBRATION> \n" );
	fprintf(fp, "#%04d.%02d.%02d, %02d:%02d:%02d, , , , , ,Mode=,%s\n", 
			curTime.GetYear(), curTime.GetMonth(), curTime.GetDay(),
			curTime.GetHour(), curTime.GetMinute(), curTime.GetSecond(), g_saTestCondition[nCalMode].szCalModeName);
	fprintf(fp, ">SetTime:, %.3f , mSec  \n", m_dCalTime[0]  );
	fprintf(fp, ">RunTime:, %.3f , mSec  \n\n\n",  m_dCalTime[1]  );
	int i;
#if 0
	for (i=0; i < 100; i++)			// <= 추후 CSV 파일 완성되면 삭제 필요. col 위치 표시
		fprintf(fp, "%02d,", i);
	fprintf(fp, "\n");
#endif
	char	str[2048] = "";	
	char	*pStr = str;

	// CalResult CSV 파일 특징
	// 1. Org R의 위치를 UI Col7에서  CSV 파일 Col21으로 이동
	// 2. 그래프 생성을 편하게 하기 위해 CSV 파일 Col20~ Col30에 R값만 모아서 출력. (UI에는 없음)
	
			     // CsvCol 0    1      2       3       4        5       6        7           8         9      
	pStr += sprintf(pStr, "NO ,Use ,Valid, VbTrPin ,VbRyPin ,VcTrPin ,VcRyPin ,Ref R(Avg) ,Ref R:VC ,Ref R:I ,");	

  			     // CsvCol 10   11         12              13             14        15         16         17            18         19     20 
	pStr += sprintf(pStr, "  ,R(Avg) ,MaxRDifRate(%%) ,MinRDifRate(%%) ,R(Avg):VB ,R(Avg):VC ,R(Avg):I ,R(Avg):AD VC ,R(Avg):AD I ,MaxR ,MinR ,");

	             // CsvCol 21   22    23  24  25  26  27  28  29  30  31  32
	pStr += sprintf(pStr, "  , Org R ,R1 ,R2 ,R3 ,R4 ,R5 ,R6 ,R7 ,R8 ,R9 ,R10 ,");

	for (i=0; i < nMeasCount; i++)
	{
			        // 33+ (i*6) +j
          			// i=0 	      33       34        35       36         37         38
          			// i=1        39       40        41       42         43         44
          			// i=2        45       46        47       48         49         50
          			// ...                                                            
          			// i=9        87       88        89       90         91         92
		pStr += sprintf(pStr , "     ,%02d: R ,%02d: VC ,%02d: I ,%02d: ADVC ,%02d: ADI,", i+1, i+1, i+1, i+1, i+1);
	}
	fprintf(fp, "%s\n", str);

	//----------------------
	// BadFile 헤더 출력
	
	// BadFile의 경우에는 CalCsv 파일과 동일한 헤더를 CalMode=170(4W 모드 최초)일 경우에만 출력한다.
	if (//nCalMode == 5 ||		// 2W first
		// nCalMode == 250 || 	// Short first
		 nCalMode == 170 		// 4W first
		)	
	{
		fprintf(fpBad, "  ,  ,%s\n", str);
	}

	fprintf(fpBad, "Mode =, %s\n ", g_saTestCondition[nCalMode].szCalModeName  );	// 다른 모드와 구분을 위해 Mode마다 ModeNum을 출력.

	//-------------------
	// 데이터 출력
	int		nRJigStart, nRJigEnd;
	Get_RJigPinRange(nCalMode, nRJigStart, nRJigEnd);		// nRJigStart, nRJigEnd Reference Value


	int RJigIdx = 0;
	int measIdx;
	for (RJigIdx=nRJigStart; RJigIdx <= nRJigEnd; RJigIdx++)	
	{
		::ZeroMemory(&str, sizeof(str));
		pStr = str;

		pStr += sprintf(pStr , "%d,", p_saRJigData[RJigIdx].nNo); 				// CsvCol 0
		pStr += sprintf(pStr , "%d,", m_saCalData[nCalMode][RJigIdx].nUse);		// CsvCol 1
		pStr += sprintf(pStr , "%d,", m_saCalData[nCalMode][RJigIdx].nValid);	// CsvCol 2

		pStr += sprintf(pStr , "%d,", p_saRJigData[RJigIdx].nVbTrPin); 			// CsvCol 3
		if (g_saTestCondition[nCalMode].nTest == TEST_4W)
			pStr += sprintf(pStr , "%d,", p_saRJigData[RJigIdx].nVbRyPin); 		// CsvCol 4
		else
			pStr += sprintf(pStr , " ,"); // 4W 아니면 빈 컬럼 

		pStr += sprintf(pStr , "%d,", p_saRJigData[RJigIdx].nVcTrPin); 			// CsvCol 5
		if (g_saTestCondition[nCalMode].nTest == TEST_4W)
			pStr += sprintf(pStr , "%d,", p_saRJigData[RJigIdx].nVcRyPin); 		// CsvCol 6
		else
			pStr += sprintf(pStr , " ,"); // 4W 아니면  컬럼 

		pStr += sprintf(pStr , "%.3f,", m_saCalData[nCalMode][RJigIdx].dRefR_Avg); 			// CsvCol 7 
		pStr += sprintf(pStr , "%.3f,", m_saCalData[nCalMode][RJigIdx].dRefVcVal); 			// CsvCol 8 
		pStr += sprintf(pStr , "%.3f,", m_saCalData[nCalMode][RJigIdx].dRefIVal); 			// CsvCol 9 

		pStr += sprintf(pStr , " ,"); 														// CsvCol 10 빈 컬럼 
		pStr += sprintf(pStr , "%.3f,", m_saCalData[nCalMode][RJigIdx].dMeasR_Avg); 		// CsvCol 11 
		pStr += sprintf(pStr , "%.3f,", m_saCalData[nCalMode][RJigIdx].dMeasR_MaxDiffRate);	// CsvCol 12 
		pStr += sprintf(pStr , "%.3f,", m_saCalData[nCalMode][RJigIdx].dMeasR_MinDiffRate);	// CsvCol 13 

		pStr += sprintf(pStr , "%.3f,", m_dVb[nCalMode]); 		                            // CsvCol 14 
		pStr += sprintf(pStr , "%.3f,", m_saCalData[nCalMode][RJigIdx].dMeasVc_Avg); 		// CsvCol 15 
		pStr += sprintf(pStr , "%.3f,", m_saCalData[nCalMode][RJigIdx].dMeasI_Avg); 		// CsvCol 16 
		pStr += sprintf(pStr , "%.3f,", m_saCalData[nCalMode][RJigIdx].dMeasAdVc_Avg);		// CsvCol 17 
		pStr += sprintf(pStr , "%.3f,", m_saCalData[nCalMode][RJigIdx].dMeasAdI_Avg); 		// CsvCol 18 

		pStr += sprintf(pStr , "%.3f,", m_saCalData[nCalMode][RJigIdx].dMeasR_Max); 		// CsvCol 18 
		pStr += sprintf(pStr , "%.3f,", m_saCalData[nCalMode][RJigIdx].dMeasR_Min); 		// CsvCol 20 

		pStr += sprintf(pStr , " ,"); 														// CsvCol 21 빈 컬럼 
		pStr += sprintf(pStr , "%.3f,", m_saCalData[nCalMode][RJigIdx].dOrgR); 				// CsvCol 22

		for (measIdx = 0; measIdx < MAX_MEAS_COUNT; measIdx++) 						        // CsvCol 23 ~ Col 32
			pStr += sprintf(pStr , "%.3f,", m_saCalData[nCalMode][RJigIdx].sa_MeasData[measIdx].dR); 		

		for (measIdx = 0; measIdx < nMeasCount; measIdx++) 			// 
		{
			pStr += sprintf(pStr , " ,"); 											        // CsvCol 33,39,45 .. 87 빈 컬럼 
			pStr += sprintf(pStr , "%.3f,", m_saCalData[nCalMode][RJigIdx].sa_MeasData[measIdx].dR);    // CsvCol 34, 40,46 ...88 	
			pStr += sprintf(pStr , "%.3f,", m_saCalData[nCalMode][RJigIdx].sa_MeasData[measIdx].dVc);	// CsvCol 35, 41,47 ...89
			pStr += sprintf(pStr , "%.3f,", m_saCalData[nCalMode][RJigIdx].sa_MeasData[measIdx].dI);  	// CsvCol 36, 42,48 ...90
			pStr += sprintf(pStr , "%.3f,", m_saCalData[nCalMode][RJigIdx].sa_MeasData[measIdx].dAdVc); // CsvCol 37, 43,49 ...91
			pStr += sprintf(pStr , "%.3f,", m_saCalData[nCalMode][RJigIdx].sa_MeasData[measIdx].dAdI);  // CsvCol 38, 44,50 ...92 
		}

		fprintf(fp, "%s\n", str);

		// DiffRate가 +5%,  -5% 이상이거나,  감소추세등의 InValid한 경우는 BadFile에도 출력을 해준다.
		if (g_sSystem.m_saCalData[nCalMode][RJigIdx].nValid == FALSE) 
			fprintf(fpBad, "  ,  ,%s\n", str);

	}

#ifdef  __AD_RAW_DATA__ 
	//2018.03.06  AD raw data가 필요한 경우에만 On하여 사용.

	//---------------------------------
	// Meas별 AdVC, AdI Raw Data 출력 
	//---------------------------------
	// : Display에는 출력하지 않고 CSV에만 출력한다.
	
	//---------------------
	// Raw data 헤더 출력
	int nAdCount = Get_nAdCount(nCalMode);
	int adCntIdx;
	

	fprintf(fp , "\n\n\n\n\n");
	for (measIdx=0; measIdx < nMeasCount; measIdx++)
	{
		// CsvCol (i*6) = 0,6,12 .. 는 빈 컬럼
		fprintf(fp , "     ,");
		for (adCntIdx=0; adCntIdx < nAdCount; adCntIdx++)		
			fprintf(fp , "M%d: AD%d ,", measIdx+1, adCntIdx+1);
	}
	fprintf(fp, "\n");

			
	//------------------------------
	// Pin NetNo 별 Raw Data 출력
	for (RJigIdx=nRJigStart; RJigIdx <= nRJigEnd; RJigIdx++)	
	{
		// VC 출력
		fprintf(fp, "No%d ADVC ,", p_saRJigData[RJigIdx].nNo);
		for (measIdx=0; measIdx < nMeasCount; measIdx++)
		{
			for (adCntIdx=0; adCntIdx < nAdCount; adCntIdx++)		
				fprintf(fp, "%d ,", m_saCalData[nCalMode][RJigIdx].sa_MeasRawData[measIdx][adCntIdx].nAdVc);
			fprintf(fp, "     ,");
		}
		fprintf(fp, "\n");


		// I 출력
		fprintf(fp, "No%d ADI ,", p_saRJigData[RJigIdx].nNo);
		for (measIdx=0; measIdx < nMeasCount; measIdx++)
		{
			for (adCntIdx=0; adCntIdx < nAdCount; adCntIdx++)		
				fprintf(fp, "%d ,", m_saCalData[nCalMode][RJigIdx].sa_MeasRawData[measIdx][adCntIdx].nAdI);
			fprintf(fp, "     ,");
		}

		fprintf(fp, "\n\n");
	}
#endif

	fclose(fp);
	fclose(fpBad);
	return TRUE;
}



/*	 Test Code for IsSelfTestCase(), IsShortTestCase()
...{
    for (int i = 0; i< MAX_TEST_MODE; i++)
	{
		if (IsSelfTestCase(i) == TRUE)
			TRACE("IsSelfTestCase(nCalMode=%d) TRUE,  %s\n", i, g_saTestCondition[i].szCalModeName);

		if (IsShortTestCase(i) == TRUE)
			TRACE("IsShortTestCase(nCalMode=%d) TRUE,  %s\n", i, g_saTestCondition[i].szCalModeName);

	}
}
*/

// nFlagQCMode1 Flag(1이면 Self Test) 대신 사용
BOOL CSystem::IsSelfTestCase(int nCalMode) 
{
	if ( !strcmp("181 Self 10 V  ", g_saTestCondition[nCalMode].szCalModeName) )
		return TRUE;

	if ( !strcmp("182 Self 200 V ", g_saTestCondition[nCalMode].szCalModeName) )
		return TRUE;

	return FALSE;
}

// FastHR Flag(1이면 ShortTest ) 대신 사용. 
BOOL CSystem::IsShortTestCase(int nCalMode) 
{
	if (nCalMode >= CAL_MODE_SHORT_START && nCalMode < MAX_TEST_MODE)
	{
		return TRUE;
	}

	return FALSE;
}

BOOL CSystem::Is4WTestCase(int nCalMode)
{
	if (nCalMode >= CAL_MODE_4W_START && nCalMode <= CAL_MODE_4W_END)
		return TRUE;

	return FALSE;
}

BOOL CSystem::Is2WOpen_TestCase(int nCalMode)
{
	if (nCalMode >= CAL_MODE_2W_OPEN_START && nCalMode <= CAL_MODE_2W_OPEN_END)
		return TRUE;

	return FALSE;
}

void CSystem::Get_RJigPinRange(int nCalMode, int& rnStart, int& rnEnd)
{
	//------------
	// 4W 
	if (Is4WTestCase(nCalMode) == TRUE)			// PinNo는 +1이므로 1~26
	{
		rnStart = 0;
		rnEnd   = rnStart + (MAX_4W_JIGPIN_CNT -1);	// 24 (25개, 1 ohm ~ 2 Mohm)
		return;
	}

	//------------
	// 2W Open
	if (Is2WOpen_TestCase(nCalMode) == TRUE)	// PinNo는 +1이므로 1~21
	{
		rnStart = _2W_OPEN_JIGPIN_START;		// 0
		rnEnd   = _2W_OPEN_JIGPIN_END;			// 20 (21개, 1 ohm ~ 100 Kohm)
		return;
	}

	//----------------
	// Self,  Short 
	
	// 20V 초과이면 HV
	if ( g_saTestCondition[nCalMode].nVSet > MAX_LV)	// PinNo는 +1이므로 17~37
	{
		rnStart = _2W_HV_N_OPEN_JIGPIN_START;	// 16 
		rnEnd   = _2W_HV_N_OPEN_JIGPIN_END;		// 36 (21개, 10 Kohm ~ 200 Mohm)  
	}
	else										// PinNo는 +1이므로 1~37
	{
		rnStart = _2W_LV_N_OPEN_JIGPIN_START;	// 0
		rnEnd   = _2W_LV_N_OPEN_JIGPIN_END;		// 36 (37개, 1 ohm ~ 200 Mohm
	}


}

int	CSystem::Get_nAdCount(int nCalMode)
{
	int nAdCount;

	// 2017.11.17일 김영필 부장 confirm	
	// Cal에서는 TestCondition의 adCount는 사용하지 않고 10으로 고정.  
	//nAdCount = CAL_AD_COUNT; // ACE400 k2, 4W일때는 10회, 에 해당
	
	// 2018.02.13 김영필 부장 요청. Test Condition의 AdCount 사용해 달라.
	// 2018.02.27 Open,Short의 경우는 AdCount가 1인데 이러면 Cal대표값을 찾기 어려움.
	//            AdCount에 *5한 횟수 만큼 카운트 하기로 함.  (김영필 부장 요청)
	//            4W는 AdCount를 그대로 사용해야 한다. 
	//            4W는 보통 5~100이므로 그대로 사용해도 대표값 선정에 문제 없음.
	if (g_saTestCondition[nCalMode].nTest == TEST_4W)
		nAdCount = g_saTestCondition[nCalMode].nAdCnt;
	else
		nAdCount = g_saTestCondition[nCalMode].nAdCnt * 5;

	return nAdCount;

}

