cscope 16 C:\sonji\Bioptro\ACE400Cal_140409\ACE400Cal_140409"               0000266982
	@C:\sonji\Bioptro\ACE400Cal_140409\ACE400Cal_140409\APIDIO.H

14 #¥agm®
∑ck
(
push
, 4)

16 
	s_DINP
 {

17 
LPWORD
 
	mI≈P‹tNo
;

18 
WORD
 
	mP‹tNum
;

19 
LPBYTE
 
	mBuf
;

20 } 
	tDINP
;

22 
	s_DINPB
 {

23 
LPWORD
 
	mI≈P‹tNo
;

24 
WORD
 
	mP‹tNum
;

25 
WORD
 
	mD©aNum
;

26 
LPBYTE
 
	mBuf
;

27 
WORD
 
	mTim
;

28 } 
	tDINPB
;

30 
	s_DBINP
 {

31 
LPWORD
 
	mI≈BôNo
;

32 
WORD
 
	mBôNum
;

33 
LPBYTE
 
	mBuf
;

34 } 
	tDBINP
;

36 
	s_DBINPB
 {

37 
LPWORD
 
	mI≈BôNo
;

38 
WORD
 
	mBôNum
;

39 
WORD
 
	mD©aNum
;

40 
LPBYTE
 
	mBuf
;

41 
WORD
 
	mTim
;

42 } 
	tDBINPB
;

44 
	s_DOUT
 {

45 
LPWORD
 
	mOutP‹tNo
;

46 
WORD
 
	mP‹tNum
;

47 
LPBYTE
 
	mBuf
;

48 } 
	tDOUT
;

50 
	s_DOUTB
 {

51 
LPWORD
 
	mOutP‹tNo
;

52 
WORD
 
	mP‹tNum
;

53 
WORD
 
	mD©aNum
;

54 
LPBYTE
 
	mBuf
;

55 
WORD
 
	mTim
;

56 } 
	tDOUTB
;

58 
	s_DBOUT
 {

59 
LPWORD
 
	mOutBôNo
;

60 
WORD
 
	mBôNum
;

61 
LPBYTE
 
	mBuf
;

62 } 
	tDBOUT
;

64 
	s_DBOUTB
 {

65 
LPWORD
 
	mOutBôNo
;

66 
WORD
 
	mBôNum
;

67 
WORD
 
	mD©aNum
;

68 
LPBYTE
 
	mBuf
;

69 
WORD
 
	mTim
;

70 } 
	tDBOUTB
;

72 
	s_DIBCD
 {

73 
WORD
 
	mI≈P‹tNo
;

74 
DWORD
 
	mFiguª
;

75 
LPDWORD
 
	mVÆue
;

76 } 
	tDIBCD
;

78 
	s_DOBCD
 {

79 
WORD
 
	mOutP‹tNo
;

80 
DWORD
 
	mFiguª
;

81 
DWORD
 
	mVÆue
;

82 } 
	tDOBCD
;

84 
	s_DPTNSET
 {

85 
LPWORD
 
	mI≈P‹tNo
;

86 
WORD
 
	mP‹tNum
;

87 
LPDWORD
 
	mStsBuf
;

88 
LONG
 
	mStsBufNum
;

89 
WORD
 
	mTim
;

90 } 
	tDPTNSET
;

92 
	s_DTRGSET
 {

93 
LPWORD
 
	mI≈BôNo
;

94 
WORD
 
	mBôNum
;

95 
LPBYTE
 
	mBuf
;

96 
LPWORD
 
	mTrgBôNo
;

97 
WORD
 
	mTrgBôNum
;

98 
LPBYTE
 
	mTrgKöd
;

99 
WORD
 
	mTim
;

100 } 
	tDTRGSET
;

102 #¥agm®
∑ck
(
p›
)

107 #ifde‡
__˝lu•lus


111 
DWORD
 
FAR
 
PASCAL
 
DioO≥n
(
LPHANDLE
, 
WORD
, WORD);

112 
DWORD
 
FAR
 
PASCAL
 
DioO≥nEx
(*, 
LPHANDLE
);

113 
DWORD
 
FAR
 
PASCAL
 
DioWaô
(
HANDLE
, 
WORD
);

114 
DWORD
 
FAR
 
PASCAL
 
DioWaôEx
(
HANDLE
, DWORD);

115 
DWORD
 
FAR
 
PASCAL
 
DioSFûãr
(
HANDLE
, 
WORD
, WORD);

116 
DWORD
 
FAR
 
PASCAL
 
Dio8255Mode
(
HANDLE
, 
WORD
, WORD);

117 
DWORD
 
FAR
 
PASCAL
 
DioI≈
(
HANDLE
, 
DINP
 FAR *);

118 
DWORD
 
FAR
 
PASCAL
 
DioI≈Back
(
HANDLE
, 
DINPB
 FAR *, HANDLE, 
WORD
, HANDLE, WORD);

119 
DWORD
 
FAR
 
PASCAL
 
DioBôI≈
(
HANDLE
, 
DBINP
 FAR *);

120 
DWORD
 
FAR
 
PASCAL
 
DioBôI≈Back
(
HANDLE
, 
DBINPB
 FAR *, HANDLE, 
WORD
, HANDLE, WORD);

121 
DWORD
 
FAR
 
PASCAL
 
DioOut
(
HANDLE
, 
DOUT
 FAR *);

122 
DWORD
 
FAR
 
PASCAL
 
DioOutBack
(
HANDLE
, 
DOUTB
 FAR *, HANDLE, 
WORD
, HANDLE, WORD);

123 
DWORD
 
FAR
 
PASCAL
 
DioBôOut
(
HANDLE
, 
DBOUT
 FAR *);

124 
DWORD
 
FAR
 
PASCAL
 
DioBôOutBack
(
HANDLE
, 
DBOUTB
 FAR *, HANDLE, 
WORD
, HANDLE, WORD);

125 
DWORD
 
FAR
 
PASCAL
 
DioEchoBack
(
HANDLE
, 
DINP
 FAR *);

126 
DWORD
 
FAR
 
PASCAL
 
DioBôEchoBack
(
HANDLE
, 
DBINP
 FAR *);

127 
DWORD
 
FAR
 
PASCAL
 
DioPäSë
(
HANDLE
, 
DPTNSET
 FAR *);

128 
DWORD
 
FAR
 
PASCAL
 
DioPäSèπ
(
HANDLE
, HANDLE, 
WORD
);

129 
DWORD
 
FAR
 
PASCAL
 
DioPäSts
(
HANDLE
, 
LPDWORD
);

130 
DWORD
 
FAR
 
PASCAL
 
DioTrgSë
(
HANDLE
, 
DTRGSET
 FAR *);

131 
DWORD
 
FAR
 
PASCAL
 
DioTrgSèπ
(
HANDLE
, HANDLE, 
WORD
);

132 
DWORD
 
FAR
 
PASCAL
 
DioTrgSts
(
HANDLE
, 
LPDWORD
);

133 
DWORD
 
FAR
 
PASCAL
 
DioI≈BCD
(
HANDLE
, 
DIBCD
 FAR *);

134 
DWORD
 
FAR
 
PASCAL
 
DioOutBCD
(
HANDLE
, 
DOBCD
 FAR *);

135 
DWORD
 
FAR
 
PASCAL
 
DioNI≈BCD
(
HANDLE
, 
DIBCD
 FAR *);

136 
DWORD
 
FAR
 
PASCAL
 
DioNOutBCD
(
HANDLE
, 
DOBCD
 FAR *);

137 
DWORD
 
FAR
 
PASCAL
 
DioEvít
(
HANDLE
, 
WORD
, WORD, HANDLE, WORD);

138 
DWORD
 
FAR
 
PASCAL
 
DioI¡Sí˚
(
HANDLE
, 
LPWORD
);

139 
DWORD
 
FAR
 
PASCAL
 
DioI¡E«bÀ
(
HANDLE
, 
WORD
);

140 
DWORD
 
FAR
 
PASCAL
 
DioSts
(
HANDLE
, 
LPWORD
, LPWORD);

141 
DWORD
 
FAR
 
PASCAL
 
DioSt›
(
HANDLE
);

142 
DWORD
 
FAR
 
PASCAL
 
DioClo£
(
HANDLE
);

143 
DWORD
 
FAR
 
PASCAL
 
DioI≈Byã
(
HANDLE
, 
WORD
, 
LPBYTE
);

144 
DWORD
 
FAR
 
PASCAL
 
DioOutByã
(
HANDLE
, 
WORD
, 
BYTE
);

145 
DWORD
 
FAR
 
PASCAL
 
DioEchoBackByã
(
HANDLE
, 
WORD
, 
LPBYTE
);

146 
DWORD
 
FAR
 
PASCAL
 
DioI≈Bô
(
HANDLE
, 
WORD
, 
LPBYTE
);

147 
DWORD
 
FAR
 
PASCAL
 
DioOutBô
(
HANDLE
, 
WORD
,
BYTE
);

148 
DWORD
 
FAR
 
PASCAL
 
DioEchoBackBô
(
HANDLE
, 
WORD
, 
LPBYTE
);

149 
DWORD
 
FAR
 
PASCAL
 
DioEvítEx
(
HANDLE
, 
WORD
, WORD, HANDLE, WORD);

150 
DWORD
 
FAR
 
PASCAL
 
DioI¡E«bÀEx
(
HANDLE
, 
WORD
, WORD);

151 
DWORD
 
FAR
 
PASCAL
 
DioGë8255Mode
(
HANDLE
, 
WORD
, 
LPWORD
);

152 
FAR
 
PASCAL
 
DioU£Muãx
(
WORD
);

153 
DWORD
 
FAR
 
PASCAL
 
DioSëIoDúe˘i⁄
(
HANDLE
, 
WORD
, DWORD);

154 
DWORD
 
FAR
 
PASCAL
 
DioGëIoDúe˘i⁄
(
HANDLE
, 
WORD
, DWORD *);

157 #ifde‡
__˝lu•lus


	@C:\sonji\Bioptro\ACE400Cal_140409\ACE400Cal_140409\CDio.h

8 (
	tWINAPI
 *
	tPDIO_INT_CALLBACK
)(, 
	tWPARAM
, 
	tLPARAM
, *);

9 (
	tWINAPI
 *
	tPDIO_TRG_CALLBACK
)(, 
	tWPARAM
, 
	tLPARAM
, *);

10 (
	tWINAPI
 *
	tPDIO_DM_COUNT_CALLBACK
)(, 
	tWPARAM
, 
	tLPARAM
, *);

11 (
	tWINAPI
 *
	tPDIO_DM_STOP_CALLBACK
)(, 
	tWPARAM
, 
	tLPARAM
, *);

16 #ifde‡
__˝lu•lus


20 
WINAPI
 
	`DioInô
(*
Devi˚Name
, *
Id
);

21 
WINAPI
 
	`DioExô
(
Id
);

22 
WINAPI
 
	`DioRe£tDevi˚
(
Id
);

23 
WINAPI
 
	`DioGëEº‹Såög
(
Eº‹Code
 , *
Eº‹Såög
);

26 
WINAPI
 
	`DioSëDigôÆFûãr
(
Id
, 
FûãrVÆue
);

27 
WINAPI
 
	`DioGëDigôÆFûãr
(
Id
, *
FûãrVÆue
);

30 
WINAPI
 
	`DioSëIoDúe˘i⁄
(
Id
, 
DWORD
 
Dú
);

31 
WINAPI
 
	`DioGëIoDúe˘i⁄
(
Id
, 
DWORD
 *
Dú
);

32 
WINAPI
 
	`DioSëIoDúe˘i⁄Ex
(
Id
, 
DWORD
 
dwDú
);

33 
WINAPI
 
	`DioGëIoDúe˘i⁄Ex
(
Id
, 
DWORD
 *
dwDú
);

34 
WINAPI
 
	`DioSë8255Mode
(
Id
, 
ChùNo
, 
CålW‹d
);

35 
WINAPI
 
	`DioGë8255Mode
(
Id
, 
ChùNo
, *
CålW‹d
);

38 
WINAPI
 
	`DioI≈Byã
(
Id
, 
P‹tNo
, 
BYTE
 *
D©a
);

39 
WINAPI
 
	`DioI≈Bô
(
Id
, 
BôNo
, 
BYTE
 *
D©a
);

40 
WINAPI
 
	`DioOutByã
(
Id
, 
P‹tNo
, 
BYTE
 
D©a
);

41 
WINAPI
 
	`DioOutBô
(
Id
, 
BôNo
, 
BYTE
 
D©a
);

42 
WINAPI
 
	`DioEchoBackByã
(
Id
, 
P‹tNo
, 
BYTE
 *
D©a
);

43 
WINAPI
 
	`DioEchoBackBô
(
Id
, 
BôNo
, 
BYTE
 *
D©a
);

46 
WINAPI
 
	`DioI≈Mu…iByã
(
Id
, *
P‹tNo
, 
P‹tNum
, 
BYTE
 *
D©a
);

47 
WINAPI
 
	`DioI≈Mu…iBô
(
Id
, *
BôNo
, 
BôNum
, 
BYTE
 *
D©a
);

48 
WINAPI
 
	`DioOutMu…iByã
(
Id
, *
P‹tNo
, 
P‹tNum
, 
BYTE
 *
D©a
);

49 
WINAPI
 
	`DioOutMu…iBô
(
Id
, *
BôNo
, 
BôNum
, 
BYTE
 *
D©a
);

50 
WINAPI
 
	`DioEchoBackMu…iByã
(
Id
, *
P‹tNo
, 
P‹tNum
, 
BYTE
 *
D©a
);

51 
WINAPI
 
	`DioEchoBackMu…iBô
(
Id
, *
BôNo
, 
BôNum
, 
BYTE
 *
D©a
);

54 
WINAPI
 
	`DioNŸifyI¡îru±
(
Id
, 
BôNo
, 
Logic
, 
HANDLE
 
hWnd
);

55 
WINAPI
 
	`DioSëI¡îru±CÆlBackProc
(
Id
, 
PDIO_INT_CALLBACK
 
CÆlBackProc
, *
P¨am
);

58 
WINAPI
 
	`DioNŸifyTrg
(
Id
, 
TrgBô
, 
TrgKöd
, 
Tim
, 
HANDLE
 
hWnd
);

59 
WINAPI
 
	`DioSt›NŸifyTrg
(
Id
, 
TrgBô
);

60 
WINAPI
 
	`DioSëTrgCÆlBackProc
(
Id
, 
PDIO_TRG_CALLBACK
 
CÆlBackProc
, *
P¨am
);

63 
WINAPI
 
	`DioGëDevi˚Info
(*
Devi˚
, 
InfoTy≥
, *
P¨am1
, *
P¨am2
, *
P¨am3
);

64 
WINAPI
 
	`DioQuîyDevi˚Name
(
Index
, *
Devi˚Name
, *
Devi˚
);

65 
WINAPI
 
	`DioGëDevi˚Ty≥
(*
Devi˚
, *
Devi˚Ty≥
);

66 
WINAPI
 
	`DioGëMaxP‹ts
(
Id
, *
InP‹tNum
, *
OutP‹tNum
);

69 
WINAPI
 
	`DioDmSëDúe˘i⁄
(
Id
, 
Dúe˘i⁄
);

70 
WINAPI
 
	`DioDmGëDúe˘i⁄
(
Id
, *
Dúe˘i⁄
);

71 
WINAPI
 
	`DioDmSëSèndAl⁄e
(
Id
);

72 
WINAPI
 
	`DioDmSëMa°î
(
Id
, 
ExtSig1
, 
ExtSig2
, 
ExtSig3
, 
Ma°îHÆt
, 
SœveHÆt
);

73 
WINAPI
 
	`DioDmSëSœve
(
Id
, 
ExtSig1
, 
ExtSig2
, 
ExtSig3
, 
Ma°îHÆt
, 
SœveHÆt
);

74 
WINAPI
 
	`DioDmSëSèπTriggî
(
Id
, 
Dúe˘i⁄
, 
Sèπ
);

75 
WINAPI
 
	`DioDmSëSèπP©ã∫
(
Id
, 
P©ã∫
, 
Mask
);

76 
WINAPI
 
	`DioDmSëClockTriggî
(
Id
, 
Dúe˘i⁄
, 
Clock
);

77 
WINAPI
 
	`DioDmSëI¡î«lClock
(
Id
, 
Dúe˘i⁄
, 
Clock
, 
Unô
);

78 
WINAPI
 
	`DioDmSëSt›Triggî
(
Id
, 
Dúe˘i⁄
, 
St›
);

79 
WINAPI
 
	`DioDmSëSt›Numbî
(
Id
, 
Dúe˘i⁄
, 
St›Numbî
);

80 
WINAPI
 
	`DioDmFifoRe£t
(
Id
, 
Re£t
);

81 
WINAPI
 
	`DioDmSëBuf„r
(
Id
, 
Dúe˘i⁄
, *
Buf„r
, 
Lígth
, 
IsRög
);

82 
WINAPI
 
	`DioDmSëTøns„rSèπWaô
(
Id
, 
Time
);

83 
WINAPI
 
	`DioDmTøns„rSèπ
(
Id
, 
Dúe˘i⁄
);

84 
WINAPI
 
	`DioDmTøns„rSt›
(
Id
, 
Dúe˘i⁄
);

85 
WINAPI
 
	`DioDmGëSètus
(
Id
, 
Dúe˘i⁄
, *
Sètus
, *
Eº
);

86 
WINAPI
 
	`DioDmGëCou¡
(
Id
, 
Dúe˘i⁄
, *
Cou¡
, *
C¨ry
);

87 
WINAPI
 
	`DioDmGëWrôePoöãr
(
Id
, 
Dúe˘i⁄
, *
WrôePoöãr
, *
Cou¡
, *
C¨ry
);

88 
WINAPI
 
	`DioDmSëSt›Evít
(
Id
, 
Dúe˘i⁄
, 
HANDLE
 
hWnd
);

89 
WINAPI
 
	`DioDmSëSt›CÆlBackProc
 (
Id
 ,
PDIO_DM_STOP_CALLBACK
 
CÆlBackProc
 , *
P¨am
);

90 
WINAPI
 
	`DioDmSëCou¡Evít
(
Id
, 
Dúe˘i⁄
, 
Cou¡
, 
HANDLE
 
hWnd
);

91 
WINAPI
 
	`DioDmSëCou¡CÆlBackProc
(
Id
 ,
PDIO_DM_COUNT_CALLBACK
 
CÆlBackProc
 , *
P¨am
);

94 
WINAPI
 
	`DioSëDemoByã
(
Id
, 
P‹tNo
, 
BYTE
 
D©a
);

95 
WINAPI
 
	`DioSëDemoBô
(
Id
, 
BôNo
, 
BYTE
 
D©a
);

97 #ifde‡
__˝lu•lus


98 
	}
};

104 
	#DEVICE_TYPE_ISA
 0

105 
	#DEVICE_TYPE_PCI
 1

106 
	#DEVICE_TYPE_PCMCIA
 2

107 
	#DEVICE_TYPE_USB
 3

108 
	#DEVICE_TYPE_FIT
 4

109 
	#DEVICE_TYPE_CARDBUS
 5

110 

	)

115 
	#DIO_MAX_ACCS_PORTS
 256

	)

117 
	#DIO_INT_NONE
 0

	)

118 
	#DIO_INT_RISE
 1

	)

119 
	#DIO_INT_FALL
 2

	)

121 
	#DIO_TRG_RISE
 1

	)

122 
	#DIO_TRG_FALL
 2

	)

124 
	#DIOM_INTERRUPT
 0x1300

	)

125 
	#DIOM_TRIGGER
 0x1340

	)

126 
	#DIO_DMM_STOP
 0x1350

	)

127 
	#DIO_DMM_COUNT
 0x1360

	)

129 
	#IDIO_DEVICE_TYPE
 0

130 
	#IDIO_NUMBER_OF_8255
 1

131 
	#IDIO_IS_8255_BOARD
 2

132 
	#IDIO_NUMBER_OF_DI_BIT
 3

133 
	#IDIO_NUMBER_OF_DO_BIT
 4

134 
	#IDIO_NUMBER_OF_DI_PORT
 5

135 
	#IDIO_NUMBER_OF_DO_PORT
 6

136 
	#IDIO_IS_POSITIVE_LOGIC
 7

137 
	#IDIO_IS_ECHO_BACK
 8

138 
	#IDIO_IS_DIRECTION
 9

139 
	#IDIO_IS_FILTER
 10

140 
	#IDIO_NUMBER_OF_INT_BIT
 11

141 

	)

145 
	#PI_32
 1

	)

146 
	#PO_32
 2

	)

147 
	#PIO_1616
 3

	)

148 
	#DIODM_DIR_IN
 0x1

	)

149 
	#DIODM_DIR_OUT
 0x2

	)

153 
	#DIODM_START_SOFT
 1

	)

154 
	#DIODM_START_EXT_RISE
 2

	)

155 
	#DIODM_START_EXT_FALL
 3

	)

156 
	#DIODM_START_PATTERN
 4

	)

157 
	#DIODM_START_EXTSIG_1
 5

	)

158 
	#DIODM_START_EXTSIG_2
 6

	)

159 
	#DIODM_START_EXTSIG_3
 7

	)

163 
	#DIODM_CLK_CLOCK
 1

	)

164 
	#DIODM_CLK_EXT_TRG
 2

	)

165 
	#DIODM_CLK_HANDSHAKE
 3

	)

166 
	#DIODM_CLK_EXTSIG_1
 4

	)

167 
	#DIODM_CLK_EXTSIG_2
 5

	)

168 
	#DIODM_CLK_EXTSIG_3
 6

	)

172 
	#DIODM_TIM_UNIT_S
 1

	)

173 
	#DIODM_TIM_UNIT_MS
 2

	)

174 
	#DIODM_TIM_UNIT_US
 3

	)

175 
	#DIODM_TIM_UNIT_NS
 4

	)

179 
	#DIODM_STOP_SOFT
 1

	)

180 
	#DIODM_STOP_EXT_RISE
 2

	)

181 
	#DIODM_STOP_EXT_FALL
 3

	)

182 
	#DIODM_STOP_NUM
 4

	)

183 
	#DIODM_STOP_EXTSIG_1
 5

	)

184 
	#DIODM_STOP_EXTSIG_2
 6

	)

185 
	#DIODM_STOP_EXTSIG_3
 7

	)

189 
	#DIODM_EXT_START_SOFT_IN
 1

	)

190 
	#DIODM_EXT_STOP_SOFT_IN
 2

	)

191 
	#DIODM_EXT_CLOCK_IN
 3

	)

192 
	#DIODM_EXT_EXT_TRG_IN
 4

	)

193 
	#DIODM_EXT_START_EXT_RISE_IN
 5

	)

194 
	#DIODM_EXT_START_EXT_FALL_IN
 6

	)

195 
	#DIODM_EXT_START_PATTERN_IN
 7

	)

196 
	#DIODM_EXT_STOP_EXT_RISE_IN
 8

	)

197 
	#DIODM_EXT_STOP_EXT_FALL_IN
 9

	)

198 
	#DIODM_EXT_CLOCK_ERROR_IN
 10

	)

199 
	#DIODM_EXT_HANDSHAKE_IN
 11

	)

200 
	#DIODM_EXT_TRNSNUM_IN
 12

	)

202 
	#DIODM_EXT_START_SOFT_OUT
 101

	)

203 
	#DIODM_EXT_STOP_SOFT_OUT
 102

	)

204 
	#DIODM_EXT_CLOCK_OUT
 103

	)

205 
	#DIODM_EXT_EXT_TRG_OUT
 104

	)

206 
	#DIODM_EXT_START_EXT_RISE_OUT
 105

	)

207 
	#DIODM_EXT_START_EXT_FALL_OUT
 106

	)

208 
	#DIODM_EXT_STOP_EXT_RISE_OUT
 107

	)

209 
	#DIODM_EXT_STOP_EXT_FALL_OUT
 108

	)

210 
	#DIODM_EXT_CLOCK_ERROR_OUT
 109

	)

211 
	#DIODM_EXT_HANDSHAKE_OUT
 110

	)

212 
	#DIODM_EXT_TRNSNUM_OUT
 111

	)

216 
	#DIODM_STATUS_BMSTOP
 0x1

	)

217 
	#DIODM_STATUS_PIOSTART
 0x2

	)

218 
	#DIODM_STATUS_PIOSTOP
 0x4

	)

219 
	#DIODM_STATUS_TRGIN
 0x8

	)

220 
	#DIODM_STATUS_OVERRUN
 0x10

	)

224 
	#DIODM_STATUS_FIFOEMPTY
 0x1

	)

225 
	#DIODM_STATUS_FIFOFULL
 0x2

	)

226 
	#DIODM_STATUS_SGOVERIN
 0x4

	)

227 
	#DIODM_STATUS_TRGERR
 0x8

	)

228 
	#DIODM_STATUS_CLKERR
 0x10

	)

229 
	#DIODM_STATUS_SLAVEHALT
 0x20

	)

230 
	#DIODM_STATUS_MASTERHALT
 0x40

	)

234 
	#DIODM_RESET_FIFO_IN
 0x02

	)

235 
	#DIODM_RESET_FIFO_OUT
 0x04

	)

239 
	#DIODM_WRITE_ONCE
 0

	)

240 
	#DIODM_WRITE_RING
 1

	)

247 
	#DIO_ERR_SUCCESS
 0

248 
	#DIO_ERR_INI_RESOURCE
 1

249 
	#DIO_ERR_INI_INTERRUPT
 2

250 
	#DIO_ERR_INI_MEMORY
 3

251 
	#DIO_ERR_INI_REGISTRY
 4

252 

	)

253 
	#DIO_ERR_SYS_RECOVERED_FROM_STANDBY
 7

254 
	#DIO_ERR_INI_NOT_FOUND_SYS_FILE
 8

255 
	#DIO_ERR_INI_DLL_FILE_VERSION
 9

256 
	#DIO_ERR_INI_SYS_FILE_VERSION
 10

257 
	#DIO_ERR_INI_NO_MATCH_DRV_VERSION
 11

259 

	)

262 
	#DIO_ERR_DLL_DEVICE_NAME
 10000

263 
	#DIO_ERR_DLL_INVALID_ID
 10001

264 
	#DIO_ERR_DLL_CALL_DRIVER
 10002

265 
	#DIO_ERR_DLL_CREATE_FILE
 10003

266 
	#DIO_ERR_DLL_CLOSE_FILE
 10004

267 
	#DIO_ERR_DLL_CREATE_THREAD
 10005

268 
	#DIO_ERR_INFO_INVALID_DEVICE
 10050

269 
	#DIO_ERR_INFO_NOT_FIND_DEVICE
 10051

270 
	#DIO_ERR_INFO_INVALID_INFOTYPE
 10052

271 

	)

273 
	#DIO_ERR_DLL_BUFF_ADDRESS
 10100

274 
	#DIO_ERR_DLL_HWND
 10200

275 
	#DIO_ERR_DLL_TRG_KIND
 10300

276 

	)

279 
	#DIO_ERR_SYS_MEMORY
 20000

280 
	#DIO_ERR_SYS_NOT_SUPPORTED
 20001

281 
	#DIO_ERR_SYS_BOARD_EXECUTING
 20002

282 
	#DIO_ERR_SYS_USING_OTHER_PROCESS
 20003

283 
	#DIO_ERR_SYS_NOT_FOUND_PROCESS_DATA
 20004

284 

	)

285 #i‚de‡
STATUS_SYS_USB_CRC


286 
	#STATUS_SYS_USB_CRC
 20020

287 
	#STATUS_SYS_USB_BTSTUFF
 20021

288 
	#STATUS_SYS_USB_DATA_TOGGLE_MISMATCH
 20022

289 
	#STATUS_SYS_USB_STALL_PID
 20023

290 
	#STATUS_SYS_USB_DEV_NOT_RESPONDING
 20024

291 
	#STATUS_SYS_USB_PID_CHECK_FAILURE
 20025

	)

292 
	#STATUS_SYS_USB_UNEXPECTED_PID
 20026

293 
	#STATUS_SYS_USB_DATA_OVERRUN
 20027

294 
	#STATUS_SYS_USB_DATA_UNDERRUN
 20028

295 
	#STATUS_SYS_USB_BUFFER_OVERRUN
 20029

296 
	#STATUS_SYS_USB_BUFFER_UNDERRUN
 20030

297 
	#STATUS_SYS_USB_ENDPOINT_HALTED
 20031

298 
	#STATUS_SYS_USB_NOT_FOUND_DEVINFO
 20032

299 
	#STATUS_SYS_USB_ACCESS_DENIED
 20033

300 
	#STATUS_SYS_USB_INVALID_HANDLE
 20034

303 
	#DIO_ERR_SYS_PORT_NO
 20100

304 
	#DIO_ERR_SYS_PORT_NUM
 20101

305 
	#DIO_ERR_SYS_BIT_NO
 20102

306 
	#DIO_ERR_SYS_BIT_NUM
 20103

307 
	#DIO_ERR_SYS_BIT_DATA
 20104

308 
	#DIO_ERR_SYS_INT_BIT
 20200

309 
	#DIO_ERR_SYS_INT_LOGIC
 20201

310 
	#DIO_ERR_SYS_TIM
 20300

311 
	#DIO_ERR_SYS_FILTER
 20400

312 
	#DIO_ERR_SYS_IODIRECTION
 20500

313 
	#DIO_ERR_SYS_8255
 20600

315 
	#DIO_ERR_SYS_SIGNAL
 21000

316 
	#DIO_ERR_SYS_START
 21001

317 
	#DIO_ERR_SYS_CLOCK
 21002

318 
	#DIO_ERR_SYS_CLOCK_VAL
 21003

319 
	#DIO_ERR_SYS_CLOCK_UNIT
 21004

320 
	#DIO_ERR_SYS_STOP
 21005

321 
	#DIO_ERR_SYS_STOP_NUM
 21006

322 
	#DIO_ERR_SYS_RESET
 21007

323 
	#DIO_ERR_SYS_LEN
 21008

324 
	#DIO_ERR_SYS_RING
 21009

325 
	#DIO_ERR_SYS_COUNT
 21010

326 
	#DIO_ERR_DM_BUFFER
 21100

327 
	#DIO_ERR_DM_LOCK_MEMORY
 21101

328 
	#DIO_ERR_DM_PARAM
 21102

329 
	#DIO_ERR_DM_SEQUENCE
 21103

330 

	)

	@C:\sonji\Bioptro\ACE400Cal_140409\ACE400Cal_140409\DlgNumberKeyPad.cpp

4 
	~"°dafx.h
"

5 
	~"V43M™uÆTe°.h
"

6 
	~"DlgNumbîKeyPad.h
"

7 
	~<m©h.h
>

10 #ifde‡
_DEBUG


11 
	#√w
 
DEBUG_NEW


	)

12 #unde‡
THIS_FILE


13 
	gTHIS_FILE
[] = 
__FILE__
;

19 
	#DEFAULT_BACK_COLOR
 0xFFFFFF

	)

20 
	#CURSOR_BACK_COLOR
 0x0000FFFF

	)

22 
CDlgNumbîKeyPad
 
	gNKEYPAD
;

25 
	gCDlgNumbîKeyPad
::
	$CDlgNumbîKeyPad
(
CWnd
* 
pP¨ít
 )

26 : 
	`CDülog
(
CDlgNumbîKeyPad
::
IDD
, 
pP¨ít
)

32 
m_nNumLígth
 = 0;

33 
	}
}

36 
	gCDlgNumbîKeyPad
::
	$DoD©aExch™ge
(
CD©aExch™ge
* 
pDX
)

38 
CDülog
::
	`DoD©aExch™ge
(
pDX
);

40 
	`DDX_C⁄åﬁ
(
pDX
, 
IDC_SSPANEL_NUM_DATA
, 
m_NumPadD©a
);

41 
	`DDX_C⁄åﬁ
(
pDX
, 
IDC_SSPANEL_NUMPOS_0
, 
m_NumPos0
);

42 
	`DDX_C⁄åﬁ
(
pDX
, 
IDC_SSPANEL_NUMPOS_1
, 
m_NumPos1
);

43 
	`DDX_C⁄åﬁ
(
pDX
, 
IDC_SSPANEL_NUMPOS_10
, 
m_NumPos10
);

44 
	`DDX_C⁄åﬁ
(
pDX
, 
IDC_SSPANEL_NUMPOS_11
, 
m_NumPos11
);

45 
	`DDX_C⁄åﬁ
(
pDX
, 
IDC_SSPANEL_NUMPOS_2
, 
m_NumPos2
);

46 
	`DDX_C⁄åﬁ
(
pDX
, 
IDC_SSPANEL_NUMPOS_3
, 
m_NumPos3
);

47 
	`DDX_C⁄åﬁ
(
pDX
, 
IDC_SSPANEL_NUMPOS_4
, 
m_NumPos4
);

48 
	`DDX_C⁄åﬁ
(
pDX
, 
IDC_SSPANEL_NUMPOS_5
, 
m_NumPos5
);

49 
	`DDX_C⁄åﬁ
(
pDX
, 
IDC_SSPANEL_NUMPOS_6
, 
m_NumPos6
);

50 
	`DDX_C⁄åﬁ
(
pDX
, 
IDC_SSPANEL_NUMPOS_7
, 
m_NumPos7
);

51 
	`DDX_C⁄åﬁ
(
pDX
, 
IDC_SSPANEL_NUMPOS_8
, 
m_NumPos8
);

52 
	`DDX_C⁄åﬁ
(
pDX
, 
IDC_SSPANEL_NUMPOS_9
, 
m_NumPos9
);

53 
	`DDX_C⁄åﬁ
(
pDX
, 
IDC_SSPANEL_MAX_VALUE
, 
m_sMaxLimô
);

54 
	`DDX_C⁄åﬁ
(
pDX
, 
IDC_SSPANEL_MIN_VALUE
, 
m_sMöLimô
);

56 
	}
}

59 
	$BEGIN_MESSAGE_MAP
(
CDlgNumbîKeyPad
, 
CDülog
)

61 
	$ON_BN_CLICKED
(
IDC_BUTTON_KEYPAD_0
, 
OnBuâ⁄Key∑d0
)

62 
	$ON_BN_CLICKED
(
IDC_BUTTON_BACKSPACE
, 
OnBuâ⁄Back•a˚
)

63 
	$ON_BN_CLICKED
(
IDC_BUTTON_CANCEL
, 
OnBuâ⁄C™˚l
)

64 
	$ON_BN_CLICKED
(
IDC_BUTTON_CLR
, 
OnBuâ⁄CÃ
)

65 
	$ON_BN_CLICKED
(
IDC_BUTTON_CURSOR_BACK
, 
OnBuâ⁄Curs‹Back
)

66 
	$ON_BN_CLICKED
(
IDC_BUTTON_CURSOR_FWD
, 
OnBuâ⁄Curs‹Fwd
)

67 
	$ON_BN_CLICKED
(
IDC_BUTTON_DEL
, 
OnBuâ⁄Dñ
)

68 
	$ON_BN_CLICKED
(
IDC_BUTTON_DOT
, 
OnBuâ⁄DŸ
)

69 
	$ON_BN_CLICKED
(
IDC_BUTTON_KEYPAD_1
, 
OnBuâ⁄Key∑d1
)

70 
	$ON_BN_CLICKED
(
IDC_BUTTON_KEYPAD_2
, 
OnBuâ⁄Key∑d2
)

71 
	$ON_BN_CLICKED
(
IDC_BUTTON_KEYPAD_3
, 
OnBuâ⁄Key∑d3
)

72 
	$ON_BN_CLICKED
(
IDC_BUTTON_KEYPAD_4
, 
OnBuâ⁄Key∑d4
)

73 
	$ON_BN_CLICKED
(
IDC_BUTTON_KEYPAD_5
, 
OnBuâ⁄Key∑d5
)

74 
	$ON_BN_CLICKED
(
IDC_BUTTON_KEYPAD_6
, 
OnBuâ⁄Key∑d6
)

75 
	$ON_BN_CLICKED
(
IDC_BUTTON_KEYPAD_7
, 
OnBuâ⁄Key∑d7
)

76 
	$ON_BN_CLICKED
(
IDC_BUTTON_KEYPAD_8
, 
OnBuâ⁄Key∑d8
)

77 
	$ON_BN_CLICKED
(
IDC_BUTTON_KEYPAD_9
, 
OnBuâ⁄Key∑d9
)

78 
	$ON_BN_CLICKED
(
IDC_BUTTON_SIGN
, 
OnBuâ⁄Sign
)

79 
	$ON_BN_CLICKED
(
IDC_BUTTON_ENTER
, 
OnBuâ⁄E¡î
)

81 
	$END_MESSAGE_MAP
()

86 
BOOL
 
CDlgNumbîKeyPad
::
	$PªTøn¶©eMesßge
(
MSG
* 
pMsg
)

88 if(
pMsg
->
mesßge
 =
WM_KEYDOWN
){

89 
pMsg
->
wP¨am
){

90 
VK_RETURN
:

91 
	`OnBuâ⁄E¡î
();

93 
VK_ESCAPE
:

94 
	`OnBuâ⁄C™˚l
();

96 
VK_NUMPAD0
:

98 
	`OnBuâ⁄Key∑d0
();

100 
VK_NUMPAD1
:

102 
	`OnBuâ⁄Key∑d1
();

104 
VK_NUMPAD2
:

106 
	`OnBuâ⁄Key∑d2
();

108 
VK_NUMPAD3
:

110 
	`OnBuâ⁄Key∑d3
();

112 
VK_NUMPAD4
:

114 
	`OnBuâ⁄Key∑d4
();

116 
VK_NUMPAD5
:

118 
	`OnBuâ⁄Key∑d5
();

120 
VK_NUMPAD6
:

122 
	`OnBuâ⁄Key∑d6
();

124 
VK_NUMPAD7
:

126 
	`OnBuâ⁄Key∑d7
();

128 
VK_NUMPAD8
:

130 
	`OnBuâ⁄Key∑d8
();

132 
VK_NUMPAD9
:

134 
	`OnBuâ⁄Key∑d9
();

136 
VK_LEFT
:

137 
	`OnBuâ⁄Curs‹Back
();

139 
VK_RIGHT
:

140 
	`OnBuâ⁄Curs‹Fwd
();

142 
VK_DELETE
:

143 
	`OnBuâ⁄Dñ
();

145 
VK_BACK
:

146 
	`OnBuâ⁄Back•a˚
();

149 
VK_DECIMAL
:

150 
	`OnBuâ⁄DŸ
();

154 
	`OnBuâ⁄Sign
();

157  
TRUE
;

160  
CDülog
::
	`PªTøn¶©eMesßge
(
pMsg
);

161 
	}
}

163 
BOOL
 
	gCDlgNumbîKeyPad
::
	$OnInôDülog
()

165 
CDülog
::
	`OnInôDülog
();

167 
m_nCurs‹Pos
 = 1;

168 
	`Di•œyNum
();

169 
	`SëCurs‹Cﬁ‹
(
m_nCurs‹Pos
, 
CURSOR_BACK_COLOR
);

173 if(
m_bI¡egî
Ë
	`GëDlgIãm
(
IDC_BUTTON_DOT
)->
	`E«bÀWödow
(
FALSE
);

175 
m_bFú°
 = 
TRUE
;

178  
TRUE
;

180 
	}
}

182 
	gCDlgNumbîKeyPad
::
	$OnBuâ⁄Back•a˚
()

184 
	`Back•a˚Bô
();

185 
	}
}

187 
	gCDlgNumbîKeyPad
::
	$OnBuâ⁄C™˚l
()

189 
m_dCÆVÆue
 = 
m_dBackupVÆue
;

190 
m_bI¡egî
 = 
FALSE
;

192 
CDülog
::
	`OnC™˚l
();

193 
	}
}

195 
	gCDlgNumbîKeyPad
::
	$OnBuâ⁄CÃ
()

197 
i
;

198 
CSåög
 
°rBuf„r
;

201 
m_dCÆVÆue
 = 0;

203 
i
=0; i<12; i++Ë
m_°rP™ñBô
[i].
	`F‹m©
("");

205 
°rBuf„r
.
	`F‹m©
("%d", 0);

206 
m_nNumLígth
 = 
°rBuf„r
.
	`GëLígth
();

207 
m_°rP™ñBô
[1].
	`F‹m©
("%c", 
°rBuf„r
.
	`GëAt
(
m_nNumLígth
-1));

209 
m_nCurs‹Pos
 = 1;

210 
	`Di•œyNum
();

211 
i
=0; i<12; i++Ë
	`SëCurs‹Cﬁ‹
(i, 
DEFAULT_BACK_COLOR
);

212 
	`SëCurs‹Cﬁ‹
(
m_nCurs‹Pos
, 
CURSOR_BACK_COLOR
);

213 
	}
}

215 
	gCDlgNumbîKeyPad
::
	$OnBuâ⁄Curs‹Back
()

217 if(
m_nCurs‹Pos
 < 
m_nNumLígth
)

219 
	`SëCurs‹Cﬁ‹
(
m_nCurs‹Pos
, 
DEFAULT_BACK_COLOR
);

220 
m_nCurs‹Pos
++;

221 
	`SëCurs‹Cﬁ‹
(
m_nCurs‹Pos
, 
CURSOR_BACK_COLOR
);

223 
	}
}

225 
	gCDlgNumbîKeyPad
::
	$OnBuâ⁄Curs‹Fwd
()

227 if(
m_nCurs‹Pos
 >= 1)

229 
	`SëCurs‹Cﬁ‹
(
m_nCurs‹Pos
, 
DEFAULT_BACK_COLOR
);

230 
m_nCurs‹Pos
--;

231 
	`SëCurs‹Cﬁ‹
(
m_nCurs‹Pos
, 
CURSOR_BACK_COLOR
);

233 
	}
}

235 
	gCDlgNumbîKeyPad
::
	$OnBuâ⁄Dñ
()

237 
	`DñëeBô
();

238 
	}
}

240 
	gCDlgNumbîKeyPad
::
	$OnBuâ⁄DŸ
()

242 if(
m_bI¡egî
 =
TRUE
) ;

243 if(
m_bFú°
 =
TRUE
Ë
	`OnBuâ⁄CÃ
();

244 
m_bFú°
 = 
FALSE
;

246 
CSåög
 
°rBô
;

247 
BOOL
 
bFöd
 = 
FALSE
;

248 
°rBô
.
	`F‹m©
(".");

250 
i
=
m_nNumLígth
; i>
m_nCurs‹Pos
; i--)

252 if(
m_°rP™ñBô
[
i
] =
°rBô
)

254 
bFöd
 = 
TRUE
;

258 if(
bFöd
 =
FALSE
)

259 
	`AddBô
(
°rBô
);

260 
	}
}

262 
	gCDlgNumbîKeyPad
::
	$OnBuâ⁄Key∑d0
()

264 
CSåög
 
°rBô
;

265 
°rBô
.
	`F‹m©
("0");

266 
	`AddBô
(
°rBô
);

267 
	}
}

269 
	gCDlgNumbîKeyPad
::
	$OnBuâ⁄Key∑d1
()

271 
CSåög
 
°rBô
;

272 
°rBô
.
	`F‹m©
("1");

273 
	`AddBô
(
°rBô
);

274 
	}
}

276 
	gCDlgNumbîKeyPad
::
	$OnBuâ⁄Key∑d2
()

278 
CSåög
 
°rBô
;

279 
°rBô
.
	`F‹m©
("2");

280 
	`AddBô
(
°rBô
);

281 
	}
}

283 
	gCDlgNumbîKeyPad
::
	$OnBuâ⁄Key∑d3
()

285 
CSåög
 
°rBô
;

286 
°rBô
.
	`F‹m©
("3");

287 
	`AddBô
(
°rBô
);

288 
	}
}

290 
	gCDlgNumbîKeyPad
::
	$OnBuâ⁄Key∑d4
()

292 
CSåög
 
°rBô
;

293 
°rBô
.
	`F‹m©
("4");

294 
	`AddBô
(
°rBô
);

295 
	}
}

297 
	gCDlgNumbîKeyPad
::
	$OnBuâ⁄Key∑d5
()

299 
CSåög
 
°rBô
;

300 
°rBô
.
	`F‹m©
("5");

301 
	`AddBô
(
°rBô
);

302 
	}
}

304 
	gCDlgNumbîKeyPad
::
	$OnBuâ⁄Key∑d6
()

306 
CSåög
 
°rBô
;

307 
°rBô
.
	`F‹m©
("6");

308 
	`AddBô
(
°rBô
);

309 
	}
}

311 
	gCDlgNumbîKeyPad
::
	$OnBuâ⁄Key∑d7
()

313 
CSåög
 
°rBô
;

314 
°rBô
.
	`F‹m©
("7");

315 
	`AddBô
(
°rBô
);

316 
	}
}

318 
	gCDlgNumbîKeyPad
::
	$OnBuâ⁄Key∑d8
()

320 
CSåög
 
°rBô
;

321 
°rBô
.
	`F‹m©
("8");

322 
	`AddBô
(
°rBô
);

323 
	}
}

325 
	gCDlgNumbîKeyPad
::
	$OnBuâ⁄Key∑d9
()

327 
CSåög
 
°rBô
;

328 
°rBô
.
	`F‹m©
("9");

329 
	`AddBô
(
°rBô
);

330 
	}
}

332 
	gCDlgNumbîKeyPad
::
	$OnBuâ⁄E¡î
()

337 
nSign
 = 1;

338 
dMu…ùÀ
 = 10.0;

339 
dVÆue
;

341 
dVÆue
 = 0.0;

342 if(
m_°rP™ñBô
[11] ="-"Ë
nSign
 = -1;

343 
nSign
 = 1;

345 
CSåög
 
	`°rVÆue
("");

346 
i
=0; i<
m_nNumLígth
; i++Ë
°rVÆue
 +
m_°rP™ñBô
[m_nNumLígth-i].
	`GëAt
(0);

348 *
íd±r
;

349 
dVÆue
 = 
	`°πod
(
°rVÆue
, &
íd±r
);

352 
dVÆue
 *
nSign
;

354 if(
dVÆue
 > 
m_dMaxLimôVÆue
){

359 if(
dVÆue
 < 
m_dMöLimôVÆue
){

365 
m_dCÆVÆue
 = 
dVÆue
;

366 
m_bI¡egî
 = 
FALSE
;

368 
CDülog
::
	`OnOK
();

369 
	}
}

371 
	gCDlgNumbîKeyPad
::
	$OnBuâ⁄Sign
()

373 if(
m_bFú°
 =
TRUE
Ë
	`OnBuâ⁄CÃ
();

374 
m_bFú°
 = 
FALSE
;

376 if(
	`°rcmp
(
m_°rP™ñBô
[11], "-") == 0)

377 
m_°rP™ñBô
[11] = "+";

379 
m_°rP™ñBô
[11] = "-";

380 
	`Di•œyNum
();

381 
	}
}

383 
BOOL
 
	gCDlgNumbîKeyPad
::
	$SëVÆue
(
dVÆue
, 
dMöLimôVÆue
, 
dMaxLimôVÆue
)

385 
i
, 
	`iIndex
(-1), 
	`iPªIndex
(0);

386 
CSåög
 
°rBuf„r
;

388 if(
dVÆue
 >= 100000000. && dValue <= -100000000.) dValue = 0;

389 if((
dMaxLimôVÆue
 < -100000000 || dMaxLimôVÆuê< 
dMöLimôVÆue
) ||

390 (
dMöLimôVÆue
 > 100000000 || dMöLimôVÆuê> 
dMaxLimôVÆue
)){

393  
FALSE
;

395 
m_bI¡egî
 = 
FALSE
;

396 
m_dMaxLimôVÆue
 = 
dMaxLimôVÆue
;

397 
m_dMöLimôVÆue
 = 
dMöLimôVÆue
;

400 if(
dVÆue
 < 
dMöLimôVÆue
 || dVÆuê> 
dMaxLimôVÆue
) dValue = 0;

401 
m_dCÆVÆue
 = 
dVÆue
;

402 
m_dBackupVÆue
 = 
dVÆue
;

403 
i
=0; i<12; i++Ë
m_°rP™ñBô
[i].
	`F‹m©
("");

406 if(
dVÆue
 < 0.0)

408 
dVÆue
 = 
	`Ábs
(dValue);

409 
m_°rP™ñBô
[11] = "-";

412 
°rBuf„r
.
	`F‹m©
("%lf", 
dVÆue
);

413 
m_nNumLígth
 = 
°rBuf„r
.
	`GëLígth
();

416 
i
=
m_nNumLígth
; i>0; i--)

419 
iIndex
 = 
°rBuf„r
.
	`Föd
("0", 
i
);

420 if(
iIndex
 =
iPªIndex
)

425 
ii
 = 
°rBuf„r
.
	`Föd
(".", 
i
);

426 if(
ii
 == -1) ;

429 
iIndex
 -= 1;

434 
iPªIndex
 = 
iIndex
;

437 
°rBuf„r
 = såBuf„r.
	`Le·
(
iIndex
);

438 
m_nNumLígth
 = 
°rBuf„r
.
	`GëLígth
();

439 
i
=0; i<
m_nNumLígth
; i++)

441 
m_°rP™ñBô
[
i
 + 1].
	`F‹m©
("%c", 
°rBuf„r
.
	`GëAt
(
m_nNumLígth
 - i - 1));

444  
TRUE
;

445 
	}
}

447 
BOOL
 
	gCDlgNumbîKeyPad
::
	$SëVÆue
(
nVÆue
, 
dMöLimôVÆue
, 
dMaxLimôVÆue
)

449 
i
;

450 
CSåög
 
°rBuf„r
;

452 if(
nVÆue
 >= 100000000 &&ÇValue <= -100000000)ÇValue = 0;

453 if((
dMaxLimôVÆue
 < -100000000 || dMaxLimôVÆuê< 
dMöLimôVÆue
) ||

454 (
dMöLimôVÆue
 > 100000000 || dMöLimôVÆuê> 
dMaxLimôVÆue
)){

457  
FALSE
;

460 
m_bI¡egî
 = 
TRUE
;

461 
m_dMaxLimôVÆue
 = 
dMaxLimôVÆue
;

462 
m_dMöLimôVÆue
 = 
dMöLimôVÆue
;

465 
m_dCÆVÆue
 = 
nVÆue
;

466 
m_dBackupVÆue
 = 
nVÆue
;

468 
i
=0; i<12; i++)

469 
m_°rP™ñBô
[
i
].
	`F‹m©
("");

472 if(
nVÆue
 =0Ë
m_nNumLígth
 = 0;

474 if(
nVÆue
 < 0)

476 
nVÆue
 = 
	`abs
(nValue);

477 
m_°rP™ñBô
[11] = "-";

480 
°rBuf„r
.
	`F‹m©
("%d", 
nVÆue
);

481 
m_nNumLígth
 = 
°rBuf„r
.
	`GëLígth
();

482 
i
=0; i<
m_nNumLígth
; i++)

484 
m_°rP™ñBô
[
i
 + 1].
	`F‹m©
("%c", 
°rBuf„r
.
	`GëAt
(
m_nNumLígth
 - i - 1));

487  
TRUE
;

488 
	}
}

490 
	gCDlgNumbîKeyPad
::
	$Di•œyNum
()

492 
m_NumPos0
.
	`SëC≠ti⁄
(
m_°rP™ñBô
[0]);

493 
m_NumPos1
.
	`SëC≠ti⁄
(
m_°rP™ñBô
[1]);

494 
m_NumPos2
.
	`SëC≠ti⁄
(
m_°rP™ñBô
[2]);

495 
m_NumPos3
.
	`SëC≠ti⁄
(
m_°rP™ñBô
[3]);

496 
m_NumPos4
.
	`SëC≠ti⁄
(
m_°rP™ñBô
[4]);

497 
m_NumPos5
.
	`SëC≠ti⁄
(
m_°rP™ñBô
[5]);

498 
m_NumPos6
.
	`SëC≠ti⁄
(
m_°rP™ñBô
[6]);

499 
m_NumPos7
.
	`SëC≠ti⁄
(
m_°rP™ñBô
[7]);

500 
m_NumPos8
.
	`SëC≠ti⁄
(
m_°rP™ñBô
[8]);

501 
m_NumPos9
.
	`SëC≠ti⁄
(
m_°rP™ñBô
[9]);

502 
m_NumPos10
.
	`SëC≠ti⁄
(
m_°rP™ñBô
[10]);

503 
m_NumPos11
.
	`SëC≠ti⁄
(
m_°rP™ñBô
[11]);

505 
CSåög
 
	`Msg
("");

506 
Msg
.
	`F‹m©
("%.1f", 
m_dMaxLimôVÆue
); 
m_sMaxLimô
.
	`SëC≠ti⁄
(Msg);

507 
Msg
.
	`F‹m©
("%.1f", 
m_dMöLimôVÆue
); 
m_sMöLimô
.
	`SëC≠ti⁄
(Msg);

508 
	}
}

510 
	gCDlgNumbîKeyPad
::
	$SëCurs‹Cﬁ‹
(
nNo
, 
lCﬁ‹
)

512 
nNo
)

515 
m_NumPos0
.
	`SëBackCﬁ‹
(
lCﬁ‹
);

518 
m_NumPos1
.
	`SëBackCﬁ‹
(
lCﬁ‹
);

521 
m_NumPos2
.
	`SëBackCﬁ‹
(
lCﬁ‹
);

524 
m_NumPos3
.
	`SëBackCﬁ‹
(
lCﬁ‹
);

527 
m_NumPos4
.
	`SëBackCﬁ‹
(
lCﬁ‹
);

530 
m_NumPos5
.
	`SëBackCﬁ‹
(
lCﬁ‹
);

533 
m_NumPos6
.
	`SëBackCﬁ‹
(
lCﬁ‹
);

536 
m_NumPos7
.
	`SëBackCﬁ‹
(
lCﬁ‹
);

539 
m_NumPos8
.
	`SëBackCﬁ‹
(
lCﬁ‹
);

542 
m_NumPos9
.
	`SëBackCﬁ‹
(
lCﬁ‹
);

545 
m_NumPos10
.
	`SëBackCﬁ‹
(
lCﬁ‹
);

548 
m_NumPos11
.
	`SëBackCﬁ‹
(
lCﬁ‹
);

551 
	}
}

553 
	gCDlgNumbîKeyPad
::
	$AddBô
(
CSåög
 
°rBô
)

555 
CSåög
 
°rBuf
;

557 if(
m_bFú°
 =
TRUE
Ë
	`OnBuâ⁄CÃ
();

558 
m_bFú°
 = 
FALSE
;

563 if(
m_nCurs‹Pos
 == 0)

565 if(
m_nNumLígth
 < 10)

566 
m_nNumLígth
++;

569 
i
=9; i>0; i--)

570 
m_°rP™ñBô
[
i
+1] = m_strPanelBit[i];

572 
m_°rP™ñBô
[1] = 
°rBô
;

579 
m_°rP™ñBô
[
m_nCurs‹Pos
] = 
°rBô
;

580 
	`SëCurs‹Cﬁ‹
(
m_nCurs‹Pos
, 
DEFAULT_BACK_COLOR
);

581 
m_nCurs‹Pos
--;

582 
	`SëCurs‹Cﬁ‹
(
m_nCurs‹Pos
, 
CURSOR_BACK_COLOR
);

584 
	`Di•œyNum
();

585 
	`SëCurs‹Cﬁ‹
(
m_nCurs‹Pos
, 
CURSOR_BACK_COLOR
);

586 
	}
}

588 
	gCDlgNumbîKeyPad
::
	$DñëeBô
()

590 if(
m_nCurs‹Pos
 =0 || 
m_nNumLígth
 == 0)

594 
i
=
m_nCurs‹Pos
+1; i<=
m_nNumLígth
; i++)

595 
m_°rP™ñBô
[
i
-1] = m_strPanelBit[i];

598 
m_°rP™ñBô
[
m_nNumLígth
] = "";

599 
	`OnBuâ⁄Curs‹Fwd
();

600 
m_nNumLígth
--;

601 
	`Di•œyNum
();

602 
	}
}

604 
	gCDlgNumbîKeyPad
::
	$Back•a˚Bô
()

606 if(
m_nCurs‹Pos
 >
m_nNumLígth
){

607 
	`OnBuâ⁄CÃ
();

612 
i
=
m_nCurs‹Pos
; i<
m_nNumLígth
; i++)

613 
m_°rP™ñBô
[
i
] = m_strPanelBit[i+1];

616 
m_°rP™ñBô
[
m_nNumLígth
] = "";

617 
m_nNumLígth
--;

618 if(
m_nNumLígth
 =0Ë
	`OnBuâ⁄CÃ
();

619 
	`Di•œyNum
();

620 
	}
}

622 
	$BEGIN_EVENTSINK_MAP
(
CDlgNumbîKeyPad
, 
CDülog
)

625 
	`END_EVENTSINK_MAP
()

	@C:\sonji\Bioptro\ACE400Cal_140409\ACE400Cal_140409\DlgNumberKeyPad.h

2 
	~"s•n˘æ.h
"

4 #i‡!
deföed
(
AFX_DLGNUMBERKEYPAD_H__43CD8555_86D8_491C_9DD0_5AB1C7BD72FB__INCLUDED_
)

5 
	#AFX_DLGNUMBERKEYPAD_H__43CD8555_86D8_491C_9DD0_5AB1C7BD72FB__INCLUDED_


	)

7 #i‡
_MSC_VER
 > 1000

8 #¥agm®
⁄˚


16 ˛as†
	cCDlgNumbîKeyPad
 : 
public
 
CDülog


18 
BOOL
 
m_bFú°
, 
	mm_bI¡egî
;

19 
	mm_nCurs‹Pos
, 
	mm_nNumLígth
;

20 
	mm_dCÆVÆue
, 
	mm_dBackupVÆue
;

21 
	mm_dNumD©a
;

22 
	mm_dMaxLimôVÆue
, 
	mm_dMöLimôVÆue
;

23 
CSåög
 
	mm_°rP™ñBô
[12];

26 
	mpublic
:

27 
CDlgNumbîKeyPad
(
CWnd
* 
pP¨ít
 = 
NULL
);

29 
BOOL
 
	mm_bSignVñ
;

31 
	$GëVÆue
(Ë{  
m_dCÆVÆue
; }

32 
BOOL
 
	`SëVÆue
(
nVÆue
, 
dMöLimôVÆue
=-100000000, 
dMaxLimôVÆue
=100000000);

33 
BOOL
 
	`SëVÆue
(
dVÆue
, 
dMöLimôVÆue
=-100000000, 
dMaxLimôVÆue
=100000000);

34 
	`SëLimôVÆue
(
dMöVÆue
, 
dMaxVÆue
);

36 
¥Ÿe˘ed
:

37 
	`Di•œyNum
();

38 
	`SëCurs‹Cﬁ‹
(
nNo
, 
lCﬁ‹
);

39 
	`AddBô
(
CSåög
 
°rBô
);

40 
	`Back•a˚Bô
();

41 
	`DñëeBô
();

45 íum { 
IDD
 = 
IDD_DIALOG_NUM_PAD
 
	}
};

46 
CSSPNCål
 
	gm_NumPadD©a
;

47 
CSSPNCål
 
	gm_NumPos0
;

48 
CSSPNCål
 
	gm_NumPos1
;

49 
CSSPNCål
 
	gm_NumPos10
;

50 
CSSPNCål
 
	gm_NumPos11
;

51 
CSSPNCål
 
	gm_NumPos2
;

52 
CSSPNCål
 
	gm_NumPos3
;

53 
CSSPNCål
 
	gm_NumPos4
;

54 
CSSPNCål
 
	gm_NumPos5
;

55 
CSSPNCål
 
	gm_NumPos6
;

56 
CSSPNCål
 
	gm_NumPos7
;

57 
CSSPNCål
 
	gm_NumPos8
;

58 
CSSPNCål
 
	gm_NumPos9
;

59 
CSSPNCål
 
	gm_sMaxLimô
;

60 
CSSPNCål
 
	gm_sMöLimô
;

67 
	gpublic
:

68 
vútuÆ
 
BOOL
 
PªTøn¶©eMesßge
(
MSG
* 
pMsg
);

69 
	g¥Ÿe˘ed
:

70 
vútuÆ
 
DoD©aExch™ge
(
CD©aExch™ge
* 
pDX
);

74 
	g¥Ÿe˘ed
:

78 
vútuÆ
 
BOOL
 
OnInôDülog
();

79 
afx_msg
 
OnBuâ⁄Key∑d0
();

80 
afx_msg
 
OnBuâ⁄Back•a˚
();

81 
afx_msg
 
OnBuâ⁄C™˚l
();

82 
afx_msg
 
OnBuâ⁄CÃ
();

83 
afx_msg
 
OnBuâ⁄Curs‹Back
();

84 
afx_msg
 
OnBuâ⁄Curs‹Fwd
();

85 
afx_msg
 
OnBuâ⁄Dñ
();

86 
afx_msg
 
OnBuâ⁄DŸ
();

87 
afx_msg
 
OnBuâ⁄Key∑d1
();

88 
afx_msg
 
OnBuâ⁄Key∑d2
();

89 
afx_msg
 
OnBuâ⁄Key∑d3
();

90 
afx_msg
 
OnBuâ⁄Key∑d4
();

91 
afx_msg
 
OnBuâ⁄Key∑d5
();

92 
afx_msg
 
OnBuâ⁄Key∑d6
();

93 
afx_msg
 
OnBuâ⁄Key∑d7
();

94 
afx_msg
 
OnBuâ⁄Key∑d8
();

95 
afx_msg
 
OnBuâ⁄Key∑d9
();

96 
afx_msg
 
OnBuâ⁄Sign
();

97 
afx_msg
 
OnBuâ⁄E¡î
();

98 
	$DECLARE_EVENTSINK_MAP
()

100 
	`DECLARE_MESSAGE_MAP
()

101 
	}
};

104 
CDlgNumbîKeyPad
 
NKEYPAD
;

	@C:\sonji\Bioptro\ACE400Cal_140409\ACE400Cal_140409\Error.cpp

5 
	~"°dafx.h
"

7 
	~"Eº‹.h
"

9 #ifde‡
_DEBUG


10 #unde‡
THIS_FILE


11 
	gTHIS_FILE
[]=
__FILE__
;

12 
	#√w
 
DEBUG_NEW


	)

19 
CEº‹
 
	gERR
;

22 
	gCEº‹
::
	$CEº‹
()

25 
	}
}

27 
CEº‹
::~
	$CEº‹
()

30 
	}
}

32 
CEº‹
::
	$Së
(
îr‹_no
, 
CSåög
 
°rSèã
)

34 
m_îr‹_no
 = 
îr‹_no
;

36 
m_°rSèã
 = 
°rSèã
;

38 
îr‹_no
)

40 
NO_ERR
:

46 
	}
}

48 
	gCEº‹
::
	$Re£t
()

50 
m_îr‹_no
 = 
NO_ERR
;

51 
	}
}

53 
BOOL
 
	gCEº‹
::
	$GëMsg
(
îr‹_no
, 
CSåög
 &
tôÀ
, CSåög &
°©e
, CSåög &
sﬁ
)

55 
i
=0; i<
ERRMSG_TABLE_LEN
; i++) {

56 i‡(
EºMsgTabÀ
[
i
].
îr‹_no
 ==Érror_no) {

57 
tôÀ
 = 
EºMsgTabÀ
[
i
].title;

58 
°©e
 = 
EºMsgTabÀ
[
i
].state;

59 
sﬁ
 = 
EºMsgTabÀ
[
i
].sol;

60  
TRUE
;

63  
FALSE
;

64 
	}
}

	@C:\sonji\Bioptro\ACE400Cal_140409\ACE400Cal_140409\Error.h

5 #i‡!
deföed
(
AFX_ERROR_H__8D3D34FA_3024_4D5F_81B6_D01841D85268__INCLUDED_
)

6 
	#AFX_ERROR_H__8D3D34FA_3024_4D5F_81B6_D01841D85268__INCLUDED_


	)

8 #i‡
_MSC_VER
 > 1000

9 #¥agm®
⁄˚


14 
	eEºID
 {

16 
	mNO_ERR
=0,

19 
	mESTOP
=10,

23 
	mSENSOR
=100,

24 
	mSS_DT5V_LOW
,

25 
	mSS_DT12V_LOW
,

26 
	mSS_DT24V_LOW
,

27 
	mSS_DTHV_LOW
,

28 
	mSS_DT5VB_A_LOW
,

29 
	mSS_DT5VC_A_LOW
,

30 
	mSS_DT5VB_B_LOW
,

31 
	mSS_DT5VC_B_LOW
,

32 
	mSS_DT5VB_C_LOW
,

33 
	mSS_DT5VC_C_LOW
,

34 
	mSS_DT5VB_D_LOW
,

35 
	mSS_DT5VC_D_LOW
,

36 
	mSS_DT5VB_E_LOW
,

37 
	mSS_DT5VC_E_LOW
,

38 
	mSS_DT5VB_F_LOW
,

39 
	mSS_DT5VC_F_LOW
,

40 
	mSS_DT5VB_G_LOW
,

41 
	mSS_DT5VC_G_LOW
,

42 
	mSS_DT5VB_H_LOW
,

43 
	mSS_DT5VC_H_LOW
,

46 
	mSGNI
=400,

49 
	mFLAG
=500,

50 
	mFLAG_SOURCE_OR_SINK_CANNOT_ON
,

51 
	mFLAG_SOURCE_CANNOT_OFF
,

52 
	mFLAG_SINK_CANNOT_OFF
,

53 
	mFLAG_SOURCE_LEAK
,

54 
	mFLAG_SINK_LEAK
,

55 
	mFLAG_ODD_SOURCE_LEAK
,

56 
	mFLAG_EVEN_SOURCE_LEAK
,

59 
	mINVALID_RETURN
=600,

62 
	mOVERLIMIT
=700,

63 
	mOL_REF_CURRENT_IS_OVER_INPUT_VOLT_N_RGST
,

64 
	mOL_I_RANGE_OVER
,

65 
	mOL_I_RANGE_UNDER
,

68 
	mOVERTIME
=800,

69 
	mOT_SETNCHK
,

72 
	mDEVICE
=1000,

74 
	mMOTION
=
DEVICE
+100,

75 
	mINVALID_RETURN_DIOINPBIT
,

76 
	mINVALID_RETURN_DIOOUTBIT
,

77 
	mINVALID_RETURN_DIOINPBYTE
,

78 
	mINVALID_RETURN_DIOOUTBYTE
,

83 
	mîr‹_no
;

84 c⁄° * 
	mtôÀ
;

85 c⁄° * 
	m°©e
;

86 c⁄° * 
	msﬁ
;

87 } 
	tsEºMsg
;

89 
sEºMsg
 
	gEºMsgTabÀ
[] =

91 { 
NO_ERR
, "Normal", "", "" },

93 { 
ESTOP
, "E-Stop", "", "" },

95 { 
SENSOR
, "Sensor", "", "" },

96 { 
SS_DT5V_LOW
 , "5V ¿¸ø¯ ¿ÃªÛ", "", "" },

97 { 
SS_DT12V_LOW
, "12V ¿¸ø¯ ¿ÃªÛ", "", "" },

98 { 
SS_DT24V_LOW
, "24V ¿¸ø¯ ¿ÃªÛ", "", "" },

99 { 
SS_DTHV_LOW
 , "HV ¿¸ø¯ ¿ÃªÛ", "", "" },

101 { 
SS_DT5VB_A_LOW
, "BOX A 5VB ¿¸ø¯ ¿ÃªÛ", "" , "" },

102 { 
SS_DT5VC_A_LOW
, "BOX A 5VC ¿¸ø¯ ¿ÃªÛ", "" , "" },

103 { 
SS_DT5VB_B_LOW
, "BOX B 5VB ¿¸ø¯ ¿ÃªÛ", "" , "" },

104 { 
SS_DT5VC_B_LOW
, "BOX B 5VC ¿¸ø¯ ¿ÃªÛ", "" , "" },

105 { 
SS_DT5VB_C_LOW
, "BOX C 5VB ¿¸ø¯ ¿ÃªÛ", "" , "" },

106 { 
SS_DT5VC_C_LOW
, "BOX C 5VC ¿¸ø¯ ¿ÃªÛ", "" , "" },

107 { 
SS_DT5VB_D_LOW
, "BOX D 5VB ¿¸ø¯ ¿ÃªÛ", "" , "" },

108 { 
SS_DT5VC_D_LOW
, "BOX D 5VC ¿¸ø¯ ¿ÃªÛ", "" , "" },

109 { 
SS_DT5VB_E_LOW
, "BOX E 5VB ¿¸ø¯ ¿ÃªÛ", "" , "" },

110 { 
SS_DT5VC_E_LOW
, "BOX E 5VC ¿¸ø¯ ¿ÃªÛ", "" , "" },

111 { 
SS_DT5VB_F_LOW
, "BOX F 5VB ¿¸ø¯ ¿ÃªÛ", "" , "" },

112 { 
SS_DT5VC_F_LOW
, "BOX F 5VC ¿¸ø¯ ¿ÃªÛ", "" , "" },

113 { 
SS_DT5VB_G_LOW
, "BOX G 5VB ¿¸ø¯ ¿ÃªÛ", "" , "" },

114 { 
SS_DT5VC_G_LOW
, "BOX G 5VC ¿¸ø¯ ¿ÃªÛ", "" , "" },

115 { 
SS_DT5VB_H_LOW
, "BOX H 5VB ¿¸ø¯ ¿ÃªÛ", "" , "" },

116 { 
SS_DT5VC_H_LOW
, "BOX H 5VC ¿¸ø¯ ¿ÃªÛ", "" , "" },

118 { 
SGNI
, "Signal", "", "" },

120 { 
FLAG
, "Flag", "", "" },

122 { 
FLAG_SOURCE_OR_SINK_CANNOT_ON
, "Source/Sink ON ¿ÃªÛ", "", "" },

123 { 
FLAG_SOURCE_CANNOT_OFF
, "Source OFF ¿ÃªÛ", "", "" },

124 { 
FLAG_SINK_CANNOT_OFF
, "Sink OFF ¿ÃªÛ", "", "" },

125 { 
FLAG_SOURCE_LEAK
, "Source Leak ¿ÃªÛ", "", "" },

126 { 
FLAG_SINK_LEAK
, "Sink Leak ¿ÃªÛ", "", "" },

127 { 
FLAG_ODD_SOURCE_LEAK
, "Odd Source Leak ¿ÃªÛ", "", "" },

128 { 
FLAG_EVEN_SOURCE_LEAK
, "Even Source Leak ¿ÃªÛ", "", "" },

130 { 
INVALID_RETURN
, "InvalidÑeturn", "", "" },

132 { 
OVERLIMIT
, "OverÜimit", "", "" },

133 { 
OL_REF_CURRENT_IS_OVER_INPUT_VOLT_N_RGST
, "º≥¡§ ¿¸∑˘ ∞™ ¿ÃªÛ", "", "" },

134 { 
OL_I_RANGE_OVER
, "√÷¥Î ¿¸∑˘ º≥¡§ π¸¿ß √ ∞˙", "", "" },

135 { 
OL_I_RANGE_UNDER
, "√÷º“ ¿¸∑˘ º≥¡§ π¸¿ß √ ∞˙", "", "" },

137 { 
OVERTIME
, "OverÅime", "", "" },

138 { 
OT_SETNCHK
, "Souce ¿¸æ–º≥¡§ ¿ÃªÛ", "", "" },

141 { 
DEVICE
, "Device", "", "" },

142 { 
MOTION
, "Motion", "", "" },

143 { 
INVALID_RETURN_DIOINPBIT
, "InvalidÑeturn from DioInpBit()", "", "" },

144 { 
INVALID_RETURN_DIOOUTBIT
, "InvalidÑeturn from DioOutBit()", "", "" },

145 { 
INVALID_RETURN_DIOINPBYTE
, "InvalidÑeturn from DioInpByte()", "", "" },

146 { 
INVALID_RETURN_DIOOUTBYTE
, "InvalidÑeturn from DioOutByte()", "", "" },

150 
	#ERRMSG_TABLE_LEN
 (
EºMsgTabÀ
)/(EºMsgTabÀ[0])

	)

153 ˛as†
	cCEº‹


155 
	m¥iv©e
:

156 
m_îr‹_no
;

158 
	mpublic
:

159 
CSåög
 
m_°rSèã
;

161 
Së
(
îrcode
, 
CSåög
 
°rSèã
="");

162 
	$Gë
(Ë{  
m_îr‹_no
; }

163 
	`Re£t
();

164 
BOOL
 
	`GëMsg
(
îr‹_no
, 
CSåög
 &
tôÀ
, CSåög &
°©e
, CSåög &
sﬁ
);

166 
public
:

167 
	`CEº‹
();

168 
vútuÆ
 ~
	`CEº‹
();

169 
	}
};

172 
CEº‹
 
ERR
;

	@C:\sonji\Bioptro\ACE400Cal_140409\ACE400Cal_140409\Globals.cpp

5 
	~"°dafx.h
"

6 
	~"V43M™uÆTe°.h
"

7 
	~"GlobÆs.h
"

9 #ifde‡
_DEBUG


10 #unde‡
THIS_FILE


11 
	gTHIS_FILE
[]=
__FILE__
;

12 
	#√w
 
DEBUG_NEW


	)

19 
	gCGlobÆs
::
	$CGlobÆs
()

22 
	}
}

24 
CGlobÆs
::~
	$CGlobÆs
()

27 
	}
}

29 
	$DoEvíts
(
DWORD
 
dwMûli£c⁄ds
)

31 
MSG
 
msg
;

32 i‡(::
	`PìkMesßge
(&
msg
, 
NULL
, 0, 0, 
PM_REMOVE
)) {

33 ::
	`Tøn¶©eMesßge
(&
msg
);

34 ::
	`Di•©chMesßge
(&
msg
);

36 
	`SÀï
(
dwMûli£c⁄ds
);

37 
	}
}

39 
	$Dñay
(
UINT
 
dñaytime
, UINT 
unô
)

45 
LONGLONG
 
FªqQuadP¨t
=0;

46 
LARGE_INTEGER
 
Fªq
, 
ZîoC¡
, 
CurC¡
;

47 if(!
	`QuîyPîf‹m™˚Fªquícy
(&
Fªq
)) ;

49 
unô
)

51 
£c
:

52 
FªqQuadP¨t
 = 
Fªq
.
QuadP¨t
;

55 
m£c
:

56 
FªqQuadP¨t
 = 
Fªq
.
QuadP¨t
/1000;

60 
u£c
:

61 
FªqQuadP¨t
 = 
Fªq
.
QuadP¨t
/1000000;

65 
	`QuîyPîf‹m™˚Cou¡î
(&
ZîoC¡
);

68 
	`DoEvíts
();

69 
	`QuîyPîf‹m™˚Cou¡î
(&
CurC¡
);

71 (
CurC¡
.
QuadP¨t
-
ZîoC¡
.QuadP¨t)/
FªqQuadP¨t
 < 
dñaytime
);

72 
	}
}

	@C:\sonji\Bioptro\ACE400Cal_140409\ACE400Cal_140409\Globals.h

5 #i‡!
deföed
(
AFX_GLOBALS_H__FDA16379_4221_4970_8471_B8FBD39D2C1E__INCLUDED_
)

6 
	#AFX_GLOBALS_H__FDA16379_4221_4970_8471_B8FBD39D2C1E__INCLUDED_


	)

8 #i‡
_MSC_VER
 > 1000

9 #¥agm®
⁄˚


13 ˛as†
	cCGlobÆs


15 
	mpublic
:

16 
CGlobÆs
();

17 
	mvútuÆ
 ~
CGlobÆs
();

22 
	eUNIT
 { 
	m£c
=0, 
	mm£c
=1, 
	mu£c
=2, 
	mmA
, 
	muA
, 
	mMohm
, 
	mKohm
, 
	mohm
, 
	mmohm
, 
	muohm
 };

23 
	eUNIT_CONVERT_TYPE
 {

24 
	mMM_TO_UM
, 
	mUM_TO_MM
, 
	mSEC_TO_MSEC
, 
	mMSEC_TO_SEC
,

25 
	mVOLT_TO_DA
, 
	mI0_TO_DA
, 
	mI1_TO_DA
, 
	mI2_TO_DA
, 
	mI3_TO_DA
, 
	mI4_TO_DA
, 
	mI5_TO_DA
, 
	mI6_TO_DA
,

26 
	mAD_TO_LVOLT
, 
	mAD_TO_HVOLT
, 
	mAD_TO_I0
, 
	mAD_TO_I1
, 
	mAD_TO_I2
, 
	mAD_TO_I3
, 
	mAD_TO_I4
, 
	mAD_TO_I5
, 
	mAD_TO_I6


29 
	gãm∂©e
 <
˛ass
 
	gT
> 
	$UNIT_CONVERT
(
T
 &
vÆue
, 
UINT
 
c⁄dôi⁄
)

31 
max_VDAD
 = 4000, 
max_IDAD
 = 50000;

33 
max_LV
 = 20, 
max_HV
 = 300;

34 
dVÆue
 = 
vÆue
;

36 
c⁄dôi⁄
)

38 
VOLT_TO_DA
:

39 if(
dVÆue
 <=
max_LV
ËdVÆuê*
max_VDAD
/max_LV;

40 
dVÆue
 *
max_VDAD
/
max_HV
;

43 
I0_TO_DA
:

44 
dVÆue
 *
max_IDAD
/100000.;

47 
I1_TO_DA
:

48 
dVÆue
 *
max_IDAD
/20000.;

51 
I2_TO_DA
:

52 
dVÆue
 *
max_IDAD
/10000.;

55 
I3_TO_DA
:

56 
dVÆue
 *
max_IDAD
/2000.;

59 
I4_TO_DA
:

60 
dVÆue
 *
max_IDAD
/200.;

63 
I5_TO_DA
:

64 
dVÆue
 *
max_IDAD
/20.;

67 
I6_TO_DA
:

72 
AD_TO_LVOLT
:

73 
dVÆue
 *
max_LV
/
max_VDAD
;

76 
AD_TO_HVOLT
:

77 
dVÆue
 *
max_HV
/
max_VDAD
;

80 
AD_TO_I0
:

81 
dVÆue
 *100/
max_IDAD
;

84 
AD_TO_I1
:

85 
dVÆue
 *20./
max_IDAD
;

88 
AD_TO_I2
:

89 
dVÆue
 *10./
max_IDAD
;

92 
AD_TO_I3
:

93 
dVÆue
 *2000./
max_IDAD
;

96 
AD_TO_I4
:

97 
dVÆue
 *200./
max_IDAD
;

100 
AD_TO_I5
:

101 
dVÆue
 *20./
max_IDAD
;

104 
AD_TO_I6
:

108 
vÆue
 = (
T
)(
dVÆue
+0.5);

110  
dVÆue
;

111 
	}
};

113 
DoEvíts
(
DWORD
 
dwMûli£c⁄ds
=0);

114 
Dñay
(
UINT
 
dñaytime
=0, UINT 
unô
=
u£c
);

	@C:\sonji\Bioptro\ACE400Cal_140409\ACE400Cal_140409\MacroMotion.cpp

5 
	~"°dafx.h
"

6 
	~"V43M™uÆTe°.h
"

7 
	~"Ma¸oMŸi⁄.h
"

9 #ifde‡
_DEBUG


10 #unde‡
THIS_FILE


11 
	gTHIS_FILE
[]=
__FILE__
;

12 
	#√w
 
DEBUG_NEW


	)

16 
CMa¸oMŸi⁄
 
	gMM
;

23 
	gCMa¸oMŸi⁄
::
	$CMa¸oMŸi⁄
()

26 
	}
}

28 
CMa¸oMŸi⁄
::~
	$CMa¸oMŸi⁄
()

31 
	}
}

33 
DWORD
 
CMa¸oMŸi⁄
::
	$Së
(
UINT
 
moduÀ_id
, 
vÆue1
, 
vÆue2
, 
vÆue3
)

35 
DWORD
 
ªt
=0;

36 
sSEQ
 
sSeq
;

37 
sSET_VB
 
sSëVb
;

38 
sSET_PULSE
 
sSëPul£
;

39 
sSET_I
 
sSëI
;

40 
sSET_ADC_A
 
sSëAdcA
;

41 
sSET_ADC_B
 
sSëAdcB
;

42 
sSET_VB_HL
 
sSëVbHL
;

43 
sSET_VC_HL
 
sSëVcHL
;

44 
sSET_HVO
 
sSëHVO
;

45 
sSET_FW_GAIN
 
sSëFWGaö
;

46 
sSET_BPOINT
 
sSëBPoöt
;

47 
sSET_CPOINT
 
sSëCPoöt
;

49 
moduÀ_id
)

51 
LV1
:

52 
LV2
:

53 
HV1
:

54 
HV2
:

55 
SPARK
:

56 
sSëVb
.
ty≥
 = 
moduÀ_id
;

57 if(
vÆue1
 >=0Ë
sSëVb
.
da_vÆue
 = value1;

58 
sSëVb
.
	`Inô
();

59 
sSeq
 = 
sSëVb
.sSeq;

62 
PULSE
:

63 if(
vÆue1
 >=0Ë
sSëPul£
.
‰eq
 = value1;

64 if(
vÆue2
 >=0Ë
sSëPul£
.
vﬁt
 = value2;

65 if(
vÆue3
 >=0Ë
sSëPul£
.
ˇv
 = value3;

66 
sSëPul£
.
	`Inô
();

67 
sSeq
 = 
sSëPul£
.sSeq;

70 
I
:

71 if(
vÆue1
 >=0Ë
sSëI
.
da_vÆue
 = value1;

72 if(
vÆue2
 >=0Ë
sSëI
.
ønge
 = value2;

73 
sSëI
.
	`Inô
();

74 
sSeq
 = 
sSëI
.sSeq;

77 
PFFT
:

78 
PSFT
:

79 
VBFT
:

80 
CFFT
:

81 
CSFT
:

82 
sSëAdcA
.
ty≥
 = 
moduÀ_id
;

83 
sSëAdcA
.
	`Inô
();

84 
sSeq
 = 
sSëAdcA
.sSeq;

87 
LVB
:

88 
HVB
:

89 
sSëVbHL
.
ty≥
 = 
vÆue1
;

90 
sSëVbHL
.
	`Inô
();

91 
sSeq
 = 
sSëVbHL
.sSeq;

94 
LVC
:

95 
HVC
:

96 
sSëVcHL
.
ty≥
 = 
moduÀ_id
;

97 
sSëVcHL
.
	`Inô
();

98 
sSeq
 = 
sSëVcHL
.sSeq;

101 
HVO
:

102 if(
vÆue1
 >0Ë
sSëHVO
.
off£t
 = value1;

103 if(
vÆue2
 >0Ë
sSëHVO
.
gaö
 = value2;

104 
sSëHVO
.
	`Inô
();

105 
sSeq
 = 
sSëHVO
.sSeq;

108 
FW_GAIN
:

109 
sSëFWGaö
.
mode
 = 
vÆue1
;

110 
sSëFWGaö
.
	`Inô
();

111 
sSeq
 = 
sSëFWGaö
.sSeq;

114 
VCFFT
:

115 
VCSFT
:

116 
FWFT
:

117 
HVOFT
:

118 
sSëAdcB
.
ty≥
 = 
moduÀ_id
;

119 
sSëAdcB
.
	`Inô
();

120 
sSeq
 = 
sSëAdcB
.sSeq;

123 
BPOINT
:

124 if(
vÆue1
 >=0Ë
sSëBPoöt
.
bpoöt
 = value1;

125 if(
vÆue2
 >=0Ë
sSëBPoöt
.
bTRY
 = value2;

126 
sSëBPoöt
.
	`Inô
();

127 
sSeq
 = 
sSëBPoöt
.sSeq;

130 
CPOINT
:

131 if(
vÆue1
 >=0Ë
sSëCPoöt
.
˝oöt
 = value1;

132 if(
vÆue2
 >=0Ë
sSëCPoöt
.
bTRY
 = value2;

133 
sSëCPoöt
.
	`Inô
();

134 
sSeq
 = 
sSëCPoöt
.sSeq;

139 
	`Tøn˚iveSeq
(&
sSeq
);

141  
ªt
;

142 
	}
}

144 
UINT
 
	gCMa¸oMŸi⁄
::
	$Gë
(
UINT
 
typGë
)

146 if(
ERR
.
	`Gë
(Ë!
NO_ERR
Ë 
FALSE
;

148 
UINT
 
ªt_vÆue
=0;

149 
sGET_VI
 
sGëVI
;

152 
sSEQ
 
sSeq
;

153 
UINT
 
‹dî
=0;

156 
typGë
)

158 
LV1
:

159 
LV2
:

160 
HV1
:

161 
HV2
:

162 
V
:

163 
sGëVI
.
typGë
 = 
V
;

166 
I
:

167 
VI
:

168 
sGëVI
.
typGë
 =ÅypGet;

172 
sGëVI
.
	`Inô
();

173 
sSeq
 = 
sGëVI
.sSeq;

176 
	`Tøn˚iveSeq
(&
sSeq
);

179 
‹dî
 = 
sSeq
.
rcv_°¨t
;

180 
typGë
)

182 
LV1
:

183 
LV2
:

184 
HV1
:

185 
HV2
:

186 
V
:

187 
I
:

188 
ªt_vÆue
 +
sSeq
.
byãBuf
[
‹dî
++];

189 
ªt_vÆue
 +
sSeq
.
byãBuf
[
‹dî
++]<<8;

192 
VI
:

193 
ªt_vÆue
 +
sSeq
.
byãBuf
[
‹dî
++];

194 
ªt_vÆue
 +
sSeq
.
byãBuf
[
‹dî
++]<<8;

195 
ªt_vÆue
 +
sSeq
.
byãBuf
[
‹dî
++]<<16;

196 
ªt_vÆue
 +
sSeq
.
byãBuf
[
‹dî
++]<<24;

200  
ªt_vÆue
;

201 
	}
}

203 
DWORD
 
	gCMa¸oMŸi⁄
::
	$Aµly
(
UINT
 
moduÀ_id
)

205 if(
ERR
.
	`Gë
(Ë!
NO_ERR
Ë 
FALSE
;

207 
sAPPLY
 
sA∂y
;

208 
sA∂y
.
ty≥
 = 
moduÀ_id
;

209 
sA∂y
.
	`Inô
();

211  
	`Tøn˚iveSeq
(&
sA∂y
.
sSeq
);

212 
	}
}

214 
DWORD
 
	gCMa¸oMŸi⁄
::
	$Bªak
(
UINT
 
moduÀ_id
)

216 
sBREAK
 
sBªak
;

217 
sBªak
.
ty≥
 = 
moduÀ_id
;

218 
sBªak
.
	`Inô
();

220  
	`Tøn˚iveSeq
(&
sBªak
.
sSeq
);

221 
	}
}

223 
DWORD
 
	gCMa¸oMŸi⁄
::
	$R°
(
UINT
 
moduÀ_id
, UINT 
vÆue1
, UINT 
vÆue2
)

225 if(
ERR
.
	`Gë
(Ë!
NO_ERR
Ë 
FALSE
;

227 
DWORD
 
ªt
=0;

228 
sSEQ
 
sSeq
;

229 
sRST_BBOX
 
sR°BBox
;

230 
sRST_CBOX
 
sR°CBox
;

231 
sRST_BPOINT
 
sR°BPoöt
;

232 
sRST_CPOINT
 
sR°CPoöt
;

234 
moduÀ_id
)

236 
BBOX
:

237 
sR°BBox
.
bbox
 = 
vÆue1
;

238 
sR°BBox
.
	`Inô
();

239 
sSeq
 = 
sR°BBox
.sSeq;

242 
CBOX
:

243 
sR°CBox
.
cbox
 = 
vÆue1
;

244 
sR°CBox
.
	`Inô
();

245 
sSeq
 = 
sR°CBox
.sSeq;

248 
BPOINT
:

249 
sR°BPoöt
.
bpoöt
 = 
vÆue1
;

250 
sR°BPoöt
.
bTRY
 = 
vÆue2
;

251 
sR°BPoöt
.
	`Inô
();

252 
sSeq
 = 
sR°BPoöt
.sSeq;

255 
CPOINT
:

256 
sR°CPoöt
.
˝oöt
 = 
vÆue1
;

257 
sR°CPoöt
.
bTRY
 = 
vÆue2
;

258 
sR°CPoöt
.
	`Inô
();

259 
sSeq
 = 
sR°CPoöt
.sSeq;

263 
	`Tøn˚iveSeq
(&
sSeq
);

265  
ªt
;

266 
	}
}

268 
	gCMa¸oMŸi⁄
::
	$SëFûãr
(
UINT
 
ã°_ty≥
)

270 
ã°_ty≥
)

272 
LV_OPEN_TEST
:

273 
	`Së
(
CFFT
);

274 
	`Së
(
VCFFT
, 
LVC
);

277 
HV_OPEN_TEST
:

278 
	`Së
(
CFFT
);

279 
	`Së
(
HVOFT
);

282 
SHORT_TEST
:

283 
	`Së
(
CSFT
);

286 
LEAK_TEST
:

287 
	`Së
(
CSFT
);

290 
FOUR_WIRE_TEST
:

291 
	`Së
(
FWFT
);

294 
EMBEDED_TEST
:

299 
	}
}

301 
BOOL
 
	gCMa¸oMŸi⁄
::
	$R°Box
(
±B
, 
±C
)

303 if(
ERR
.
	`Gë
(Ë!
NO_ERR
Ë 
FALSE
;

305 
‹dî
=0;

306 
sSEQ
 
sSeq
;

307 
sRST_BOX
 
sR°Box
;

308 
sR°Box
.
±B
 =ÖtB;

309 
sR°Box
.
±C
 =ÖtC;

310 
sR°Box
.
	`Inô
();

311 
sSeq
 = 
sR°Box
.sSeq;

313  
	`Tøn˚iveSeq
(&
sSeq
);

314 
	}
}

316 
BOOL
 
	gCMa¸oMŸi⁄
::
	$R°BoxAŒ
(
BOOL
 
bBBox
, BOOL 
bCBox
)

318 if(
ERR
.
	`Gë
(Ë!
NO_ERR
Ë 
FALSE
;

320 
‹dî
=0;

321 
sSEQ
 
sSeq
;

322 
sRST_BOXALL
 
sR°BoxAŒ
;

323 
sR°BoxAŒ
.
bBBox
 = bBBox;

324 
sR°BoxAŒ
.
bCBox
 = bCBox;

325 
sR°BoxAŒ
.
	`Inô
();

326 
sSeq
 = 
sR°BoxAŒ
.sSeq;

328  
	`Tøn˚iveSeq
(&
sSeq
);

329 
	}
}

	@C:\sonji\Bioptro\ACE400Cal_140409\ACE400Cal_140409\MacroMotion.h

5 #i‡!
deföed
(
AFX_MACROMOTION_H__EA8A1C4F_12A4_4D1E_9CA4_370F29FA8B41__INCLUDED_
)

6 
	#AFX_MACROMOTION_H__EA8A1C4F_12A4_4D1E_9CA4_370F29FA8B41__INCLUDED_


	)

8 #i‡
_MSC_VER
 > 1000

9 #¥agm®
⁄˚


12 
	~"SeqSåu˘V43.h
"

15 ˛as†
	cCMa¸oMŸi⁄


18 
	mpublic
:

19 
CMa¸oMŸi⁄
();

20 
	mvútuÆ
 ~
CMa¸oMŸi⁄
();

22 
DWORD
 
Së
(
UINT
 
moduÀ_id
, 
vÆue1
=-1, 
vÆue2
=-1, 
vÆue3
=-1);

23 
UINT
 
Gë
(UINT 
typGë
);

24 
DWORD
 
Aµly
(
UINT
 
moduÀ_id
);

25 
DWORD
 
Bªak
(
UINT
 
moduÀ_id
=
ALL_OUT
);

26 
DWORD
 
R°
(
UINT
 
moduÀ_id
, UINT 
vÆue
=0, UINT 
vÆue2
=0);

27 
SëFûãr
(
UINT
 
ã°_ty≥
);

28 
BOOL
 
R°Box
(
±B
, 
±C
);

29 
BOOL
 
R°BoxAŒ
(BOOL 
bBBox
=
TRUE
, BOOL 
bCBox
=TRUE);

32 
CMa¸oMŸi⁄
 
MM
;

	@C:\sonji\Bioptro\ACE400Cal_140409\ACE400Cal_140409\MicroMotion.cpp

5 
	~"°dafx.h
"

6 
	~"V43M™uÆTe°.h
"

7 
	~"Mi¸oMŸi⁄.h
"

9 #ifde‡
_DEBUG


10 #unde‡
THIS_FILE


11 
	gTHIS_FILE
[]=
__FILE__
;

12 
	#√w
 
DEBUG_NEW


	)

16 
HANDLE
 
	gm_hDIODrv
[
CONTEC_BOARD_NUM
];

22 
	gCMi¸oMŸi⁄
::
	$CMi¸oMŸi⁄
()

25 
	}
}

27 
CMi¸oMŸi⁄
::~
	$CMi¸oMŸi⁄
()

30 
	}
}

32 
BOOL
 
	$InôMŸi⁄
()

38 
WORD
 
DrvNo
[
CONTEC_BOARD_NUM
]={ 
CONTEC_BOARD_DRIVER_NO
, CONTEC_BOARD_DRIVER_NO };

39 
WORD
 
GΩNo
[
CONTEC_BOARD_NUM
]={ 1, 2 };

40 
DWORD
 
dwRë
=
NO_ERR
;

41 
i
=0; i<
CONTEC_BOARD_NUM
; i++)

46  
FALSE
;

51 
sBREAK
 
sBªak
;

52 
sBªak
.
ty≥
 = 
ALL_OUT
;

53 
sBªak
.
	`Inô
();

54 
	`Tøn˚iveSeq
(&
sBªak
.
sSeq
);

56  
TRUE
;

57 
	}
}

59 
	$Clo£MŸi⁄
()

62 
	}
}

64 
	$On
(
WORD
 
wBôNo
)

66 if(
wBôNo
<
OUTPUT_START
 || wBôNo>OUTPUT_START+
TOTAL_OUTPUT_NUM
) ;

68 
DWORD
 
dwRë
=
NO_ERR
;

69 
HANDLE
 
hDrv
=
m_hDIODrv
[1];

76 
	}
}

78 
	$Off
(
WORD
 
wBôNo
)

80 if(
wBôNo
<
OUTPUT_START
 || wBôNo>OUTPUT_START+
TOTAL_OUTPUT_NUM
) ;

82 
DWORD
 
dwRë
=
NO_ERR
;

83 
HANDLE
 
hDrv
=
m_hDIODrv
[1];

91 
	}
}

93 
BOOL
 
	$IsOn
(
WORD
 
wBôNo
)

95 if(
wBôNo
<
INPUT_START
 || wBôNo>INPUT_START+
TOTAL_INPUT_NUM
Ë 
FALSE
;

97 
DWORD
 
dwRë
=
NO_ERR
;

98 
HANDLE
 
hDrv
=
m_hDIODrv
[0];

99 
BYTE
 
I≈Buf
='0';

104  
FALSE
;

107 if(
°©ic_ˇ°
<>(
I≈Buf
Ë=0Ë 
FALSE
;

109  
TRUE
;

110 
	}
}

112 
BOOL
 
	$IsOff
(
WORD
 
wBôNo
)

114 if(
wBôNo
<
INPUT_START
 || wBôNo>INPUT_START+
TOTAL_INPUT_NUM
Ë 
FALSE
;

116 
DWORD
 
dwRë
=
NO_ERR
;

117 
HANDLE
 
hDrv
=
m_hDIODrv
[0];

118 
BYTE
 
I≈Buf
='0';

123  
FALSE
;

126 if(
°©ic_ˇ°
<>(
I≈Buf
Ë=1Ë 
FALSE
;

128  
TRUE
;

129 
	}
}

131 
BOOL
 
	$Tøn˚iveSeq
(
psSEQ
 
psSeq
)

134 
UINT
 
‹dî
=0, 
ªt
=0, 
mask_cou¡
=0, 
i
=0;

135 
DWORD
 
dwRë
=
NO_ERR
;

137 
WORD
 
BôNo
[128];

138 
BYTE
 
Buf
[128];

139 
WORD
 
BôNum
=0;

141 
	`ZîoMem‹y
(
BôNo
, (
WORD
)*((BitNo)/(WORD)));

142 
	`ZîoMem‹y
(
Buf
, (
BYTE
)*((Buf)/(BYTE)));

144 
‹dî
<
MAX_ORDER_NUM
)

146 
psSeq
->
cmd
[
‹dî
])

148 
ENDCMD
:

150  
TRUE
;

153 
BIT_TRS
:

159 
°rög
[10];

160 
	`ôﬂ
(
dwRë
, 
°rög
, 10);

161 
ERR
.
	`Së
(
INVALID_RETURN_DIOOUTBIT
, 
°rög
);

162  
FALSE
;

166 
BYTE_TRS
:

170 
°rög
[10];

171 
	`ôﬂ
(
dwRë
, 
°rög
, 10);

172 
ERR
.
	`Së
(
INVALID_RETURN_DIOOUTBYTE
, 
°rög
);

173  
FALSE
;

178 
MBIT_TRS
:

181 
	`ZîoMem‹y
(
BôNo
, (
WORD
)*((BitNo)/(WORD)));

182 
	`ZîoMem‹y
(
Buf
, (
BYTE
)*((Buf)/(BYTE)));

183 
BôNum
=0, 
mask_cou¡
=0;

185 
i
=0; i<
TOTAL_OUTPUT_NUM
; i++)

187 if(
psSeq
->
mbôBuf
[
‹dî
][
i
] != -1)

189 
BôNo
[
BôNum
] = 
i
;

190 
Buf
[
BôNum
] = 
psSeq
->
mbôBuf
[
‹dî
][
i
];

191 
BôNum
++;

193 
mask_cou¡
++;

197 if(
mask_cou¡
 < 
TOTAL_OUTPUT_NUM
)

200 
HANDLE
 
hDrv
=
m_hDIODrv
[1];

209 
°rög
[10];

210 
	`ôﬂ
(
dwRë
, 
°rög
, 10);

212  
FALSE
;

219 
BIT_RCV
:

223 
°rög
[10];

224 
	`ôﬂ
(
dwRë
, 
°rög
, 10);

225 
ERR
.
	`Së
(
INVALID_RETURN_DIOINPBIT
, 
°rög
);

226  
FALSE
;

230 
BYTE_RCV
:

234 
°rög
[10];

235 
	`ôﬂ
(
dwRë
, 
°rög
, 10);

236 
ERR
.
	`Së
(
INVALID_RETURN_DIOINPBYTE
, 
°rög
);

237  
FALSE
;

241 
MBIT_RCV
:

244 
	`ZîoMem‹y
(
BôNo
, (
WORD
)*((BitNo)/(WORD)));

245 
	`ZîoMem‹y
(
Buf
, (
BYTE
)*((Buf)/(BYTE)));

246 
BôNum
=0, 
mask_cou¡
 = 0;

248 
i
=0; i<
TOTAL_INPUT_NUM
; i++)

250 if(
psSeq
->
mbôBuf
[
‹dî
][
i
] != -1)

252 
BôNo
[
BôNum
] = 
i
;

254 
BôNum
++;

256 
mask_cou¡
++;

260 if(
mask_cou¡
 < 
TOTAL_INPUT_NUM
)

263 
HANDLE
 
hDrv
=
m_hDIODrv
[0];

272 
°rög
[10];

273 
	`ôﬂ
(
dwRë
, 
°rög
, 10);

275  
FALSE
;

283 
DLY
:

285 if(
psSeq
->
byãBuf
[
‹dî
] != 0)

287 if(
psSeq
->
P‹tNo
[
‹dî
] =
£c
Ë
	`Dñay
’sSeq->
byãBuf
[order], sec);

288 if(
psSeq
->
P‹tNo
[
‹dî
] =
m£c
Ë
	`Dñay
’sSeq->
byãBuf
[order], msec);

289 if(
psSeq
->
P‹tNo
[
‹dî
] =
u£c
Ë
	`Dñay
’sSeq->
byãBuf
[order], usec);

295 
‹dî
++;

298  
TRUE
;

299 
	}
}

	@C:\sonji\Bioptro\ACE400Cal_140409\ACE400Cal_140409\MicroMotion.h

5 #i‡!
deföed
(
AFX_MICROMOTION_H__BABAC453_C627_42E1_993B_D6AF7B1B15BA__INCLUDED_
)

6 
	#AFX_MICROMOTION_H__BABAC453_C627_42E1_993B_D6AF7B1B15BA__INCLUDED_


	)

8 #i‡
_MSC_VER
 > 1000

9 #¥agm®
⁄˚


13 ˛as†
	cCMi¸oMŸi⁄


15 
	mpublic
:

16 
CMi¸oMŸi⁄
();

17 
	mvútuÆ
 ~
CMi¸oMŸi⁄
();

21 
	#INPUT_START
 1000

	)

22 
	#OUTPUT_START
 2000

	)

23 
	#CONTEC_BOARD_NUM
 2

	)

24 
	#CONTEC_BOARD_DRIVER_NO
 2

	)

25 
	#TOTAL_INPUT_NUM
 64

	)

26 
	#TOTAL_OUTPUT_NUM
 128

	)

27 
	#MAX_ORDER_NUM
 20

	)

28 
	#UNKNOWN
 -1

	)

30 
	eSEQ_CMD
 { 
	mENDCMD
, 
	mBIT_TRS
, 
	mBYTE_TRS
, 
	mMBIT_TRS
, 
	mMBYTE_TRS
, 
	mBIT_RCV
, 
	mBYTE_RCV
, 
	mMBIT_RCV
, 
	mMBYTE_RCV
, 
	mDLY
 };

31 
	eTEST_TYPE
 { 
	mLV_OPEN_TEST
, 
	mHV_OPEN_TEST
, 
	mSHORT_TEST
, 
	mLEAK_TEST
, 
	mFOUR_WIRE_TEST
, 
	mEMBEDED_TEST
 };

32 
	eMODULE_TYPE
 { 
	mLV1
, 
	mLV2
, 
	mHV1
, 
	mHV2
, 
	mPULSE
, 
	mVB_OUT
, 
	mSPARK
, 
	mV
, 
	mI
, 
	mVI
, 
	mPFFT
, 
	mPSFT
, 
	mVBFT
, 
	mCFFT
, 
	mCSFT
, 
	mCAV
, 
	mLVB
, 
	mHVB
, 
	mLVC
, 
	mHVC
, 
	mHVO
, 
	mFW_GAIN
, 
	mVCFFT
, 
	mVCSFT
, 
	mFWFT
, 
	mHVOFT
, 
	mBBOX
, 
	mCBOX
, 
	mBPOINT
, 
	mCPOINT
 };

33 
	eBOX_ID
 { 
	mBOX_ALL
, 
	mBOX_A
, 
	mBOX_B
, 
	mBOX_C
, 
	mBOX_D
, 
	mBOX_E
, 
	mBOX_F
, 
	mBOX_G
, 
	mBOX_H
 };

34 
	eBREAK_TYPE
 { 
	mALL_OUT
, 
	mVB_ONLY
 };

35 
	eGATE_TYPE
 { 
	mTR
, 
	mRY
 };

36 
	eSET_POINT
 { 
	mPT_B
, 
	mPT_C
 };

37 
	eI_RANGE
 { 
	mI_RANGE_INIT
, 
	mI_RANGE0
, 
	mI_RANGE1
, 
	mI_RANGE2
, 
	mI_RANGE3
, 
	mI_RANGE4
, 
	mI_RANGE5
, 
	mI_RANGE6
 };

39 
	ssSEQ


41 
UINT
 
	mcmd
[
MAX_ORDER_NUM
];

42 
WORD
 
	mBôNo
[
MAX_ORDER_NUM
];

43 
WORD
 
	mP‹tNo
[
MAX_ORDER_NUM
];

44 
BYTE
 
	mbyãBuf
[
MAX_ORDER_NUM
];

45 
	mmbôBuf
[
MAX_ORDER_NUM
][
TOTAL_OUTPUT_NUM
];

46 
UINT
 
	mrcv_°¨t
;

48 
sSEQ
()

50 
ZîoMem‹y
(
cmd
, (
UINT
)*((cmd)/(UINT)));

51 
ZîoMem‹y
(
BôNo
, (
WORD
)*((BitNo)/(WORD)));

52 
ZîoMem‹y
(
P‹tNo
, (
WORD
)*((PortNo)/(WORD)));

53 
ZîoMem‹y
(
byãBuf
, (
BYTE
)*((byteBuf)/(BYTE)));

54 
FûlMem‹y
(
mbôBuf
, ()*((mbitBuf)/()), -1);

55 
	mrcv_°¨t
 = 0;

57 
Inô
()

59 
ZîoMem‹y
(
cmd
, (
UINT
)*((cmd)/(UINT)));

60 
ZîoMem‹y
(
BôNo
, (
WORD
)*((BitNo)/(WORD)));

61 
ZîoMem‹y
(
P‹tNo
, (
WORD
)*((PortNo)/(WORD)));

62 
ZîoMem‹y
(
byãBuf
, (
BYTE
)*((byteBuf)/(BYTE)));

63 
FûlMem‹y
(
mbôBuf
, ()*((mbitBuf)/()), -1);

64 
	mrcv_°¨t
 = 0;

67 } 
	tsSEQ
, *
	tpsSEQ
;

69 
HANDLE
 
m_hDIODrv
[
CONTEC_BOARD_NUM
];

71 
BOOL
 
InôMŸi⁄
();

72 
On
(
WORD
 
wBôNo
);

73 
Off
(
WORD
 
wBôNo
);

74 
BOOL
 
IsOn
(
WORD
 
wBôNo
);

75 
BOOL
 
IsOff
(
WORD
 
wBôNo
);

76 
BOOL
 
Tøn˚iveSeq
(
psSEQ
 
psSeq
);

	@C:\sonji\Bioptro\ACE400Cal_140409\ACE400Cal_140409\SeqStructV43.h

2 
	~"Mi¸oMŸi⁄.h
"

5 
	#TOTAL_DA_BIT_NUM
 12

6 
	#TOTAL_AD_BIT_NUM
 32

7 

	)

8 
	eDIGITAL_INPUT


10 
	mADC_A_D0
 = 
INPUT_START
+0,

11 
	mADC_A_D1
,

12 
	mADC_A_D2
,

13 
	mADC_A_D3
,

14 
	mADC_A_D4
,

15 
	mADC_A_D5
,

16 
	mADC_A_D6
,

17 
	mADC_A_D7
,

18 
	mADC_A_D8
,

19 
	mADC_A_D9
,

20 
	mADC_A_D10
,

21 
	mADC_A_D11
,

22 
	mADC_A_D12
,

23 
	mADC_A_D13
,

24 
	mADC_A_D14
,

25 
	mADC_A_D15
,

26 
	mADC_B_D0
,

27 
	mADC_B_D1
,

28 
	mADC_B_D2
,

29 
	mADC_B_D3
,

30 
	mADC_B_D4
,

31 
	mADC_B_D5
,

32 
	mADC_B_D6
,

33 
	mADC_B_D7
,

34 
	mADC_B_D8
,

35 
	mADC_B_D9
,

36 
	mADC_B_D10
,

37 
	mADC_B_D11
,

38 
	mADC_B_D12
,

39 
	mADC_B_D13
,

40 
	mADC_B_D14
,

41 
	mADC_B_D15
,

42 
	mDT12V
 = 
INPUT_START
+32,

43 
	mDT5V
,

44 
	mDT24V
,

45 
	mDTHV
,

49 
	mSPARK_ON
 = 
INPUT_START
+39,

58 
	mDT5VC_D
 = 
INPUT_START
+48,

59 
	mDT5VB_D
,

60 
	mDT5VC_C
,

61 
	mDT5VB_C
,

62 
	mDT5VC_B
,

63 
	mDT5VB_B
,

64 
	mDT5VC_A
,

65 
	mDT5VB_A
,

66 
	mPB_A0
,

67 
	mPB_A1
,

68 
	mBOX_A0
,

69 
	mBOX_A1
,

76 
	eDIGITAL_OUTPUT


78 
	mDA0
 = 
OUTPUT_START
+0,

79 
	mDA1
,

80 
	mDA2
,

81 
	mDA3
,

82 
	mDA4
,

83 
	mDA5
,

84 
	mDA6
,

85 
	mDA7
,

86 
	mDA8
,

87 
	mDA9
,

88 
	mDA10
,

89 
	mDA11
,

90 
	mSPARK_SET_CE
,

91 
	m_SPARK_SET_CLR
,

92 
	m_SPARK_RST
,

93 
	mI_GAIN_MODE_CMD
,

94 
	mI_SET_CE
,

95 
	m_I_SET_CLR
,

96 
	mLV_SET_CE_0
,

97 
	m_LV_SET_CLR_0
,

98 
	mHV_SET_CE_0
,

99 
	m_HV_SET_CLR_0
,

100 
	mLV_SET_CE_1
,

101 
	m_LV_SET_CLR_1
,

102 
	mHV_SET_CE_1
,

103 
	m_HV_SET_CLR_1
,

104 
	mGPIO0
,

105 
	mGPIO1
,

106 
	mGPIO2
,

107 
	mGPIO3
,

108 
	mGPIO4
,

109 
	mGPIO5
,

110 
	mFWIRE_SELF_VB
,

111 
	mFWIRE_SELF_VC
,

112 
	mVB_AC_MODE
,

114 
	mCC_CV_MODE
 = 
OUTPUT_START
+36,

115 
	mRNG_SET_2
,

116 
	mRNG_SET_1
,

117 
	mRNG_SET_0
,

122 
	mGPIO6
 = 
OUTPUT_START
+44,

123 
	mDC_RELAY_OUT
,

124 
	mVB_OUT_CHK
,

125 
	mBASE_I_LIMIT_CMD
,

126 
	mVB_RY_OUT_A2
,

127 
	mVB_RY_OUT_A1
,

128 
	mVB_RY_OUT_A0
,

130 
	mADC_B_CH_A1
 = 
OUTPUT_START
+52,

131 
	mADC_B_CH_A0
,

132 
	mADC_A_CH_A1
,

133 
	mADC_A_CH_A0
,

134 
	mVC_GUARD_SEL
,

135 
	mVC_GUARD_ON
,

136 
	mVB_GUARD_SEL
,

137 
	mVB_GUARD_ON
,

138 
	mPIN_SEARCH
,

139 
	m_AD_CONVST
,

141 
	mHVGB_DISCHARGE
 = 
OUTPUT_START
+63,

142 
	mVB_PIN_A0
,

143 
	mVB_PIN_A1
,

144 
	mVB_PIN_A2
,

145 
	mVB_PIN_A3
,

146 
	mVB_PIN_A4
,

147 
	mVB_PIN_A5
,

148 
	mVB_CPLD_A0
,

149 
	mVB_CPLD_A1
,

150 
	mVB_CPLD_A2
,

151 
	mVB_CPLD_A3
,

152 
	m_VB_PIN_SEL
,

154 
	mVB_CARD_A0
 = 
OUTPUT_START
+76,

155 
	mVB_CARD_A1
,

156 
	mVB_CARD_A2
,

157 
	mVB_CARD_A3
,

158 
	mVC_PIN_A0
,

159 
	mVC_PIN_A1
,

160 
	mVC_PIN_A2
,

161 
	mVC_PIN_A3
,

162 
	mVC_PIN_A4
,

163 
	mVC_PIN_A5
,

164 
	mVC_CPLD_A0
,

165 
	mVC_CPLD_A1
,

166 
	mVC_CPLD_A2
,

167 
	mVC_CPLD_A3
,

168 
	m_VC_PIN_SEL
,

170 
	mVC_CARD_A0
 = 
OUTPUT_START
+92,

171 
	mVC_CARD_A1
,

172 
	mVC_CARD_A2
,

173 
	mVC_CARD_A3
,

174 
	mVB_ENA_A_A0
,

175 
	mVB_ENA_A_A1
,

176 
	mVB_ENA_B_A0
,

177 
	mVB_ENA_B_A1
,

178 
	mVB_ENA_C_A0
,

179 
	mVB_ENA_C_A1
,

180 
	mVB_ENA_D_A0
,

181 
	mVB_ENA_D_A1
,

182 
	mVC_ENA_A_A0
,

183 
	mVC_ENA_A_A1
,

184 
	mVC_ENA_B_A0
,

185 
	mVC_ENA_B_A1
,

186 
	mVC_ENA_C_A0
,

187 
	mVC_ENA_C_A1
,

188 
	mVC_ENA_D_A0
,

189 
	mVC_ENA_D_A1
,

190 
	m_BOX_A_VB_RST
,

191 
	m_BOX_B_VB_RST
,

192 
	m_BOX_C_VB_RST
,

193 
	m_BOX_D_VB_RST
,

194 
	m_BOX_A_VC_RST
,

195 
	m_BOX_B_VC_RST
,

196 
	m_BOX_C_VC_RST
,

197 
	m_BOX_D_VC_RST
,

198 
	mBOX_VB_ENA_A
,

199 
	mBOX_VB_ENA_B
,

200 
	mBOX_VB_ENA_C
,

201 
	mBOX_VB_ENA_D
,

202 
	mBOX_VC_ENA_A
,

203 
	mBOX_VC_ENA_B
,

204 
	mBOX_VC_ENA_C
,

205 
	mBOX_VC_ENA_D
,

209 
	ssSET_VB


211 
	mty≥
, 
	mda_vÆue
;

212 
sSEQ
 
	msSeq
;

214 
sSET_VB
()

216 
	mty≥
=
LV1
;

217 
	mda_vÆue
 = 0;

218 
	msSeq
.
Inô
();

221 
Inô
()

223 
	m˛r
=0, 
	m˚
=0, 
	m‹dî
=0;

224 
	msSeq
.
Inô
();

226 
	mty≥
)

229 
LV1
:

230 
˛r
 = 
_LV_SET_CLR_0
-
OUTPUT_START
;

231 
	m˚
 = 
LV_SET_CE_0
-
OUTPUT_START
;

234 
	mLV2
:

235 
˛r
 = 
_LV_SET_CLR_1
-
OUTPUT_START
;

236 
	m˚
 = 
LV_SET_CE_1
-
OUTPUT_START
;

239 
	mHV1
:

240 
˛r
 = 
_HV_SET_CLR_0
-
OUTPUT_START
;

241 
	m˚
 = 
HV_SET_CE_0
-
OUTPUT_START
;

244 
	mHV2
:

245 
˛r
 = 
_HV_SET_CLR_1
-
OUTPUT_START
;

246 
	m˚
 = 
HV_SET_CE_1
-
OUTPUT_START
;

249 
	mSPARK
:

250 
˛r
 = 
_SPARK_SET_CLR
-
OUTPUT_START
;

251 
	m˚
 = 
SPARK_SET_CE
-
OUTPUT_START
;

256 
	msSeq
.
	mcmd
[
‹dî
] = 
MBIT_TRS
;

257 
	msSeq
.
	mmbôBuf
[
‹dî
][
˛r
] = 0;

258 
	msSeq
.
	mmbôBuf
[
‹dî
][
˚
] = 0;

259 
	m‹dî
++;

262 
	msSeq
.
	mcmd
[
‹dî
] = 
DLY
;

263 
	msSeq
.
	mP‹tNo
[
‹dî
] = 
u£c
;

264 
	msSeq
.
	mbyãBuf
[
‹dî
] = 200;

265 
	m‹dî
++;

268 
	msSeq
.
	mcmd
[
‹dî
] = 
BIT_TRS
;

269 
	msSeq
.
	mbyãBuf
[
‹dî
] = 1;

270 
	msSeq
.
	mBôNo
[
‹dî
] = 
˛r
;

271 
	m‹dî
++;

274 
	msSeq
.
	mcmd
[
‹dî
] = 
MBIT_TRS
;

275 
	mi
=0; i<
	mTOTAL_DA_BIT_NUM
; i++Ë
	msSeq
.
	mmbôBuf
[
‹dî
][
DA0
-
OUTPUT_START
+
i
] = (
da_vÆue
>>i) & 1;

276 
	m‹dî
++;

279 
	msSeq
.
	mcmd
[
‹dî
] = 
BIT_TRS
;

280 
	msSeq
.
	mbyãBuf
[
‹dî
] = 1;

281 
	msSeq
.
	mBôNo
[
‹dî
] = 
˚
;

282 
	m‹dî
++;

285 } 
	tsSET_VB
;

287 
	ssSET_PULSE


289 
	m‰eq
, 
	mvﬁt
, 
	mˇv
;

290 
sSEQ
 
	msSeq
;

292 
sSET_PULSE
()

294 
	m‰eq
=
vﬁt
=
ˇv
=-1;

295 
	msSeq
.
Inô
();

298 
Inô
()

300 
	m‹dî
=0;

301 
	msSeq
.
Inô
();

304 
	msSeq
.
	mcmd
[
‹dî
] = 
MBIT_TRS
;

305 
	m‰eq
)

308 
sSeq
.
mbôBuf
[
‹dî
][
GPIO1
-
OUTPUT_START
] = 0;

309 
	msSeq
.
	mmbôBuf
[
‹dî
][
GPIO0
-
OUTPUT_START
] = 0;

313 
sSeq
.
mbôBuf
[
‹dî
][
GPIO1
-
OUTPUT_START
] = 0;

314 
	msSeq
.
	mmbôBuf
[
‹dî
][
GPIO0
-
OUTPUT_START
] = 1;

318 
sSeq
.
mbôBuf
[
‹dî
][
GPIO1
-
OUTPUT_START
] = 1;

319 
	msSeq
.
	mmbôBuf
[
‹dî
][
GPIO0
-
OUTPUT_START
] = 0;

323 
sSeq
.
mbôBuf
[
‹dî
][
GPIO1
-
OUTPUT_START
] = 1;

324 
	msSeq
.
	mmbôBuf
[
‹dî
][
GPIO0
-
OUTPUT_START
] = 1;

328 
	mvﬁt
)

331 
sSeq
.
mbôBuf
[
‹dî
][
GPIO3
-
OUTPUT_START
] = 0;

332 
	msSeq
.
	mmbôBuf
[
‹dî
][
GPIO2
-
OUTPUT_START
] = 0;

336 
sSeq
.
mbôBuf
[
‹dî
][
GPIO3
-
OUTPUT_START
] = 0;

337 
	msSeq
.
	mmbôBuf
[
‹dî
][
GPIO2
-
OUTPUT_START
] = 1;

341 
sSeq
.
mbôBuf
[
‹dî
][
GPIO3
-
OUTPUT_START
] = 1;

342 
	msSeq
.
	mmbôBuf
[
‹dî
][
GPIO2
-
OUTPUT_START
] = 0;

346 
sSeq
.
mbôBuf
[
‹dî
][
GPIO3
-
OUTPUT_START
] = 1;

347 
	msSeq
.
	mmbôBuf
[
‹dî
][
GPIO2
-
OUTPUT_START
] = 1;

351 
	mˇv
)

354 
sSeq
.
mbôBuf
[
‹dî
][
ADC_A_CH_A1
-
OUTPUT_START
] = 0;

355 
	msSeq
.
	mmbôBuf
[
‹dî
][
ADC_A_CH_A0
-
OUTPUT_START
] = 0;

356 
	msSeq
.
	mmbôBuf
[
‹dî
][
GPIO5
-
OUTPUT_START
] = 0;

357 
	msSeq
.
	mmbôBuf
[
‹dî
][
GPIO4
-
OUTPUT_START
] = 0;

361 
sSeq
.
mbôBuf
[
‹dî
][
ADC_A_CH_A1
-
OUTPUT_START
] = 0;

362 
	msSeq
.
	mmbôBuf
[
‹dî
][
ADC_A_CH_A0
-
OUTPUT_START
] = 0;

363 
	msSeq
.
	mmbôBuf
[
‹dî
][
GPIO5
-
OUTPUT_START
] = 0;

364 
	msSeq
.
	mmbôBuf
[
‹dî
][
GPIO4
-
OUTPUT_START
] = 1;

368 
sSeq
.
mbôBuf
[
‹dî
][
ADC_A_CH_A1
-
OUTPUT_START
] = 0;

369 
	msSeq
.
	mmbôBuf
[
‹dî
][
ADC_A_CH_A0
-
OUTPUT_START
] = 0;

370 
	msSeq
.
	mmbôBuf
[
‹dî
][
GPIO5
-
OUTPUT_START
] = 1;

371 
	msSeq
.
	mmbôBuf
[
‹dî
][
GPIO4
-
OUTPUT_START
] = 0;

375 
sSeq
.
mbôBuf
[
‹dî
][
ADC_A_CH_A1
-
OUTPUT_START
] = 0;

376 
	msSeq
.
	mmbôBuf
[
‹dî
][
ADC_A_CH_A0
-
OUTPUT_START
] = 0;

377 
	msSeq
.
	mmbôBuf
[
‹dî
][
GPIO5
-
OUTPUT_START
] = 1;

378 
	msSeq
.
	mmbôBuf
[
‹dî
][
GPIO4
-
OUTPUT_START
] = 1;

381 
	m‹dî
++;

384 } 
	tsSET_PULSE
;

386 
	ssSET_I


388 
	mda_vÆue
, 
	mønge
;

389 
sSEQ
 
	msSeq
;

391 
sSET_I
()

393 
	mønge
 = 
da_vÆue
 = -1;

394 
	msSeq
.
Inô
();

397 
Inô
()

399 
	m‹dî
=0;

400 
	msSeq
.
Inô
();

403 if(
	mda_vÆue
 >= 0)

405 
sSeq
.
cmd
[
‹dî
] = 
MBIT_TRS
;

406 
	msSeq
.
	mmbôBuf
[
‹dî
][
_I_SET_CLR
-
OUTPUT_START
] = 1;

407 
	msSeq
.
	mmbôBuf
[
‹dî
][
I_SET_CE
-
OUTPUT_START
] = 0;

408 
	m‹dî
++;

412 
	msSeq
.
	mcmd
[
‹dî
] = 
MBIT_TRS
;

413 if(
	mønge
 >= 0)

415 
sSeq
.
mbôBuf
[
‹dî
][
RNG_SET_0
-
OUTPUT_START
] = (
ønge
 & 0x01)>>0;

416 
	msSeq
.
	mmbôBuf
[
‹dî
][
RNG_SET_1
-
OUTPUT_START
] = (
ønge
 & 0x02)>>1;

417 
	msSeq
.
	mmbôBuf
[
‹dî
][
RNG_SET_2
-
OUTPUT_START
] = (
ønge
 & 0x04)>>2;

420 if(
	mda_vÆue
 >= 0)

422 
i
=0; 
	mi
<
	mTOTAL_DA_BIT_NUM
; i++Ë
	msSeq
.
	mmbôBuf
[
‹dî
][
DA0
-
OUTPUT_START
+i] = (
da_vÆue
>>i) & 1;

424 
	m‹dî
++;

427 if(
	mda_vÆue
 >= 0)

429 
sSeq
.
cmd
[
‹dî
] = 
DLY
;

430 
	msSeq
.
	mP‹tNo
[
‹dî
] = 
u£c
;

431 
	msSeq
.
	mbyãBuf
[
‹dî
] = 200;

432 
	m‹dî
++;

435 
	msSeq
.
	mcmd
[
‹dî
] = 
BIT_TRS
;

436 
	msSeq
.
	mBôNo
[
‹dî
] = 
I_SET_CE
-
OUTPUT_START
;

437 
	msSeq
.
	mbyãBuf
[
‹dî
] = 1;

438 
	m‹dî
++;

442 } 
	tsSET_I
;

444 
	ssSET_VB_HL


446 
	mty≥
;

447 
sSEQ
 
	msSeq
;

449 
sSET_VB_HL
()

451 
	mty≥
 = 0;

452 
	msSeq
.
Inô
();

455 
Inô
()

457 
	m‹dî
=0;

458 
	msSeq
.
Inô
();

461 
	msSeq
.
	mcmd
[
‹dî
] = 
MBIT_TRS
;

462 
	msSeq
.
	mmbôBuf
[
‹dî
][
VB_OUT_CHK
-
OUTPUT_START
] = 0;

463 
	msSeq
.
	mmbôBuf
[
‹dî
][
ADC_A_CH_A1
-
OUTPUT_START
] = 0;

464 
	msSeq
.
	mmbôBuf
[
‹dî
][
ADC_A_CH_A0
-
OUTPUT_START
] = 1;

465 
	mty≥
)

467 
	mLV1
:

468 
sSeq
.
mbôBuf
[
‹dî
][
GPIO6
-
OUTPUT_START
] = 0;

469 
	msSeq
.
	mmbôBuf
[
‹dî
][
GPIO5
-
OUTPUT_START
] = 0;

472 
	mLV2
:

473 
sSeq
.
mbôBuf
[
‹dî
][
GPIO6
-
OUTPUT_START
] = 0;

474 
	msSeq
.
	mmbôBuf
[
‹dî
][
GPIO5
-
OUTPUT_START
] = 1;

477 
	mHV1
:

478 
sSeq
.
mbôBuf
[
‹dî
][
GPIO6
-
OUTPUT_START
] = 1;

479 
	msSeq
.
	mmbôBuf
[
‹dî
][
GPIO4
-
OUTPUT_START
] = 0;

482 
	mHV2
:

483 
sSeq
.
mbôBuf
[
‹dî
][
GPIO6
-
OUTPUT_START
] = 1;

484 
	msSeq
.
	mmbôBuf
[
‹dî
][
GPIO4
-
OUTPUT_START
] = 1;

487 
	m‹dî
++;

490 } 
	tsSET_VB_HL
;

492 
	ssSET_ADC_A


494 
	mty≥
;

495 
sSEQ
 
	msSeq
;

497 
sSET_ADC_A
()

499 
	mty≥
 = 0;

500 
	msSeq
.
Inô
();

503 
Inô
()

505 
	m‹dî
=0;

506 
	msSeq
.
Inô
();

509 
	msSeq
.
	mcmd
[
‹dî
] = 
MBIT_TRS
;

510 
	mty≥
)

512 
	mPFFT
:

513 
sSeq
.
mbôBuf
[
‹dî
][
ADC_A_CH_A1
-
OUTPUT_START
] = 0;

514 
	msSeq
.
	mmbôBuf
[
‹dî
][
ADC_A_CH_A0
-
OUTPUT_START
] = 0;

515 
	msSeq
.
	mmbôBuf
[
‹dî
][
GPIO6
-
OUTPUT_START
] = 0;

518 
	mPSFT
:

519 
sSeq
.
mbôBuf
[
‹dî
][
ADC_A_CH_A1
-
OUTPUT_START
] = 0;

520 
	msSeq
.
	mmbôBuf
[
‹dî
][
ADC_A_CH_A0
-
OUTPUT_START
] = 0;

521 
	msSeq
.
	mmbôBuf
[
‹dî
][
GPIO6
-
OUTPUT_START
] = 1;

524 
	mVBFT
:

525 
sSeq
.
mbôBuf
[
‹dî
][
ADC_A_CH_A1
-
OUTPUT_START
] = 0;

526 
	msSeq
.
	mmbôBuf
[
‹dî
][
ADC_A_CH_A0
-
OUTPUT_START
] = 1;

529 
	mCFFT
:

530 
sSeq
.
mbôBuf
[
‹dî
][
ADC_A_CH_A1
-
OUTPUT_START
] = 1;

531 
	msSeq
.
	mmbôBuf
[
‹dî
][
ADC_A_CH_A0
-
OUTPUT_START
] = 0;

534 
	mCSFT
:

535 
sSeq
.
mbôBuf
[
‹dî
][
ADC_A_CH_A1
-
OUTPUT_START
] = 1;

536 
	msSeq
.
	mmbôBuf
[
‹dî
][
ADC_A_CH_A0
-
OUTPUT_START
] = 1;

539 
	m‹dî
++;

542 } 
	tsSET_ADC_A
;

544 
	ssSET_VC_HL


546 
	mty≥
;

547 
sSEQ
 
	msSeq
;

549 
sSET_VC_HL
()

551 
	mty≥
 = 0;

552 
	msSeq
.
Inô
();

555 
Inô
()

557 
	m‹dî
=0;

558 
	msSeq
.
Inô
();

561 
	msSeq
.
	mcmd
[
‹dî
] = 
MBIT_TRS
;

562 
	msSeq
.
	mmbôBuf
[
‹dî
][
ADC_B_CH_A1
-
OUTPUT_START
] = 0;

563 
	msSeq
.
	mmbôBuf
[
‹dî
][
ADC_B_CH_A0
-
OUTPUT_START
] = 0;

564 
	mty≥
)

566 
	mHVC
:

567 
sSeq
.
mbôBuf
[
‹dî
][
GPIO0
-
OUTPUT_START
] = 1;

568 
	msSeq
.
	mmbôBuf
[
‹dî
][
GPIO1
-
OUTPUT_START
] = 0;

569 
	msSeq
.
	mmbôBuf
[
‹dî
][
GPIO2
-
OUTPUT_START
] = 0;

572 
	mLVC
:

573 
sSeq
.
mbôBuf
[
‹dî
][
GPIO0
-
OUTPUT_START
] = 0;

574 
	msSeq
.
	mmbôBuf
[
‹dî
][
GPIO1
-
OUTPUT_START
] = 1;

575 
	msSeq
.
	mmbôBuf
[
‹dî
][
GPIO2
-
OUTPUT_START
] = 1;

578 
	m‹dî
++;

581 } 
	tsSET_VC_HL
;

583 
	ssSET_HVO


585 
	moff£t
, 
	mgaö
;

586 
sSEQ
 
	msSeq
;

588 
sSET_HVO
()

590 
	moff£t
 = 
gaö
 = -1;

591 
	msSeq
.
Inô
();

594 
Inô
()

596 
	m‹dî
=0;

597 
	msSeq
.
Inô
();

599 if(
	moff£t
 >0 || 
gaö
 >= 0)

602 
sSeq
.
cmd
[
‹dî
] = 
MBIT_TRS
;

603 
	msSeq
.
	mmbôBuf
[
‹dî
][
ADC_B_CH_A1
-
OUTPUT_START
] = 1;

604 
	msSeq
.
	mmbôBuf
[
‹dî
][
ADC_B_CH_A0
-
OUTPUT_START
] = 0;

606 if(
	moff£t
 >= 0)

608 
sSeq
.
mbôBuf
[
‹dî
][
GPIO1
-
OUTPUT_START
] = (
off£t
>>1) & 1;

609 
	msSeq
.
	mmbôBuf
[
‹dî
][
GPIO0
-
OUTPUT_START
] = 
off£t
 & 1;

611 if(
	mgaö
 >= 0)

613 
sSeq
.
mbôBuf
[
‹dî
][
GPIO3
-
OUTPUT_START
] = (
gaö
>>1) & 1;

614 
	msSeq
.
	mmbôBuf
[
‹dî
][
GPIO2
-
OUTPUT_START
] = 
gaö
 & 1;

616 
	m‹dî
++;

620 } 
	tsSET_HVO
;

622 
	ssSET_FW_GAIN


624 
	mmode
;

625 
sSEQ
 
	msSeq
;

627 
sSET_FW_GAIN
()

629 
	mmode
 = -1;

630 
	msSeq
.
Inô
();

633 
Inô
()

635 
	m‹dî
=0;

636 
	msSeq
.
Inô
();

639 
	msSeq
.
	mcmd
[
‹dî
] = 
MBIT_TRS
;

640 
	msSeq
.
	mmbôBuf
[
‹dî
][
ADC_B_CH_A1
-
OUTPUT_START
] = 1;

641 
	msSeq
.
	mmbôBuf
[
‹dî
][
ADC_B_CH_A0
-
OUTPUT_START
] = 1;

642 
	mmode
)

645 
sSeq
.
mbôBuf
[
‹dî
][
GPIO1
-
OUTPUT_START
] = 0;

649 
sSeq
.
mbôBuf
[
‹dî
][
GPIO1
-
OUTPUT_START
] = 1;

652 
	m‹dî
++;

655 } 
	tsSET_FW_GAIN
;

657 
	ssSET_ADC_B


659 
	mty≥
;

660 
sSEQ
 
	msSeq
;

662 
sSET_ADC_B
()

664 
	mty≥
=-1;

665 
	msSeq
.
Inô
();

668 
Inô
()

670 
	m‹dî
=0;

671 
	msSeq
.
Inô
();

674 
	msSeq
.
	mcmd
[
‹dî
] = 
MBIT_TRS
;

675 
	msSeq
.
	mmbôBuf
[
‹dî
][
FWIRE_SELF_VB
-
OUTPUT_START
] = 0;

676 
	msSeq
.
	mmbôBuf
[
‹dî
][
FWIRE_SELF_VC
-
OUTPUT_START
] = 0;

677 
	mty≥
)

679 
	mVCFFT
:

680 
sSeq
.
mbôBuf
[
‹dî
][
ADC_B_CH_A1
-
OUTPUT_START
] = 0;

681 
	msSeq
.
	mmbôBuf
[
‹dî
][
ADC_B_CH_A0
-
OUTPUT_START
] = 0;

684 
	mVCSFT
:

685 
sSeq
.
mbôBuf
[
‹dî
][
ADC_B_CH_A1
-
OUTPUT_START
] = 0;

686 
	msSeq
.
	mmbôBuf
[
‹dî
][
ADC_B_CH_A0
-
OUTPUT_START
] = 1;

689 
	mHVOFT
:

690 
sSeq
.
mbôBuf
[
‹dî
][
ADC_B_CH_A1
-
OUTPUT_START
] = 1;

691 
	msSeq
.
	mmbôBuf
[
‹dî
][
ADC_B_CH_A0
-
OUTPUT_START
] = 0;

694 
	mFWFT
:

695 
sSeq
.
mbôBuf
[
‹dî
][
ADC_B_CH_A1
-
OUTPUT_START
] = 1;

696 
	msSeq
.
	mmbôBuf
[
‹dî
][
ADC_B_CH_A0
-
OUTPUT_START
] = 1;

699 
	m‹dî
++;

702 } 
	tsSET_ADC_B
;

704 
	ssGET_VI


706 
	mtypGë
;

707 
BOOL
 
	mbSkùDñay
;

708 
sSEQ
 
	msSeq
;

710 
sGET_VI
()

712 
	mtypGë
=
VI
;

713 
	mbSkùDñay
 = 
FALSE
;

714 
	msSeq
.
Inô
();

717 
Inô
()

719 
	m‹dî
=0;

720 
	msSeq
.
Inô
();

723 
	msSeq
.
	mcmd
[
‹dî
] = 
BIT_TRS
;

724 
	msSeq
.
	mBôNo
[
‹dî
] = 
_AD_CONVST
-
OUTPUT_START
;

725 
	msSeq
.
	mbyãBuf
[
‹dî
] = 1;

726 
	m‹dî
++;

729 if(
	mbSkùDñay
 =
FALSE
)

731 
sSeq
.
cmd
[
‹dî
] = 
DLY
;

732 
	msSeq
.
	mP‹tNo
[
‹dî
] = 
u£c
;

733 
	msSeq
.
	mbyãBuf
[
‹dî
] = 1;

734 
	m‹dî
++;

738 
	msSeq
.
	mcmd
[
‹dî
] = 
BIT_TRS
;

739 
	msSeq
.
	mBôNo
[
‹dî
] = 
_AD_CONVST
-
OUTPUT_START
;

740 
	msSeq
.
	mbyãBuf
[
‹dî
] = 0;

741 
	m‹dî
++;

743 
	mtypGë
)

745 
	mV
:

747 
sSeq
.
cmd
[
‹dî
] = 
BYTE_RCV
;

748 
	msSeq
.
	mP‹tNo
[
‹dî
] = ()(
ADC_A_D0
-
INPUT_START
)/8;

749 
	msSeq
.
	mrcv_°¨t
 = 
‹dî
;

750 
	m‹dî
++;

753 
	msSeq
.
	mcmd
[
‹dî
] = 
BYTE_RCV
;

754 
	msSeq
.
	mP‹tNo
[
‹dî
] = ()(
ADC_A_D8
-
INPUT_START
)/8;

755 
	m‹dî
++;

758 
	mI
:

760 
sSeq
.
cmd
[
‹dî
] = 
BYTE_RCV
;

761 
	msSeq
.
	mP‹tNo
[
‹dî
] = ()(
ADC_B_D0
-
INPUT_START
)/8;

762 
	msSeq
.
	mrcv_°¨t
 = 
‹dî
;

763 
	m‹dî
++;

766 
	msSeq
.
	mcmd
[
‹dî
] = 
BYTE_RCV
;

767 
	msSeq
.
	mP‹tNo
[
‹dî
] = ()(
ADC_B_D8
-
INPUT_START
)/8;

768 
	m‹dî
++;

771 
	mVI
:

773 
sSeq
.
cmd
[
‹dî
] = 
BYTE_RCV
;

774 
	msSeq
.
	mP‹tNo
[
‹dî
] = ()(
ADC_A_D0
-
INPUT_START
)/8;

775 
	msSeq
.
	mrcv_°¨t
 = 
‹dî
;

776 
	m‹dî
++;

779 
	msSeq
.
	mcmd
[
‹dî
] = 
BYTE_RCV
;

780 
	msSeq
.
	mP‹tNo
[
‹dî
] = ()(
ADC_A_D8
-
INPUT_START
)/8;

781 
	m‹dî
++;

784 
	msSeq
.
	mcmd
[
‹dî
] = 
BYTE_RCV
;

785 
	msSeq
.
	mP‹tNo
[
‹dî
] = ()(
ADC_B_D0
-
INPUT_START
)/8;

786 
	m‹dî
++;

789 
	msSeq
.
	mcmd
[
‹dî
] = 
BYTE_RCV
;

790 
	msSeq
.
	mP‹tNo
[
‹dî
] = ()(
ADC_B_D8
-
INPUT_START
)/8;

791 
	m‹dî
++;

796 } 
	tsGET_VI
;

798 
	ssAPPLY


800 
	mty≥
;

801 
sSEQ
 
	msSeq
;

803 
sAPPLY
()

805 
	mty≥
 = 
ALL_OUT
;

806 
	msSeq
.
Inô
();

809 
Inô
()

811 
	m‹dî
=0;

812 
	msSeq
.
Inô
();

815 
	msSeq
.
	mcmd
[
‹dî
] = 
MBIT_TRS
;

816 
	msSeq
.
	mmbôBuf
[
‹dî
][
VB_RY_OUT_A2
-
OUTPUT_START
] = 0;

817 
	msSeq
.
	mmbôBuf
[
‹dî
][
VB_RY_OUT_A1
-
OUTPUT_START
] = 0;

818 
	msSeq
.
	mmbôBuf
[
‹dî
][
VB_RY_OUT_A0
-
OUTPUT_START
] = 0;

819 
	m‹dî
++;

822 
	msSeq
.
	mcmd
[
‹dî
] = 
MBIT_TRS
;

823 
	mty≥
)

825 
	mLV1
:

826 
sSeq
.
mbôBuf
[
‹dî
][
VB_RY_OUT_A2
-
OUTPUT_START
] = 0;

827 
	msSeq
.
	mmbôBuf
[
‹dî
][
VB_RY_OUT_A1
-
OUTPUT_START
] = 1;

828 
	msSeq
.
	mmbôBuf
[
‹dî
][
VB_RY_OUT_A0
-
OUTPUT_START
] = 1;

831 
	mLV2
:

832 
sSeq
.
mbôBuf
[
‹dî
][
VB_RY_OUT_A2
-
OUTPUT_START
] = 1;

833 
	msSeq
.
	mmbôBuf
[
‹dî
][
VB_RY_OUT_A1
-
OUTPUT_START
] = 0;

834 
	msSeq
.
	mmbôBuf
[
‹dî
][
VB_RY_OUT_A0
-
OUTPUT_START
] = 0;

837 
	mHV1
:

838 
sSeq
.
mbôBuf
[
‹dî
][
VB_RY_OUT_A2
-
OUTPUT_START
] = 0;

839 
	msSeq
.
	mmbôBuf
[
‹dî
][
VB_RY_OUT_A1
-
OUTPUT_START
] = 0;

840 
	msSeq
.
	mmbôBuf
[
‹dî
][
VB_RY_OUT_A0
-
OUTPUT_START
] = 1;

843 
	mHV2
:

844 
sSeq
.
mbôBuf
[
‹dî
][
VB_RY_OUT_A2
-
OUTPUT_START
] = 0;

845 
	msSeq
.
	mmbôBuf
[
‹dî
][
VB_RY_OUT_A1
-
OUTPUT_START
] = 1;

846 
	msSeq
.
	mmbôBuf
[
‹dî
][
VB_RY_OUT_A0
-
OUTPUT_START
] = 0;

849 
	mPULSE
:

850 
sSeq
.
mbôBuf
[
‹dî
][
VB_RY_OUT_A2
-
OUTPUT_START
] = 1;

851 
	msSeq
.
	mmbôBuf
[
‹dî
][
VB_RY_OUT_A1
-
OUTPUT_START
] = 0;

852 
	msSeq
.
	mmbôBuf
[
‹dî
][
VB_RY_OUT_A0
-
OUTPUT_START
] = 1;

855 
	m‹dî
++;

858 } 
	tsAPPLY
;

860 
	ssBREAK


862 
	mty≥
;

863 
sSEQ
 
	msSeq
;

865 
sBREAK
()

867 
	mty≥
 = 
ALL_OUT
;

868 
	msSeq
.
Inô
();

871 
Inô
()

873 
	m‹dî
=0;

874 
	msSeq
.
Inô
();

877 
	msSeq
.
	mcmd
[
‹dî
] = 
MBIT_TRS
;

878 if(
	mty≥
 =
VB_ONLY
)

880 
sSeq
.
mbôBuf
[
‹dî
][
VB_RY_OUT_A2
-
OUTPUT_START
] = 0;

881 
	msSeq
.
	mmbôBuf
[
‹dî
][
VB_RY_OUT_A1
-
OUTPUT_START
] = 0;

882 
	msSeq
.
	mmbôBuf
[
‹dî
][
VB_RY_OUT_A0
-
OUTPUT_START
] = 0;

886 
	mi
=
OUTPUT_START
; i<
	mOUTPUT_START
+
	mTOTAL_OUTPUT_NUM
; i++)

888 if(
	mi
 =
BOX_VB_ENA_A
 || 
i
 =
BOX_VB_ENA_B
 || i =
BOX_VB_ENA_C
 || i =
BOX_VB_ENA_D


889 || 
i
 =
BOX_VC_ENA_A
 || i =
BOX_VC_ENA_B
 || i =
BOX_VC_ENA_C
 || i =
BOX_VC_ENA_D


890 || 
i
 =
_AD_CONVST
)

891 { 
sSeq
.
mbôBuf
[
‹dî
][
i
-
OUTPUT_START
] = 1; }

893 { 
	msSeq
.
	mmbôBuf
[
‹dî
][
i
-
OUTPUT_START
] = 0; }

896 
	m‹dî
++;

898 } 
	tsBREAK
;

900 
	ssSET_BPOINT


902 
	mbpoöt
, 
	mbTRY
;

903 
sSEQ
 
	msSeq
;

905 
sSET_BPOINT
()

907 
	mbpoöt
 = 0;

908 
	mbTRY
 = 
TR
;

909 
	msSeq
.
Inô
();

912 
Inô
()

914 
	mi
=0, 
	m‹dî
=0;

915 
BYTE
 
	mByã
=0;

916 
	msSeq
.
Inô
();

919 
	msSeq
.
	mcmd
[
‹dî
] = 
BYTE_TRS
;

920 
	msSeq
.
	mP‹tNo
[
‹dî
] = ()(
VB_ENA_A_A0
-
OUTPUT_START
)/8;

922 
	mByã
 = 0;

923 
	mByã
 += 1<<0;

924 
	mByã
 += 1<<1;

925 
	mByã
 += 1<<2;

926 
	mByã
 += 1<<3;

927 
	mByã
 += 1<<4;

928 
	mByã
 += 1<<5;

929 
	mByã
 += 1<<6;

930 
	mByã
 += 1<<7;

931 
	msSeq
.
	mbyãBuf
[
‹dî
] = 
Byã
;

932 
	m‹dî
++;

935 
	msSeq
.
	mcmd
[
‹dî
] = 
BIT_TRS
;

936 
	msSeq
.
	mbyãBuf
[
‹dî
] = 1;

937 if(((1<<(
	mbpoöt
>>12 & 0x0f)Ë& 0x01)>>0Ë
	msSeq
.
	mBôNo
[
‹dî
] = 
_BOX_A_VB_RST
-
OUTPUT_START
;

938 if(((1<<(
	mbpoöt
>>12 & 0x0f)Ë& 0x02)>>1Ë
	msSeq
.
	mBôNo
[
‹dî
] = 
_BOX_B_VB_RST
-
OUTPUT_START
;

939 if(((1<<(
	mbpoöt
>>12 & 0x0f)Ë& 0x04)>>2Ë
	msSeq
.
	mBôNo
[
‹dî
] = 
_BOX_C_VB_RST
-
OUTPUT_START
;

940 if(((1<<(
	mbpoöt
>>12 & 0x0f)Ë& 0x08)>>3Ë
	msSeq
.
	mBôNo
[
‹dî
] = 
_BOX_D_VB_RST
-
OUTPUT_START
;

941 
	m‹dî
++;

955 
	msSeq
.
	mcmd
[
‹dî
] = 
BYTE_TRS
;

956 
	msSeq
.
	mP‹tNo
[
‹dî
] = ()(
BOX_VB_ENA_A
-
OUTPUT_START
)/8;

958 
	mByã
 = 0;

959 
	mByã
 +((1<<(
bpoöt
>>12 & 0x0f)) ^ 0x01) & 0x01;

960 
	mByã
 +((1<<(
bpoöt
>>12 & 0x0f)) ^ 0x02) & 0x02;

961 
	mByã
 +((1<<(
bpoöt
>>12 & 0x0f)) ^ 0x04) & 0x04;

962 
	mByã
 +((1<<(
bpoöt
>>12 & 0x0f)) ^ 0x08) & 0x08;

963 
	msSeq
.
	mbyãBuf
[
‹dî
] = 
Byã
;

964 
	m‹dî
++;

967 
	msSeq
.
	mcmd
[
‹dî
] = 
BYTE_TRS
;

968 
	msSeq
.
	mP‹tNo
[
‹dî
] = ()(
VB_PIN_A0
-
OUTPUT_START
)/8;

970 
	mByã
 = 0;

971 
	mByã
 +
bpoöt
 & 0x01;

972 
	mByã
 +
bpoöt
 & 0x02;

973 
	mByã
 +
bpoöt
 & 0x04;

974 
	mByã
 +
bpoöt
 & 0x08;

975 
	mByã
 +
bpoöt
 & 0x10;

976 
	mByã
 +
bpoöt
 & 0x20;

978 if(
	mbTRY
 =
TR
)

981 
Byã
 +((1<<(
bpoöt
>>6 & 0x01)) & 0x01)<<6;

982 
	mByã
 +((1<<(
bpoöt
>>6 & 0x01)) & 0x02)<<6;

984 
	msSeq
.
	mbyãBuf
[
‹dî
] = 
Byã
;

985 
	m‹dî
++;

988 
	msSeq
.
	mcmd
[
‹dî
] = 
BYTE_TRS
;

989 
	msSeq
.
	mP‹tNo
[
‹dî
] = ()(
VB_CPLD_A2
-
OUTPUT_START
)/8;

991 
	mByã
 = 0;

992 if(
	mbTRY
 =
RY
)

995 
Byã
 +((1<<(
bpoöt
>>6 & 0x01)) & 0x01)<<0;

996 
	mByã
 +((1<<(
bpoöt
>>6 & 0x01)) & 0x02)<<0;

998 
	mByã
 += 0<<2;

999 
	mByã
 +(
bpoöt
 & 0x080)>>3;

1000 
	mByã
 +(
bpoöt
 & 0x100)>>3;

1001 
	mByã
 +(
bpoöt
 & 0x200)>>3;

1002 
	mByã
 +(
bpoöt
 & 0x400)>>3;

1003 
	msSeq
.
	mbyãBuf
[
‹dî
] = 
Byã
;

1004 
	m‹dî
++;

1007 
	msSeq
.
	mcmd
[
‹dî
] = 
BYTE_TRS
;

1008 
	msSeq
.
	mP‹tNo
[
‹dî
] = ()(
VB_ENA_A_A0
-
OUTPUT_START
)/8;

1010 
	mByã
 = 0;

1011 
	mByã
 +((1<<(
bpoöt
>>11 & 0x01)) ^ 0x01) & 0x01;

1012 
	mByã
 +((1<<(
bpoöt
>>11 & 0x01)) ^ 0x02) & 0x02;

1013 
	msSeq
.
	mbyãBuf
[
‹dî
] = 
Byã
;

1014 
	m‹dî
++;

1017 } 
	tsSET_BPOINT
;

1019 
	ssSET_CPOINT


1021 
	m˝oöt
, 
	mbTRY
;

1022 
sSEQ
 
	msSeq
;

1024 
sSET_CPOINT
()

1026 
	m˝oöt
 = 0;

1027 
	mbTRY
 = 
TR
;

1028 
	msSeq
.
Inô
();

1031 
Inô
()

1033 
	mi
=0, 
	m‹dî
=0;

1034 
BYTE
 
	mByã
=0;

1035 
	msSeq
.
Inô
();

1038 
	msSeq
.
	mcmd
[
‹dî
] = 
BYTE_TRS
;

1039 
	msSeq
.
	mP‹tNo
[
‹dî
] = ()(
VC_ENA_A_A0
-
OUTPUT_START
)/8;

1041 
	mByã
 = 0;

1042 
	mByã
 += 1<<0;

1043 
	mByã
 += 1<<1;

1044 
	mByã
 += 1<<2;

1045 
	mByã
 += 1<<3;

1046 
	mByã
 += 1<<4;

1047 
	mByã
 += 1<<5;

1048 
	mByã
 += 1<<6;

1049 
	mByã
 += 1<<7;

1050 
	msSeq
.
	mbyãBuf
[
‹dî
] = 
Byã
;

1051 
	m‹dî
++;

1054 
	msSeq
.
	mcmd
[
‹dî
] = 
BIT_TRS
;

1055 
	msSeq
.
	mbyãBuf
[
‹dî
] = 1;

1056 if(((1<<(
	m˝oöt
>>12 & 0x0f)Ë& 0x01)>>0Ë
	msSeq
.
	mBôNo
[
‹dî
] = 
_BOX_A_VC_RST
-
OUTPUT_START
;

1057 if(((1<<(
	m˝oöt
>>12 & 0x0f)Ë& 0x02)>>1Ë
	msSeq
.
	mBôNo
[
‹dî
] = 
_BOX_B_VC_RST
-
OUTPUT_START
;

1058 if(((1<<(
	m˝oöt
>>12 & 0x0f)Ë& 0x04)>>2Ë
	msSeq
.
	mBôNo
[
‹dî
] = 
_BOX_C_VC_RST
-
OUTPUT_START
;

1059 if(((1<<(
	m˝oöt
>>12 & 0x0f)Ë& 0x08)>>3Ë
	msSeq
.
	mBôNo
[
‹dî
] = 
_BOX_D_VC_RST
-
OUTPUT_START
;

1060 
	m‹dî
++;

1074 
	msSeq
.
	mcmd
[
‹dî
] = 
BYTE_TRS
;

1075 
	msSeq
.
	mP‹tNo
[
‹dî
] = ()(
BOX_VC_ENA_A
-
OUTPUT_START
)/8;

1077 
	mByã
 = 0;

1078 
	mByã
 +((1<<(
˝oöt
>>12 & 0x0f)) ^ 0x01) & 0x01;

1079 
	mByã
 +((1<<(
˝oöt
>>12 & 0x0f)) ^ 0x02) & 0x02;

1080 
	mByã
 +((1<<(
˝oöt
>>12 & 0x0f)) ^ 0x04) & 0x04;

1081 
	mByã
 +((1<<(
˝oöt
>>12 & 0x0f)) ^ 0x08) & 0x08;

1082 
	msSeq
.
	mbyãBuf
[
‹dî
] = 
Byã
;

1083 
	m‹dî
++;

1086 
	msSeq
.
	mcmd
[
‹dî
] = 
BYTE_TRS
;

1087 
	msSeq
.
	mP‹tNo
[
‹dî
] = ()(
VC_PIN_A0
-
OUTPUT_START
)/8;

1089 
	mByã
 = 0;

1090 
	mByã
 +
˝oöt
 & 0x01;

1091 
	mByã
 +
˝oöt
 & 0x02;

1092 
	mByã
 +
˝oöt
 & 0x04;

1093 
	mByã
 +
˝oöt
 & 0x08;

1094 
	mByã
 +
˝oöt
 & 0x10;

1095 
	mByã
 +
˝oöt
 & 0x20;

1097 if(
	mbTRY
 =
TR
)

1100 
Byã
 +((1<<(
˝oöt
>>6 & 0x01)) & 0x01)<<6;

1101 
	mByã
 +((1<<(
˝oöt
>>6 & 0x01)) & 0x02)<<6;

1103 
	msSeq
.
	mbyãBuf
[
‹dî
] = 
Byã
;

1104 
	m‹dî
++;

1107 
	msSeq
.
	mcmd
[
‹dî
] = 
BYTE_TRS
;

1108 
	msSeq
.
	mP‹tNo
[
‹dî
] = ()(
VC_CPLD_A2
-
OUTPUT_START
)/8;

1110 
	mByã
 = 0;

1111 if(
	mbTRY
 =
RY
)

1114 
Byã
 +((1<<(
˝oöt
>>6 & 0x01)) & 0x01)<<0;

1115 
	mByã
 +((1<<(
˝oöt
>>6 & 0x01)) & 0x02)<<0;

1117 
	mByã
 += 0<<2;

1118 
	mByã
 +(
˝oöt
 & 0x080)>>3;

1119 
	mByã
 +(
˝oöt
 & 0x100)>>3;

1120 
	mByã
 +(
˝oöt
 & 0x200)>>3;

1121 
	mByã
 +(
˝oöt
 & 0x400)>>3;

1122 
	msSeq
.
	mbyãBuf
[
‹dî
] = 
Byã
;

1123 
	m‹dî
++;

1126 
	msSeq
.
	mcmd
[
‹dî
] = 
BYTE_TRS
;

1127 
	msSeq
.
	mP‹tNo
[
‹dî
] = ()(
VC_ENA_A_A0
-
OUTPUT_START
)/8;

1129 
	mByã
 = 0;

1130 
	mByã
 +((1<<(
˝oöt
>>11 & 0x01)) ^ 0x01) & 0x01;

1131 
	mByã
 +((1<<(
˝oöt
>>11 & 0x01)) ^ 0x02) & 0x02;

1132 
	msSeq
.
	mbyãBuf
[
‹dî
] = 
Byã
;

1133 
	m‹dî
++;

1136 } 
	tsSET_CPOINT
;

1138 
	ssRST_BBOX


1140 
	mbbox
;

1141 
sSEQ
 
	msSeq
;

1143 
sRST_BBOX
()

1145 
	mbbox
 = -1;

1146 
	msSeq
.
Inô
();

1149 
Inô
()

1151 
	m‹dî
=0;

1152 
BYTE
 
	mByã
=0;

1153 
	msSeq
.
Inô
();

1155 
	mbbox
)

1157 
	mBOX_A
:

1158 
BOX_B
:

1159 
BOX_C
:

1160 
BOX_D
:

1162 
sSeq
.
cmd
[
‹dî
] = 
BIT_TRS
;

1163 
	msSeq
.
	mbyãBuf
[
‹dî
] = 0;

1165 if(
	mbbox
 =
BOX_A
Ë
sSeq
.
BôNo
[
‹dî
] = 
_BOX_A_VB_RST
-
OUTPUT_START
;

1166 if(
	mbbox
 =
BOX_B
Ë
sSeq
.
BôNo
[
‹dî
] = 
_BOX_B_VB_RST
-
OUTPUT_START
;

1167 if(
	mbbox
 =
BOX_C
Ë
sSeq
.
BôNo
[
‹dî
] = 
_BOX_C_VB_RST
-
OUTPUT_START
;

1168 if(
	mbbox
 =
BOX_D
Ë
sSeq
.
BôNo
[
‹dî
] = 
_BOX_D_VB_RST
-
OUTPUT_START
;

1169 
	m‹dî
++;

1172 
	mBOX_ALL
:

1174 
sSeq
.
cmd
[
‹dî
] = 
BYTE_TRS
;

1175 
	msSeq
.
	mP‹tNo
[
‹dî
] = ()(
_BOX_A_VB_RST
-
OUTPUT_START
)/8;

1177 
	mByã
 = 0;

1178 
	mByã
 += 0<<0;

1179 
	mByã
 += 0<<1;

1180 
	mByã
 += 0<<2;

1181 
	mByã
 += 0<<3;

1182 
	mByã
 += 1<<4;

1183 
	mByã
 += 1<<5;

1184 
	mByã
 += 1<<6;

1185 
	mByã
 += 1<<7;

1186 
	msSeq
.
	mbyãBuf
[
‹dî
] = 
Byã
;

1187 
	m‹dî
++;

1192 } 
	tsRST_BBOX
;

1194 
	ssRST_CBOX


1196 
	mcbox
;

1197 
sSEQ
 
	msSeq
;

1199 
sRST_CBOX
()

1201 
	mcbox
 = -1;

1202 
	msSeq
.
Inô
();

1205 
Inô
()

1207 
	m‹dî
=0;

1208 
BYTE
 
	mByã
=0;

1209 
	msSeq
.
Inô
();

1211 
	mcbox
)

1213 
	mBOX_A
:

1214 
BOX_B
:

1215 
BOX_C
:

1216 
BOX_D
:

1218 
sSeq
.
cmd
[
‹dî
] = 
BIT_TRS
;

1219 
	msSeq
.
	mbyãBuf
[
‹dî
] = 0;

1221 if(
	mcbox
 =
BOX_A
Ë
sSeq
.
BôNo
[
‹dî
] = 
_BOX_A_VC_RST
-
OUTPUT_START
;

1222 if(
	mcbox
 =
BOX_B
Ë
sSeq
.
BôNo
[
‹dî
] = 
_BOX_B_VC_RST
-
OUTPUT_START
;

1223 if(
	mcbox
 =
BOX_C
Ë
sSeq
.
BôNo
[
‹dî
] = 
_BOX_C_VC_RST
-
OUTPUT_START
;

1224 if(
	mcbox
 =
BOX_D
Ë
sSeq
.
BôNo
[
‹dî
] = 
_BOX_D_VC_RST
-
OUTPUT_START
;

1225 
	m‹dî
++;

1228 
	mBOX_ALL
:

1230 
sSeq
.
cmd
[
‹dî
] = 
BYTE_TRS
;

1231 
	msSeq
.
	mP‹tNo
[
‹dî
] = ()(
_BOX_A_VC_RST
-
OUTPUT_START
)/8;

1233 
	mByã
 = 0;

1234 
	mByã
 += 1<<0;

1235 
	mByã
 += 1<<1;

1236 
	mByã
 += 1<<2;

1237 
	mByã
 += 1<<3;

1238 
	mByã
 += 0<<4;

1239 
	mByã
 += 0<<5;

1240 
	mByã
 += 0<<6;

1241 
	mByã
 += 0<<7;

1242 
	msSeq
.
	mbyãBuf
[
‹dî
] = 
Byã
;

1243 
	m‹dî
++;

1248 } 
	tsRST_CBOX
;

1250 
	ssRST_BOX


1252 
	m±B
, 
	m±C
;

1253 
sSEQ
 
	msSeq
;

1255 
sRST_BOX
()

1257 
	m±B
 = 
±C
 = -1;

1258 
	msSeq
.
Inô
();

1261 
Inô
()

1263 
	m‹dî
=0;

1264 
BYTE
 
	mByã
=0;

1265 
	msSeq
.
Inô
();

1268 if(
	m±B
 >= 0)

1270 
sSeq
.
cmd
[
‹dî
] = 
BIT_TRS
;

1271 
	msSeq
.
	mbyãBuf
[
‹dî
] = 0;

1272 if(((1<<(
	m±B
>>12 & 0x0f)Ë& 0x01)>>0Ë
	msSeq
.
	mBôNo
[
‹dî
] = 
_BOX_A_VB_RST
-
OUTPUT_START
;

1273 if(((1<<(
	m±B
>>12 & 0x0f)Ë& 0x02)>>1Ë
	msSeq
.
	mBôNo
[
‹dî
] = 
_BOX_B_VB_RST
-
OUTPUT_START
;

1274 if(((1<<(
	m±B
>>12 & 0x0f)Ë& 0x04)>>2Ë
	msSeq
.
	mBôNo
[
‹dî
] = 
_BOX_C_VB_RST
-
OUTPUT_START
;

1275 if(((1<<(
	m±B
>>12 & 0x0f)Ë& 0x08)>>3Ë
	msSeq
.
	mBôNo
[
‹dî
] = 
_BOX_D_VB_RST
-
OUTPUT_START
;

1276 
	m‹dî
++;

1280 if(
	m±C
 >= 0)

1282 
sSeq
.
cmd
[
‹dî
] = 
BIT_TRS
;

1283 
	msSeq
.
	mbyãBuf
[
‹dî
] = 0;

1284 if(((1<<(
	m±C
>>12 & 0x0f)Ë& 0x01)>>0Ë
	msSeq
.
	mBôNo
[
‹dî
] = 
_BOX_A_VC_RST
-
OUTPUT_START
;

1285 if(((1<<(
	m±C
>>12 & 0x0f)Ë& 0x02)>>1Ë
	msSeq
.
	mBôNo
[
‹dî
] = 
_BOX_B_VC_RST
-
OUTPUT_START
;

1286 if(((1<<(
	m±C
>>12 & 0x0f)Ë& 0x04)>>2Ë
	msSeq
.
	mBôNo
[
‹dî
] = 
_BOX_C_VC_RST
-
OUTPUT_START
;

1287 if(((1<<(
	m±C
>>12 & 0x0f)Ë& 0x08)>>3Ë
	msSeq
.
	mBôNo
[
‹dî
] = 
_BOX_D_VC_RST
-
OUTPUT_START
;

1288 
	m‹dî
++;

1292 } 
	tsRST_BOX
;

1294 
	ssRST_BOXALL


1296 
BOOL
 
	mbBBox
, 
	mbCBox
;

1297 
sSEQ
 
	msSeq
;

1299 
sRST_BOXALL
()

1301 
	mbBBox
 = 
bCBox
 = 
TRUE
;

1302 
	msSeq
.
Inô
();

1305 
Inô
()

1307 
	m‹dî
=0;

1308 
BYTE
 
	mByã
=0;

1309 
	msSeq
.
Inô
();

1311 if(
	mbBBox
 =
TRUE
 && 
bCBox
 == TRUE)

1314 
sSeq
.
cmd
[
‹dî
] = 
BYTE_TRS
;

1315 
	msSeq
.
	mP‹tNo
[
‹dî
] = ()(
_BOX_A_VB_RST
-
OUTPUT_START
)/8;

1317 
	mByã
 = 0;

1318 
	mByã
 += 0<<0;

1319 
	mByã
 += 0<<1;

1320 
	mByã
 += 0<<2;

1321 
	mByã
 += 0<<3;

1322 
	mByã
 += 0<<4;

1323 
	mByã
 += 0<<5;

1324 
	mByã
 += 0<<6;

1325 
	mByã
 += 0<<7;

1326 
	msSeq
.
	mbyãBuf
[
‹dî
] = 
Byã
;

1327 
	m‹dî
++;

1329 if(
	mbBBox
 =
TRUE
)

1332 
sSeq
.
cmd
[
‹dî
] = 
BYTE_TRS
;

1333 
	msSeq
.
	mP‹tNo
[
‹dî
] = ()(
_BOX_A_VB_RST
-
OUTPUT_START
)/8;

1335 
	mByã
 = 0;

1336 
	mByã
 += 0<<0;

1337 
	mByã
 += 0<<1;

1338 
	mByã
 += 0<<2;

1339 
	mByã
 += 0<<3;

1340 
	mByã
 += 1<<4;

1341 
	mByã
 += 1<<5;

1342 
	mByã
 += 1<<6;

1343 
	mByã
 += 1<<7;

1344 
	msSeq
.
	mbyãBuf
[
‹dî
] = 
Byã
;

1345 
	m‹dî
++;

1347 if(
	mbCBox
 =
TRUE
)

1350 
sSeq
.
cmd
[
‹dî
] = 
BYTE_TRS
;

1351 
	msSeq
.
	mP‹tNo
[
‹dî
] = ()(
_BOX_A_VC_RST
-
OUTPUT_START
)/8;

1353 
	mByã
 = 0;

1354 
	mByã
 += 1<<0;

1355 
	mByã
 += 1<<1;

1356 
	mByã
 += 1<<2;

1357 
	mByã
 += 1<<3;

1358 
	mByã
 += 0<<4;

1359 
	mByã
 += 0<<5;

1360 
	mByã
 += 0<<6;

1361 
	mByã
 += 0<<7;

1362 
	msSeq
.
	mbyãBuf
[
‹dî
] = 
Byã
;

1363 
	m‹dî
++;

1367 } 
	tsRST_BOXALL
;

1369 
	ssRST_BPOINT


1371 
	mbpoöt
, 
	mbTRY
;

1372 
sSEQ
 
	msSeq
;

1374 
sRST_BPOINT
()

1376 
	mbpoöt
 = 0;

1377 
	mbTRY
 = 
TR
;

1378 
	msSeq
.
Inô
();

1381 
Inô
()

1383 
	mi
=0, 
	m‹dî
=0;

1384 
BYTE
 
	mByã
=0;

1385 
	msSeq
.
Inô
();

1388 
	msSeq
.
	mcmd
[
‹dî
] = 
BYTE_TRS
;

1389 
	msSeq
.
	mP‹tNo
[
‹dî
] = ()(
VB_ENA_A_A0
-
OUTPUT_START
)/8;

1391 
	mByã
 = 0;

1392 
	mByã
 += 1<<0;

1393 
	mByã
 += 1<<1;

1394 
	mByã
 += 1<<2;

1395 
	mByã
 += 1<<3;

1396 
	mByã
 += 1<<4;

1397 
	mByã
 += 1<<5;

1398 
	mByã
 += 1<<6;

1399 
	mByã
 += 1<<7;

1400 
	msSeq
.
	mbyãBuf
[
‹dî
] = 
Byã
;

1401 
	m‹dî
++;

1404 
	msSeq
.
	mcmd
[
‹dî
] = 
BIT_TRS
;

1405 
	msSeq
.
	mbyãBuf
[
‹dî
] = 1;

1406 if(((1<<(
	mbpoöt
>>12 & 0x0f)Ë& 0x01)>>0Ë
	msSeq
.
	mBôNo
[
‹dî
] = 
_BOX_A_VB_RST
-
OUTPUT_START
;

1407 if(((1<<(
	mbpoöt
>>12 & 0x0f)Ë& 0x02)>>1Ë
	msSeq
.
	mBôNo
[
‹dî
] = 
_BOX_B_VB_RST
-
OUTPUT_START
;

1408 if(((1<<(
	mbpoöt
>>12 & 0x0f)Ë& 0x04)>>2Ë
	msSeq
.
	mBôNo
[
‹dî
] = 
_BOX_C_VB_RST
-
OUTPUT_START
;

1409 if(((1<<(
	mbpoöt
>>12 & 0x0f)Ë& 0x08)>>3Ë
	msSeq
.
	mBôNo
[
‹dî
] = 
_BOX_D_VB_RST
-
OUTPUT_START
;

1410 
	m‹dî
++;

1424 
	msSeq
.
	mcmd
[
‹dî
] = 
BYTE_TRS
;

1425 
	msSeq
.
	mP‹tNo
[
‹dî
] = ()(
BOX_VB_ENA_A
-
OUTPUT_START
)/8;

1427 
	mByã
 = 0;

1428 
	mByã
 +((1<<(
bpoöt
>>12 & 0x0f)) ^ 0x01) & 0x01;

1429 
	mByã
 +((1<<(
bpoöt
>>12 & 0x0f)) ^ 0x02) & 0x02;

1430 
	mByã
 +((1<<(
bpoöt
>>12 & 0x0f)) ^ 0x04) & 0x04;

1431 
	mByã
 +((1<<(
bpoöt
>>12 & 0x0f)) ^ 0x08) & 0x08;

1432 
	msSeq
.
	mbyãBuf
[
‹dî
] = 
Byã
;

1433 
	m‹dî
++;

1436 
	msSeq
.
	mcmd
[
‹dî
] = 
BYTE_TRS
;

1437 
	msSeq
.
	mP‹tNo
[
‹dî
] = ()(
VB_PIN_A0
-
OUTPUT_START
)/8;

1439 
	mByã
 = 0;

1440 
	mByã
 +
bpoöt
 & 0x01;

1441 
	mByã
 +
bpoöt
 & 0x02;

1442 
	mByã
 +
bpoöt
 & 0x04;

1443 
	mByã
 +
bpoöt
 & 0x08;

1444 
	mByã
 +
bpoöt
 & 0x10;

1445 
	mByã
 +
bpoöt
 & 0x20;

1447 if(
	mbTRY
 =
TR
)

1450 
Byã
 +((1<<(
bpoöt
>>6 & 0x01)) & 0x01)<<6;

1451 
	mByã
 +((1<<(
bpoöt
>>6 & 0x01)) & 0x02)<<6;

1453 
	msSeq
.
	mbyãBuf
[
‹dî
] = 
Byã
;

1454 
	m‹dî
++;

1457 
	msSeq
.
	mcmd
[
‹dî
] = 
BYTE_TRS
;

1458 
	msSeq
.
	mP‹tNo
[
‹dî
] = ()(
VB_CPLD_A2
-
OUTPUT_START
)/8;

1460 
	mByã
 = 0;

1461 if(
	mbTRY
 =
RY
)

1464 
Byã
 +((1<<(
bpoöt
>>6 & 0x01)) & 0x01)<<0;

1465 
	mByã
 +((1<<(
bpoöt
>>6 & 0x01)) & 0x02)<<0;

1467 
	mByã
 += 1<<2;

1468 
	mByã
 +(
bpoöt
 & 0x080)>>3;

1469 
	mByã
 +(
bpoöt
 & 0x100)>>3;

1470 
	mByã
 +(
bpoöt
 & 0x200)>>3;

1471 
	mByã
 +(
bpoöt
 & 0x400)>>3;

1472 
	msSeq
.
	mbyãBuf
[
‹dî
] = 
Byã
;

1473 
	m‹dî
++;

1476 
	msSeq
.
	mcmd
[
‹dî
] = 
BYTE_TRS
;

1477 
	msSeq
.
	mP‹tNo
[
‹dî
] = ()(
VB_ENA_A_A0
-
OUTPUT_START
)/8;

1479 
	mByã
 = 0;

1480 
	mByã
 +((1<<(
bpoöt
>>11 & 0x01)) ^ 0x01) & 0x01;

1481 
	mByã
 +((1<<(
bpoöt
>>11 & 0x01)) ^ 0x02) & 0x02;

1482 
	msSeq
.
	mbyãBuf
[
‹dî
] = 
Byã
;

1483 
	m‹dî
++;

1486 } 
	tsRST_BPOINT
;

1488 
	ssRST_CPOINT


1490 
	m˝oöt
, 
	mbTRY
;

1491 
sSEQ
 
	msSeq
;

1493 
sRST_CPOINT
()

1495 
	m˝oöt
 = 0;

1496 
	mbTRY
 = 
TR
;

1497 
	msSeq
.
Inô
();

1500 
Inô
()

1502 
	mi
=0, 
	m‹dî
=0;

1503 
BYTE
 
	mByã
=0;

1504 
	msSeq
.
Inô
();

1507 
	msSeq
.
	mcmd
[
‹dî
] = 
BYTE_TRS
;

1508 
	msSeq
.
	mP‹tNo
[
‹dî
] = ()(
VC_ENA_A_A0
-
OUTPUT_START
)/8;

1510 
	mByã
 = 0;

1511 
	mByã
 += 1<<0;

1512 
	mByã
 += 1<<1;

1513 
	mByã
 += 1<<2;

1514 
	mByã
 += 1<<3;

1515 
	mByã
 += 1<<4;

1516 
	mByã
 += 1<<5;

1517 
	mByã
 += 1<<6;

1518 
	mByã
 += 1<<7;

1519 
	msSeq
.
	mbyãBuf
[
‹dî
] = 
Byã
;

1520 
	m‹dî
++;

1523 
	msSeq
.
	mcmd
[
‹dî
] = 
BIT_TRS
;

1524 
	msSeq
.
	mbyãBuf
[
‹dî
] = 1;

1525 if(((1<<(
	m˝oöt
>>12 & 0x0f)Ë& 0x01)>>0Ë
	msSeq
.
	mBôNo
[
‹dî
] = 
_BOX_A_VC_RST
-
OUTPUT_START
;

1526 if(((1<<(
	m˝oöt
>>12 & 0x0f)Ë& 0x02)>>1Ë
	msSeq
.
	mBôNo
[
‹dî
] = 
_BOX_B_VC_RST
-
OUTPUT_START
;

1527 if(((1<<(
	m˝oöt
>>12 & 0x0f)Ë& 0x04)>>2Ë
	msSeq
.
	mBôNo
[
‹dî
] = 
_BOX_C_VC_RST
-
OUTPUT_START
;

1528 if(((1<<(
	m˝oöt
>>12 & 0x0f)Ë& 0x08)>>3Ë
	msSeq
.
	mBôNo
[
‹dî
] = 
_BOX_D_VC_RST
-
OUTPUT_START
;

1529 
	m‹dî
++;

1543 
	msSeq
.
	mcmd
[
‹dî
] = 
BYTE_TRS
;

1544 
	msSeq
.
	mP‹tNo
[
‹dî
] = ()(
BOX_VC_ENA_A
-
OUTPUT_START
)/8;

1546 
	mByã
 = 0;

1547 
	mByã
 +((1<<(
˝oöt
>>12 & 0x0f)) ^ 0x01) & 0x01;

1548 
	mByã
 +((1<<(
˝oöt
>>12 & 0x0f)) ^ 0x02) & 0x02;

1549 
	mByã
 +((1<<(
˝oöt
>>12 & 0x0f)) ^ 0x04) & 0x04;

1550 
	mByã
 +((1<<(
˝oöt
>>12 & 0x0f)) ^ 0x08) & 0x08;

1551 
	msSeq
.
	mbyãBuf
[
‹dî
] = 
Byã
;

1552 
	m‹dî
++;

1555 
	msSeq
.
	mcmd
[
‹dî
] = 
BYTE_TRS
;

1556 
	msSeq
.
	mP‹tNo
[
‹dî
] = ()(
VC_PIN_A0
-
OUTPUT_START
)/8;

1558 
	mByã
 = 0;

1559 
	mByã
 +
˝oöt
 & 0x01;

1560 
	mByã
 +
˝oöt
 & 0x02;

1561 
	mByã
 +
˝oöt
 & 0x04;

1562 
	mByã
 +
˝oöt
 & 0x08;

1563 
	mByã
 +
˝oöt
 & 0x10;

1564 
	mByã
 +
˝oöt
 & 0x20;

1566 if(
	mbTRY
 =
TR
)

1569 
Byã
 +((1<<(
˝oöt
>>6 & 0x01)) & 0x01)<<6;

1570 
	mByã
 +((1<<(
˝oöt
>>6 & 0x01)) & 0x02)<<6;

1572 
	msSeq
.
	mbyãBuf
[
‹dî
] = 
Byã
;

1573 
	m‹dî
++;

1576 
	msSeq
.
	mcmd
[
‹dî
] = 
BYTE_TRS
;

1577 
	msSeq
.
	mP‹tNo
[
‹dî
] = ()(
VC_CPLD_A2
-
OUTPUT_START
)/8;

1579 
	mByã
 = 0;

1580 if(
	mbTRY
 =
RY
)

1583 
Byã
 +((1<<(
˝oöt
>>6 & 0x01)) & 0x01)<<0;

1584 
	mByã
 +((1<<(
˝oöt
>>6 & 0x01)) & 0x02)<<0;

1586 
	mByã
 += 1<<2;

1587 
	mByã
 +(
˝oöt
 & 0x080)>>3;

1588 
	mByã
 +(
˝oöt
 & 0x100)>>3;

1589 
	mByã
 +(
˝oöt
 & 0x200)>>3;

1590 
	mByã
 +(
˝oöt
 & 0x400)>>3;

1591 
	msSeq
.
	mbyãBuf
[
‹dî
] = 
Byã
;

1592 
	m‹dî
++;

1595 
	msSeq
.
	mcmd
[
‹dî
] = 
BYTE_TRS
;

1596 
	msSeq
.
	mP‹tNo
[
‹dî
] = ()(
VC_ENA_A_A0
-
OUTPUT_START
)/8;

1598 
	mByã
 = 0;

1599 
	mByã
 +((1<<(
˝oöt
>>11 & 0x01)) ^ 0x01) & 0x01;

1600 
	mByã
 +((1<<(
˝oöt
>>11 & 0x01)) ^ 0x02) & 0x02;

1601 
	msSeq
.
	mbyãBuf
[
‹dî
] = 
Byã
;

1602 
	m‹dî
++;

1605 } 
	tsRST_CPOINT
;

	@C:\sonji\Bioptro\ACE400Cal_140409\ACE400Cal_140409\StdAfx.cpp

5 
	~"°dafx.h
"

	@C:\sonji\Bioptro\ACE400Cal_140409\ACE400Cal_140409\StdAfx.h

6 #i‡!
deföed
(
AFX_STDAFX_H__B40F1493_8241_4047_8B88_C9E026A6B456__INCLUDED_
)

7 
	#AFX_STDAFX_H__B40F1493_8241_4047_8B88_C9E026A6B456__INCLUDED_


	)

9 #i‡
_MSC_VER
 > 1000

10 #¥agm®
⁄˚


13 
	#VC_EXTRALEAN


14 

	)

15 
	~<afxwö.h
>

16 
	~<afxext.h
>

17 
	~<afxdi•.h
>

18 
	~<afxdt˘l.h
>

19 #i‚de‡
_AFX_NO_AFXCMN_SUPPORT


20 
	~<afxcmn.h
>

	@C:\sonji\Bioptro\ACE400Cal_140409\ACE400Cal_140409\ACE400Cal.cpp

4 
	~"°dafx.h
"

5 
	~"V43M™uÆTe°.h
"

6 
	~"V43M™uÆTe°Dlg.h
"

8 #ifde‡
_DEBUG


9 
	#√w
 
DEBUG_NEW


	)

10 #unde‡
THIS_FILE


11 
	gTHIS_FILE
[] = 
__FILE__
;

17 
	$BEGIN_MESSAGE_MAP
(
CV43M™uÆTe°Aµ
, 
CWöAµ
)

22 
	`ON_COMMAND
(
ID_HELP
, 
CWöAµ
::
OnHñp
)

23 
	$END_MESSAGE_MAP
()

28 
CV43M™uÆTe°Aµ
::
	$CV43M™uÆTe°Aµ
()

32 
	}
}

37 
CV43M™uÆTe°Aµ
 
theAµ
;

42 
BOOL
 
	gCV43M™uÆTe°Aµ
::
	$InôIn°™˚
()

44 
	`AfxE«bÀC⁄åﬁC⁄èöî
();

51 #ifde‡
_AFXDLL


52 
	`E«bÀ3dC⁄åﬁs
();

54 
	`E«bÀ3dC⁄åﬁsSètic
();

57 
CV43M™uÆTe°Dlg
 
dlg
;

58 
m_pMaöWnd
 = &
dlg
;

59 
nRe•⁄£
 = 
dlg
.
	`DoModÆ
();

60 i‡(
nRe•⁄£
 =
IDOK
)

65 i‡(
nRe•⁄£
 =
IDCANCEL
)

73  
FALSE
;

74 
	}
}

	@C:\sonji\Bioptro\ACE400Cal_140409\ACE400Cal_140409\ACE400Cal.h

4 #i‡!
deföed
(
AFX_ACE400Cal_H__882AA407_5121_4650_8BB4_1927849024C9__INCLUDED_
)

5 
	#AFX_ACE400Cal_H__882AA407_5121_4650_8BB4_1927849024C9__INCLUDED_


	)

7 #i‡
_MSC_VER
 > 1000

8 #¥agm®
⁄˚


11 #i‚de‡
__AFXWIN_H__


12 #îr‹ 
ö˛ude
 '°dafx.h' 
bef‹e
 
ö˛udög
 
this
 
fûe
 
PCH


15 
	~"ªsour˚.h
"

17 
	~"GlobÆs.h
"

18 
	~"Ma¸oMŸi⁄.h
"

19 
	~"DlgNumbîKeyPad.h
"

21 
	~"Eº‹.h
"

23 
	#WDM
 
TRUE


	)

24 
	~"CDIO.h
"

25 #¥agm®
commít
(
lib
, "CDIO.lib")

37 ˛as†
	cCV43M™uÆTe°Aµ
 : 
public
 
CWöAµ


39 
public
:

40 
CV43M™uÆTe°Aµ
();

45 
	mpublic
:

46 
vútuÆ
 
BOOL
 
InôIn°™˚
();

55 
DECLARE_MESSAGE_MAP
()

	@C:\sonji\Bioptro\ACE400Cal_140409\ACE400Cal_140409\ACE400CalDlg.cpp

4 
	~"°dafx.h
"

5 
	~"V43M™uÆTe°.h
"

6 
	~"V43M™uÆTe°Dlg.h
"

8 #ifde‡
_DEBUG


9 
	#√w
 
DEBUG_NEW


	)

10 #unde‡
THIS_FILE


11 
	gTHIS_FILE
[] = 
__FILE__
;

17 ˛as†
	cCAboutDlg
 : 
public
 
CDülog


19 
public
:

20 
CAboutDlg
();

24 íum { 
	mIDD
 = 
IDD_ABOUTBOX
 };

29 
	g¥Ÿe˘ed
:

30 
vútuÆ
 
DoD©aExch™ge
(
CD©aExch™ge
* 
pDX
);

34 
	g¥Ÿe˘ed
:

37 
DECLARE_MESSAGE_MAP
()

40 
	gCAboutDlg
::
	$CAboutDlg
(Ë: 
	`CDülog
(
CAboutDlg
::
IDD
)

44 
	}
}

46 
CAboutDlg
::
	$DoD©aExch™ge
(
CD©aExch™ge
* 
pDX
)

48 
CDülog
::
	`DoD©aExch™ge
(
pDX
);

51 
	}
}

53 
	$BEGIN_MESSAGE_MAP
(
CAboutDlg
, 
CDülog
)

57 
	$END_MESSAGE_MAP
()

62 
CV43M™uÆTe°Dlg
::
	$CV43M™uÆTe°Dlg
(
CWnd
* 
pP¨ít
 )

63 : 
	`CDülog
(
CV43M™uÆTe°Dlg
::
IDD
, 
pP¨ít
)

66 
m_nLV1
 = 0;

67 
m_nLV2
 = 0;

68 
m_nHV1
 = 0;

69 
m_nHV2
 = 0;

70 
m_nI
 = 0;

71 
m_nBPö
 = 0;

72 
m_nCPö
 = 0;

73 
m_nBBox
 = 0;

74 
m_nCBox
 = 0;

75 
m_nBPCBE«bÀ
 = 0;

76 
m_nCPCBE«bÀ
 = 0;

77 
m_nBCPLD
 = 0;

78 
m_nCCPLD
 = 0;

79 
m_nBPCB0
 = 
FALSE
;

80 
m_nBPCB1
 = 
FALSE
;

81 
m_nBPCB2
 = 
FALSE
;

82 
m_nBPCB3
 = 
FALSE
;

83 
m_nBPö0
 = 
FALSE
;

84 
m_nBPö1
 = 
FALSE
;

85 
m_nBPö2
 = 
FALSE
;

86 
m_nBPö3
 = 
FALSE
;

87 
m_nBPö4
 = 
FALSE
;

88 
m_nBPö5
 = 
FALSE
;

89 
m_nCPCB0
 = 
FALSE
;

90 
m_nCPCB1
 = 
FALSE
;

91 
m_nCPCB2
 = 
FALSE
;

92 
m_nCPCB3
 = 
FALSE
;

93 
m_nCPö0
 = 
FALSE
;

94 
m_nCPö1
 = 
FALSE
;

95 
m_nCPö2
 = 
FALSE
;

96 
m_nCPö3
 = 
FALSE
;

97 
m_nCPö4
 = 
FALSE
;

98 
m_nCPö5
 = 
FALSE
;

99 
m_nS∑rkOn
 = 
FALSE
;

100 
m_nS∑rk
 = 0;

101 
m_bIHighGaöMode
 = 
FALSE
;

102 
m_bFWHighGaöMode
 = 
FALSE
;

103 
m_bDCOut
 = 
FALSE
;

104 
m_±BTR
 = 0;

105 
m_±BRY
 = 0;

106 
m_±CTR
 = 0;

107 
m_±CRY
 = 0;

108 
m_bVBGu¨dOn
 = 
FALSE
;

109 
m_bVCGu¨dOn
 = 
FALSE
;

110 
m_nBCCV
 = 0;

111 
m_nCCCV
 = 0;

112 
m_nBCVC
 = 0;

113 
m_nCCVC
 = 0;

114 
m_bPul£
 = 
FALSE
;

115 
m_nADC_B
 = -1;

116 
m_nADC_A
 = -1;

117 
m_nHLVC
 = -1;

118 
m_nHVOGaö
 = -1;

119 
m_nHVOOff£t
 = -1;

120 
m_nICC
 = 0;

121 
m_nVB
 = -1;

122 
m_nPul£Fªq
 = -1;

123 
m_nPul£Mó
 = -1;

124 
m_nPul£Vﬁt
 = -1;

125 
m_adcHV1
 = 0;

126 
m_adcHV2
 = 0;

127 
m_adcLV1
 = 0;

128 
m_adcLV2
 = 0;

129 
m_nIRng
 = -1;

132 
m_hIc⁄
 = 
	`AfxGëAµ
()->
	`LﬂdIc⁄
(
IDR_MAINFRAME
);

133 
	}
}

135 
	gCV43M™uÆTe°Dlg
::
	$DoD©aExch™ge
(
CD©aExch™ge
* 
pDX
)

137 
CDülog
::
	`DoD©aExch™ge
(
pDX
);

139 
	`DDX_C⁄åﬁ
(
pDX
, 
IDC_LIST_MSG
, 
m_li°Msg
);

140 
	`DDX_C⁄åﬁ
(
pDX
, 
IDC_LIST_BPOINT
, 
m_li°BPoöt
);

141 
	`DDX_C⁄åﬁ
(
pDX
, 
IDC_LIST_CPOINT
, 
m_li°CPoöt
);

142 
	`DDX_Text
(
pDX
, 
IDC_EDIT_LV1
, 
m_nLV1
);

143 
	`DDX_Text
(
pDX
, 
IDC_EDIT_LV2
, 
m_nLV2
);

144 
	`DDX_Text
(
pDX
, 
IDC_EDIT_HV1
, 
m_nHV1
);

145 
	`DDX_Text
(
pDX
, 
IDC_EDIT_HV2
, 
m_nHV2
);

146 
	`DDX_Text
(
pDX
, 
IDC_EDIT_I
, 
m_nI
);

147 
	`DDX_Text
(
pDX
, 
IDC_EDIT_BPIN
, 
m_nBPö
);

148 
	`DDX_Text
(
pDX
, 
IDC_EDIT_CPIN
, 
m_nCPö
);

149 
	`DDX_Radio
(
pDX
, 
IDC_RADIO_BBOXA
, 
m_nBBox
);

150 
	`DDX_Radio
(
pDX
, 
IDC_RADIO_CBOXA
, 
m_nCBox
);

151 
	`DDX_Radio
(
pDX
, 
IDC_RADIO_BPCB_ENABLE0
, 
m_nBPCBE«bÀ
);

152 
	`DDX_Radio
(
pDX
, 
IDC_RADIO_CPCB_ENABLE0
, 
m_nCPCBE«bÀ
);

153 
	`DDX_Radio
(
pDX
, 
IDC_RADIO_BCPLD0
, 
m_nBCPLD
);

154 
	`DDX_Radio
(
pDX
, 
IDC_RADIO_CCPLD0
, 
m_nCCPLD
);

155 
	`DDX_Check
(
pDX
, 
IDC_CHECK_BPCB0
, 
m_nBPCB0
);

156 
	`DDX_Check
(
pDX
, 
IDC_CHECK_BPCB1
, 
m_nBPCB1
);

157 
	`DDX_Check
(
pDX
, 
IDC_CHECK_BPCB2
, 
m_nBPCB2
);

158 
	`DDX_Check
(
pDX
, 
IDC_CHECK_BPCB3
, 
m_nBPCB3
);

159 
	`DDX_Check
(
pDX
, 
IDC_CHECK_BPIN0
, 
m_nBPö0
);

160 
	`DDX_Check
(
pDX
, 
IDC_CHECK_BPIN1
, 
m_nBPö1
);

161 
	`DDX_Check
(
pDX
, 
IDC_CHECK_BPIN2
, 
m_nBPö2
);

162 
	`DDX_Check
(
pDX
, 
IDC_CHECK_BPIN3
, 
m_nBPö3
);

163 
	`DDX_Check
(
pDX
, 
IDC_CHECK_BPIN4
, 
m_nBPö4
);

164 
	`DDX_Check
(
pDX
, 
IDC_CHECK_BPIN5
, 
m_nBPö5
);

165 
	`DDX_Check
(
pDX
, 
IDC_CHECK_CPCB0
, 
m_nCPCB0
);

166 
	`DDX_Check
(
pDX
, 
IDC_CHECK_CPCB1
, 
m_nCPCB1
);

167 
	`DDX_Check
(
pDX
, 
IDC_CHECK_CPCB2
, 
m_nCPCB2
);

168 
	`DDX_Check
(
pDX
, 
IDC_CHECK_CPCB3
, 
m_nCPCB3
);

169 
	`DDX_Check
(
pDX
, 
IDC_CHECK_CPIN0
, 
m_nCPö0
);

170 
	`DDX_Check
(
pDX
, 
IDC_CHECK_CPIN1
, 
m_nCPö1
);

171 
	`DDX_Check
(
pDX
, 
IDC_CHECK_CPIN2
, 
m_nCPö2
);

172 
	`DDX_Check
(
pDX
, 
IDC_CHECK_CPIN3
, 
m_nCPö3
);

173 
	`DDX_Check
(
pDX
, 
IDC_CHECK_CPIN4
, 
m_nCPö4
);

174 
	`DDX_Check
(
pDX
, 
IDC_CHECK_CPIN5
, 
m_nCPö5
);

175 
	`DDX_C⁄åﬁ
(
pDX
, 
IDC_LABEL_I_AMP
, 
m_lbIamp
);

176 
	`DDX_C⁄åﬁ
(
pDX
, 
IDC_LABEL_V_VOLT
, 
m_lbVvﬁt
);

177 
	`DDX_C⁄åﬁ
(
pDX
, 
IDC_LABEL_R_OHM
, 
m_lbRohm
);

178 
	`DDX_Check
(
pDX
, 
IDC_CHECK_SPARK_ON
, 
m_nS∑rkOn
);

179 
	`DDX_Text
(
pDX
, 
IDC_EDIT_SPARK
, 
m_nS∑rk
);

180 
	`DDX_Check
(
pDX
, 
IDC_CHECK_I_HIGH_GAIN
, 
m_bIHighGaöMode
);

181 
	`DDX_Check
(
pDX
, 
IDC_CHECK_FW_HIGH_GAIN
, 
m_bFWHighGaöMode
);

182 
	`DDX_Check
(
pDX
, 
IDC_CHECK_DC_OUT
, 
m_bDCOut
);

183 
	`DDX_Text
(
pDX
, 
IDC_EDIT_BPOINT_TR
, 
m_±BTR
);

184 
	`DDX_Text
(
pDX
, 
IDC_EDIT_BPOINT_RY
, 
m_±BRY
);

185 
	`DDX_Text
(
pDX
, 
IDC_EDIT_CPOINT_TR
, 
m_±CTR
);

186 
	`DDX_Text
(
pDX
, 
IDC_EDIT_CPOINT_RY
, 
m_±CRY
);

187 
	`DDX_Check
(
pDX
, 
IDC_CHECK_VB_GUARD_ON
, 
m_bVBGu¨dOn
);

188 
	`DDX_Check
(
pDX
, 
IDC_CHECK_VC_GUARD_ON
, 
m_bVCGu¨dOn
);

189 
	`DDX_Text
(
pDX
, 
IDC_EDIT_BPOINT_CC_V
, 
m_nBCCV
);

190 
	`DDX_Text
(
pDX
, 
IDC_EDIT_CPOINT_CC_V
, 
m_nCCCV
);

191 
	`DDX_Radio
(
pDX
, 
IDC_RADIO_BPOINT_CV
, 
m_nBCVC
);

192 
	`DDX_Radio
(
pDX
, 
IDC_RADIO_CPOINT_CV
, 
m_nCCVC
);

193 
	`DDX_Check
(
pDX
, 
IDC_CHECK_PULSE
, 
m_bPul£
);

194 
	`DDX_Radio
(
pDX
, 
IDC_RADIO_VCFFT
, 
m_nADC_B
);

195 
	`DDX_Radio
(
pDX
, 
IDC_RADIO_PFT_FAST
, 
m_nADC_A
);

196 
	`DDX_Radio
(
pDX
, 
IDC_RADIO_HVC
, 
m_nHLVC
);

197 
	`DDX_Radio
(
pDX
, 
IDC_RADIO_HVO_GAIN0
, 
m_nHVOGaö
);

198 
	`DDX_Radio
(
pDX
, 
IDC_RADIO_HVO_OFST0
, 
m_nHVOOff£t
);

199 
	`DDX_Radio
(
pDX
, 
IDC_RADIO_I_CC
, 
m_nICC
);

200 
	`DDX_Radio
(
pDX
, 
IDC_RADIO_LV1
, 
m_nVB
);

201 
	`DDX_Radio
(
pDX
, 
IDC_RADIO_PULSE_FREQ
, 
m_nPul£Fªq
);

202 
	`DDX_Radio
(
pDX
, 
IDC_RADIO_PULSE_MEASURE_CAV0
, 
m_nPul£Mó
);

203 
	`DDX_Radio
(
pDX
, 
IDC_RADIO_PULSE_VOLT
, 
m_nPul£Vﬁt
);

204 
	`DDX_Text
(
pDX
, 
IDC_EDIT_HV1_DA
, 
m_adcHV1
);

205 
	`DDX_Text
(
pDX
, 
IDC_EDIT_HV2_DA
, 
m_adcHV2
);

206 
	`DDX_Text
(
pDX
, 
IDC_EDIT_LV1_DA
, 
m_adcLV1
);

207 
	`DDX_Text
(
pDX
, 
IDC_EDIT_LV2_DA
, 
m_adcLV2
);

208 
	`DDX_Radio
(
pDX
, 
IDC_RADIO_I_RNG0
, 
m_nIRng
);

210 
	}
}

212 
	$BEGIN_MESSAGE_MAP
(
CV43M™uÆTe°Dlg
, 
CDülog
)

214 
	$ON_WM_SYSCOMMAND
()

215 
	$ON_WM_PAINT
()

216 
	$ON_WM_QUERYDRAGICON
()

217 
	$ON_WM_CTLCOLOR
()

218 
	$ON_WM_TIMER
()

219 
	$ON_BN_CLICKED
(
IDC_BUTTON_LV1_SET
, 
OnBuâ⁄Lv1Së
)

220 
	$ON_BN_CLICKED
(
IDC_BUTTON_LV2_SET
, 
OnBuâ⁄Lv2Së
)

221 
	$ON_BN_CLICKED
(
IDC_BUTTON_HV1_SET
, 
OnBuâ⁄Hv1Së
)

222 
	$ON_BN_CLICKED
(
IDC_BUTTON_HV2_SET
, 
OnBuâ⁄Hv2Së
)

223 
	$ON_EN_SETFOCUS
(
IDC_EDIT_LV1
, 
OnSëfocusEdôLv1
)

224 
	$ON_EN_SETFOCUS
(
IDC_EDIT_LV2
, 
OnSëfocusEdôLv2
)

225 
	$ON_EN_SETFOCUS
(
IDC_EDIT_HV1
, 
OnSëfocusEdôHv1
)

226 
	$ON_EN_SETFOCUS
(
IDC_EDIT_HV2
, 
OnSëfocusEdôHv2
)

227 
	$ON_EN_SETFOCUS
(
IDC_EDIT_I
, 
OnSëfocusEdôI
)

228 
	$ON_BN_CLICKED
(
IDC_BUTTON_I_SET
, 
OnBuâ⁄ISë
)

229 
	$ON_BN_CLICKED
(
IDC_RADIO_IFFT
, 
OnRadioIf·
)

230 
	$ON_BN_CLICKED
(
IDC_RADIO_ISFT
, 
OnRadioIs·
)

231 
	$ON_BN_CLICKED
(
IDC_RADIO_VBFT
, 
OnRadioVb·
)

232 
	$ON_BN_CLICKED
(
IDC_RADIO_HVC
, 
OnRadioHvc
)

233 
	$ON_BN_CLICKED
(
IDC_RADIO_LVC
, 
OnRadioLvc
)

234 
	$ON_BN_CLICKED
(
IDC_RADIO_VCFFT
, 
OnRadioVcf·
)

235 
	$ON_BN_CLICKED
(
IDC_RADIO_VCSFT
, 
OnRadioVcs·
)

236 
	$ON_LBN_DBLCLK
(
IDC_LIST_BPOINT
, 
OnDbl˛kLi°Bpoöt
)

237 
	$ON_EN_SETFOCUS
(
IDC_EDIT_BPIN
, 
OnSëfocusEdôBpö
)

238 
	$ON_LBN_DBLCLK
(
IDC_LIST_CPOINT
, 
OnDbl˛kLi°Cpoöt
)

239 
	$ON_EN_SETFOCUS
(
IDC_EDIT_CPIN
, 
OnSëfocusEdôCpö
)

240 
	$ON_BN_CLICKED
(
IDC_RADIO_LV1
, 
OnRadioLv1
)

241 
	$ON_BN_CLICKED
(
IDC_RADIO_LV2
, 
OnRadioLv2
)

242 
	$ON_BN_CLICKED
(
IDC_RADIO_HV1
, 
OnRadioHv1
)

243 
	$ON_BN_CLICKED
(
IDC_RADIO_HV2
, 
OnRadioHv2
)

244 
	$ON_BN_CLICKED
(
IDC_BUTTON_BREAK
, 
OnBuâ⁄Bªak
)

245 
	$ON_BN_CLICKED
(
IDC_BUTTON_POINT_SET
, 
OnBuâ⁄PoötSë
)

246 
	$ON_BN_CLICKED
(
IDC_BUTTON_BOX_RST
, 
OnBuâ⁄BoxR°
)

247 
	$ON_BN_CLICKED
(
IDC_BUTTON_AD_READ
, 
OnBuâ⁄AdRód
)

248 
	$ON_EN_SETFOCUS
(
IDC_EDIT_QM_BPOINT
, 
OnSëfocusEdôQmBpoöt
)

249 
	$ON_EN_SETFOCUS
(
IDC_EDIT_QM_CPOINT
, 
OnSëfocusEdôQmCpoöt
)

250 
	$ON_WM_SHOWWINDOW
()

251 
	$ON_BN_CLICKED
(
IDC_BUTTON_VB_OUT_SET
, 
OnBuâ⁄VbOutSë
)

252 
	$ON_BN_CLICKED
(
IDC_BUTTON_SPARK_SET
, 
OnBuâ⁄S∑rkSë
)

253 
	$ON_EN_SETFOCUS
(
IDC_EDIT_SPARK
, 
OnSëfocusEdôS∑rk
)

254 
	$ON_BN_CLICKED
(
IDC_CHECK_SPARK_ON
, 
OnCheckS∑rkOn
)

255 
	$ON_BN_CLICKED
(
IDC_RADIO_PULSE
, 
OnRadioPul£
)

256 
	$ON_BN_CLICKED
(
IDC_CHECK_DC_OUT
, 
OnCheckDcOut
)

257 
	$ON_BN_CLICKED
(
IDC_RADIO_PFT_FAST
, 
OnRadioP·Fa°
)

258 
	$ON_BN_CLICKED
(
IDC_RADIO_PFT_SLOW
, 
OnRadioP·Slow
)

259 
	$ON_BN_CLICKED
(
IDC_RADIO_PULSE_VOLT
, 
OnRadioPul£Vﬁt
)

260 
	$ON_BN_CLICKED
(
IDC_RADIO_PULSE_VOLT1
, 
OnRadioPul£Vﬁt1
)

261 
	$ON_BN_CLICKED
(
IDC_RADIO_PULSE_VOLT2
, 
OnRadioPul£Vﬁt2
)

262 
	$ON_BN_CLICKED
(
IDC_RADIO_PULSE_VOLT3
, 
OnRadioPul£Vﬁt3
)

263 
	$ON_BN_CLICKED
(
IDC_RADIO_PULSE_FREQ
, 
OnRadioPul£Fªq
)

264 
	$ON_BN_CLICKED
(
IDC_RADIO_PULSE_FREQ1
, 
OnRadioPul£Fªq1
)

265 
	$ON_BN_CLICKED
(
IDC_RADIO_PULSE_FREQ2
, 
OnRadioPul£Fªq2
)

266 
	$ON_BN_CLICKED
(
IDC_RADIO_PULSE_FREQ3
, 
OnRadioPul£Fªq3
)

267 
	$ON_BN_CLICKED
(
IDC_RADIO_PULSE_MEASURE_CAV0
, 
OnRadioPul£MósuªCav0
)

268 
	$ON_BN_CLICKED
(
IDC_RADIO_PULSE_MEASURE_CAV1
, 
OnRadioPul£MósuªCav1
)

269 
	$ON_BN_CLICKED
(
IDC_RADIO_PULSE_MEASURE_CAV2
, 
OnRadioPul£MósuªCav2
)

270 
	$ON_BN_CLICKED
(
IDC_RADIO_PULSE_MEASURE_CAV3
, 
OnRadioPul£MósuªCav3
)

271 
	$ON_BN_CLICKED
(
IDC_RADIO_I_RNG0
, 
OnRadioIRng0
)

272 
	$ON_BN_CLICKED
(
IDC_RADIO_I_RNG1
, 
OnRadioIRng1
)

273 
	$ON_BN_CLICKED
(
IDC_RADIO_I_RNG2
, 
OnRadioIRng2
)

274 
	$ON_BN_CLICKED
(
IDC_RADIO_I_RNG3
, 
OnRadioIRng3
)

275 
	$ON_BN_CLICKED
(
IDC_RADIO_I_RNG4
, 
OnRadioIRng4
)

276 
	$ON_BN_CLICKED
(
IDC_RADIO_I_RNG5
, 
OnRadioIRng5
)

277 
	$ON_BN_CLICKED
(
IDC_RADIO_I_RNG6
, 
OnRadioIRng6
)

278 
	$ON_BN_CLICKED
(
IDC_RADIO_I_CC
, 
OnRadioICc
)

279 
	$ON_BN_CLICKED
(
IDC_RADIO_I_CV
, 
OnRadioICv
)

280 
	$ON_BN_CLICKED
(
IDC_CHECK_I_HIGH_GAIN
, 
OnCheckIHighGaö
)

281 
	$ON_BN_CLICKED
(
IDC_RADIO_HVO_GAIN0
, 
OnRadioHvoGaö0
)

282 
	$ON_BN_CLICKED
(
IDC_RADIO_HVO_GAIN1
, 
OnRadioHvoGaö1
)

283 
	$ON_BN_CLICKED
(
IDC_RADIO_HVO_GAIN2
, 
OnRadioHvoGaö2
)

284 
	$ON_BN_CLICKED
(
IDC_RADIO_HVO_GAIN3
, 
OnRadioHvoGaö3
)

285 
	$ON_BN_CLICKED
(
IDC_RADIO_HVO_OFST0
, 
OnRadioHvoOf°0
)

286 
	$ON_BN_CLICKED
(
IDC_RADIO_HVO_OFST1
, 
OnRadioHvoOf°1
)

287 
	$ON_BN_CLICKED
(
IDC_RADIO_HVO_OFST2
, 
OnRadioHvoOf°2
)

288 
	$ON_BN_CLICKED
(
IDC_RADIO_HVO_OFST3
, 
OnRadioHvoOf°3
)

289 
	$ON_BN_CLICKED
(
IDC_CHECK_FW_HIGH_GAIN
, 
OnCheckFwHighGaö
)

290 
	$ON_BN_CLICKED
(
IDC_BUTTON_BPOINT_TR_SET
, 
OnBuâ⁄BpoötTrSë
)

291 
	$ON_BN_CLICKED
(
IDC_BUTTON_BPOINT_TR_RST
, 
OnBuâ⁄BpoötTrR°
)

292 
	$ON_BN_CLICKED
(
IDC_BUTTON_BPOINT_RY_SET
, 
OnBuâ⁄BpoötRySë
)

293 
	$ON_BN_CLICKED
(
IDC_BUTTON_BPOINT_RY_RST
, 
OnBuâ⁄BpoötRyR°
)

294 
	$ON_EN_SETFOCUS
(
IDC_EDIT_BPOINT_TR
, 
OnSëfocusEdôBpoötTr
)

295 
	$ON_EN_SETFOCUS
(
IDC_EDIT_BPOINT_RY
, 
OnSëfocusEdôBpoötRy
)

296 
	$ON_EN_SETFOCUS
(
IDC_EDIT_CPOINT_TR
, 
OnSëfocusEdôCpoötTr
)

297 
	$ON_EN_SETFOCUS
(
IDC_EDIT_CPOINT_RY
, 
OnSëfocusEdôCpoötRy
)

298 
	$ON_BN_CLICKED
(
IDC_BUTTON_CPOINT_TR_SET
, 
OnBuâ⁄CpoötTrSë
)

299 
	$ON_BN_CLICKED
(
IDC_BUTTON_CPOINT_TR_RST
, 
OnBuâ⁄CpoötTrR°
)

300 
	$ON_BN_CLICKED
(
IDC_BUTTON_CPOINT_RY_SET
, 
OnBuâ⁄CpoötRySë
)

301 
	$ON_BN_CLICKED
(
IDC_BUTTON_CPOINT_RY_RST
, 
OnBuâ⁄CpoötRyR°
)

302 
	$ON_BN_CLICKED
(
IDC_RADIO_BCPLD0
, 
OnRadioB˝ld0
)

303 
	$ON_BN_CLICKED
(
IDC_RADIO_BCPLD1
, 
OnRadioB˝ld1
)

304 
	$ON_BN_CLICKED
(
IDC_RADIO_BCPLD2
, 
OnRadioB˝ld2
)

305 
	$ON_BN_CLICKED
(
IDC_RADIO_BCPLD3
, 
OnRadioB˝ld3
)

306 
	$ON_BN_CLICKED
(
IDC_RADIO_CCPLD0
, 
OnRadioC˝ld0
)

307 
	$ON_BN_CLICKED
(
IDC_RADIO_CCPLD1
, 
OnRadioC˝ld1
)

308 
	$ON_BN_CLICKED
(
IDC_RADIO_CCPLD2
, 
OnRadioC˝ld2
)

309 
	$ON_BN_CLICKED
(
IDC_RADIO_CCPLD3
, 
OnRadioC˝ld3
)

310 
	$ON_EN_SETFOCUS
(
IDC_EDIT_BPOINT_CC_V
, 
OnSëfocusEdôBpoötCcV
)

311 
	$ON_EN_SETFOCUS
(
IDC_EDIT_CPOINT_CC_V
, 
OnSëfocusEdôCpoötCcV
)

312 
	$ON_BN_CLICKED
(
IDC_RADIO_BPOINT_CV
, 
OnRadioBpoötCv
)

313 
	$ON_BN_CLICKED
(
IDC_RADIO_BPOINT_CC
, 
OnRadioBpoötCc
)

314 
	$ON_BN_CLICKED
(
IDC_RADIO_CPOINT_CV
, 
OnRadioCpoötCv
)

315 
	$ON_BN_CLICKED
(
IDC_RADIO_CPOINT_CC
, 
OnRadioCpoötCc
)

316 
	$ON_BN_CLICKED
(
IDC_CHECK_VB_GUARD_ON
, 
OnCheckVbGu¨dOn
)

317 
	$ON_BN_CLICKED
(
IDC_CHECK_VC_GUARD_ON
, 
OnCheckVcGu¨dOn
)

318 
	$ON_BN_CLICKED
(
IDC_BUTTON_BPOINT_CCV_SET
, 
OnBuâ⁄BpoötCcvSë
)

319 
	$ON_BN_CLICKED
(
IDC_BUTTON_CPOINT_CCV_SET
, 
OnBuâ⁄CpoötCcvSë
)

320 
	$ON_BN_CLICKED
(
IDC_CHECK_PULSE
, 
OnCheckPul£
)

321 
	$ON_BN_CLICKED
(
IDC_RADIO_HVOFT
, 
OnRadioHvo·
)

322 
	$ON_BN_CLICKED
(
IDC_RADIO_FWFT
, 
OnRadioFw·
)

323 
	$ON_BN_CLICKED
(
IDC_BUTTON_INIT
, 
OnBuâ⁄Inô
)

324 
	$ON_BN_CLICKED
(
IDC_RADIO_PULSE_FREQ
, 
OnRadioPul£Fªq
)

326 
	$END_MESSAGE_MAP
()

328 
	$BEGIN_EVENTSINK_MAP
(
CV43M™uÆTe°Dlg
, 
CDülog
)

331 
	$END_EVENTSINK_MAP
()

336 
BOOL
 
CV43M™uÆTe°Dlg
::
	$OnInôDülog
()

338 
CDülog
::
	`OnInôDülog
();

343 
	`ASSERT
((
IDM_ABOUTBOX
 & 0xFFF0) == IDM_ABOUTBOX);

344 
	`ASSERT
(
IDM_ABOUTBOX
 < 0xF000);

346 
CMíu
* 
pSysMíu
 = 
	`GëSy°emMíu
(
FALSE
);

347 i‡(
pSysMíu
 !
NULL
)

349 
CSåög
 
°rAboutMíu
;

350 
°rAboutMíu
.
	`LﬂdSåög
(
IDS_ABOUTBOX
);

351 i‡(!
°rAboutMíu
.
	`IsEm±y
())

353 
pSysMíu
->
	`AµídMíu
(
MF_SEPARATOR
);

354 
pSysMíu
->
	`AµídMíu
(
MF_STRING
, 
IDM_ABOUTBOX
, 
°rAboutMíu
);

360 
	`SëIc⁄
(
m_hIc⁄
, 
TRUE
);

361 
	`SëIc⁄
(
m_hIc⁄
, 
FALSE
);

363 
	`InôMŸi⁄
();

365  
TRUE
;

366 
	}
}

368 
	gCV43M™uÆTe°Dlg
::
	$OnSysComm™d
(
UINT
 
nID
, 
LPARAM
 
lP¨am
)

370 i‡((
nID
 & 0xFFF0Ë=
IDM_ABOUTBOX
)

372 
CAboutDlg
 
dlgAbout
;

373 
dlgAbout
.
	`DoModÆ
();

377 
CDülog
::
	`OnSysComm™d
(
nID
, 
lP¨am
);

379 
	}
}

385 
	gCV43M™uÆTe°Dlg
::
	$OnPaöt
()

387 i‡(
	`IsIc⁄ic
())

389 
CPaötDC
 
	`dc
(
this
);

391 
	`SídMesßge
(
WM_ICONERASEBKGND
, (
WPARAM
Ë
dc
.
	`GëSa„Hdc
(), 0);

394 
cxIc⁄
 = 
	`GëSy°emMërics
(
SM_CXICON
);

395 
cyIc⁄
 = 
	`GëSy°emMërics
(
SM_CYICON
);

396 
CRe˘
 
ª˘
;

397 
	`GëClõ¡Re˘
(&
ª˘
);

398 
x
 = (
ª˘
.
	`Width
(Ë- 
cxIc⁄
 + 1) / 2;

399 
y
 = (
ª˘
.
	`Height
(Ë- 
cyIc⁄
 + 1) / 2;

402 
dc
.
	`DøwIc⁄
(
x
, 
y
, 
m_hIc⁄
);

406 
CDülog
::
	`OnPaöt
();

408 
	}
}

412 
HCURSOR
 
	gCV43M™uÆTe°Dlg
::
	$OnQuîyDøgIc⁄
()

414  (
HCURSOR
Ë
m_hIc⁄
;

415 
	}
}

417 
HBRUSH
 
	gCV43M™uÆTe°Dlg
::
	$OnCéCﬁ‹
(
CDC
* 
pDC
, 
CWnd
* 
pWnd
, 
UINT
 
nCéCﬁ‹
)

419 
HBRUSH
 
hbr
 = 
CDülog
::
	`OnCéCﬁ‹
(
pDC
, 
pWnd
, 
nCéCﬁ‹
);

430  
hbr
;

431 
	}
}

433 
BOOL
 
	gCV43M™uÆTe°Dlg
::
	$PªTøn¶©eMesßge
(
MSG
* 
pMsg
)

435 i‡((
pMsg
->
mesßge
 =
WM_KEYDOWN
)

436 && (
pMsg
->
wP¨am
 =
VK_RETURN
 ||ÖMsg->wP¨am =
VK_ESCAPE
)) {

437  
TRUE
;

440  
CDülog
::
	`PªTøn¶©eMesßge
(
pMsg
);

441 
	}
}

443 
	gCV43M™uÆTe°Dlg
::
	$OnShowWödow
(
BOOL
 
bShow
, 
UINT
 
nSètus
)

445 
CDülog
::
	`OnShowWödow
(
bShow
, 
nSètus
);

447 if(
bShow
 =
TRUE
){

448 
	`InôMembî
();

449 
	`InôVõw
();

451 
	`SëTimî
(0, 200, 
NULL
);

454 
	`KûlTimî
(0);

456 
	}
}

458 
	gCV43M™uÆTe°Dlg
::
	$OnTimî
(
UINT
 
nIDEvít
)

460 if(
nIDEvít
 == 0)

462 
	`CÆcPoöt
();

463 
	`Re‰eshVõw
();

466 
CDülog
::
	`OnTimî
(
nIDEvít
);

467 
	}
}

470 
	gCV43M™uÆTe°Dlg
::
	$InôMembî
()

472 
m_nLV1
 = 0;

473 
m_nLV2
 = 0;

474 
m_nHV1
 = 0;

475 
m_nHV2
 = 0;

476 
m_nI
 = 0;

477 
m_nBPö
 = 0;

478 
m_nCPö
 = 0;

479 
m_nBBox
 = 0;

480 
m_nCBox
 = 0;

481 
m_nBPCBE«bÀ
 = 0;

482 
m_nCPCBE«bÀ
 = 0;

483 
m_nBCPLD
 = 0;

484 
m_nCCPLD
 = 0;

485 
m_nBPCB0
 = 
FALSE
;

486 
m_nBPCB1
 = 
FALSE
;

487 
m_nBPCB2
 = 
FALSE
;

488 
m_nBPCB3
 = 
FALSE
;

489 
m_nBPö0
 = 
FALSE
;

490 
m_nBPö1
 = 
FALSE
;

491 
m_nBPö2
 = 
FALSE
;

492 
m_nBPö3
 = 
FALSE
;

493 
m_nBPö4
 = 
FALSE
;

494 
m_nBPö5
 = 
FALSE
;

495 
m_nCPCB0
 = 
FALSE
;

496 
m_nCPCB1
 = 
FALSE
;

497 
m_nCPCB2
 = 
FALSE
;

498 
m_nCPCB3
 = 
FALSE
;

499 
m_nCPö0
 = 
FALSE
;

500 
m_nCPö1
 = 
FALSE
;

501 
m_nCPö2
 = 
FALSE
;

502 
m_nCPö3
 = 
FALSE
;

503 
m_nCPö4
 = 
FALSE
;

504 
m_nCPö5
 = 
FALSE
;

505 
m_nS∑rkOn
 = 
FALSE
;

506 
m_nS∑rk
 = 0;

507 
m_bIHighGaöMode
 = 
FALSE
;

508 
m_bFWHighGaöMode
 = 
FALSE
;

509 
m_bDCOut
 = 
FALSE
;

510 
m_±BTR
 = 0;

511 
m_±BRY
 = 0;

512 
m_±CTR
 = 0;

513 
m_±CRY
 = 0;

514 
m_bVBGu¨dOn
 = 
FALSE
;

515 
m_bVCGu¨dOn
 = 
FALSE
;

516 
m_nBCCV
 = 0;

517 
m_nCCCV
 = 0;

518 
m_nBCVC
 = 0;

519 
m_nCCVC
 = 0;

520 
m_bPul£
 = 
FALSE
;

521 
m_nADC_B
 = -1;

522 
m_nADC_A
 = -1;

523 
m_nHLVC
 = -1;

524 
m_nHVOGaö
 = -1;

525 
m_nHVOOff£t
 = -1;

526 
m_nICC
 = 0;

527 
m_nVB
 = -1;

528 
m_nPul£Fªq
 = -1;

529 
m_nPul£Mó
 = -1;

530 
m_nPul£Vﬁt
 = -1;

531 
m_adcHV1
 = 0;

532 
m_adcHV2
 = 0;

533 
m_adcLV1
 = 0;

534 
m_adcLV2
 = 0;

535 
m_nIRng
 = -1;

536 
m_li°BPoöt
.
	`Re£tC⁄ã¡
();

537 
m_li°CPoöt
.
	`Re£tC⁄ã¡
();

539 
m_bBTRY
 = 
m_bCTRY
 = 
TR
;

540 
m_nBPCB
 = 
m_nCPCB
 = 
m_nIR™ge
 = 0;

541 
m_nIadvÆue
 = 
m_nVadvÆue
 = 0;

542 
m_dVvﬁt
 = 
m_dIamp
 = 
m_dRohm
 = 0;

544 
	`Upd©eD©a
(
FALSE
);

545 
	}
}

547 
	gCV43M™uÆTe°Dlg
::
	$InôVõw
()

549 
CBrush
 
brush
 = brush.
	`Cª©eStockObje˘
(
HOLLOW_BRUSH
);

550 
CF⁄t
 *
pF⁄t300
 = 
√w
 
	`CF⁄t
();

551 
CF⁄t
 *
pF⁄t240
 = 
√w
 
	`CF⁄t
();

552 
CF⁄t
 *
pF⁄t200
 = 
√w
 
	`CF⁄t
();

553 
CF⁄t
 *
pF⁄t100
 = 
√w
 
	`CF⁄t
();

555 
pF⁄t300
->
	`Cª©ePoötF⁄t
(300, 
	`_T
("Arial"));

556 
pF⁄t240
->
	`Cª©ePoötF⁄t
(240, 
	`_T
("Arial"));

557 
pF⁄t200
->
	`Cª©ePoötF⁄t
(200, 
	`_T
("Arial"));

558 
pF⁄t100
->
	`Cª©ePoötF⁄t
(100, 
	`_T
("Arial"));

560 
	`GëDlgIãm
(
IDC_STATIC_I
)->
	`SëF⁄t
(
pF⁄t240
, 
TRUE
);

561 
	`GëDlgIãm
(
IDC_STATIC_V
)->
	`SëF⁄t
(
pF⁄t240
, 
TRUE
);

562 
	`GëDlgIãm
(
IDC_STATIC_R
)->
	`SëF⁄t
(
pF⁄t240
, 
TRUE
);

564 
	`GëDlgIãm
(
IDC_STATIC_QM_I_UNIT
)->
	`SëF⁄t
(
pF⁄t100
, 
TRUE
);

565 
	`GëDlgIãm
(
IDC_STATIC_QM_V_UNIT
)->
	`SëF⁄t
(
pF⁄t100
, 
TRUE
);

566 
	`GëDlgIãm
(
IDC_STATIC_QM_R_UNIT
)->
	`SëF⁄t
(
pF⁄t100
, 
TRUE
);

568 
	`GëDlgIãm
(
IDC_STATIC_QM_I_ADVALUE
)->
	`SëF⁄t
(
pF⁄t200
, 
TRUE
);

569 
	`GëDlgIãm
(
IDC_STATIC_QM_V_ADVALUE
)->
	`SëF⁄t
(
pF⁄t200
, 
TRUE
);

571 
	`GëDlgIãm
(
IDC_EDIT_QM_BPOINT
)->
	`SëF⁄t
(
pF⁄t200
, 
TRUE
);

572 
	`GëDlgIãm
(
IDC_EDIT_QM_CPOINT
)->
	`SëF⁄t
(
pF⁄t200
, 
TRUE
);

574 
dñëe
 
pF⁄t300
, 
pF⁄t240
, 
pF⁄t200
, 
pF⁄t100
;

575 
	}
}

577 
	gCV43M™uÆTe°Dlg
::
	$Re‰eshVõw
(
CWnd
 *
pWnd
)

579 
	`Upd©eD©a
(
TRUE
);

580 if(
pWnd
 !
NULL
ËpWnd->
	`E«bÀWödow
(
TRUE
);

582 
CSåög
 
°rTemp
;

584 
m_nIR™ge
)

586 
I_RANGE0
:

587 
I_RANGE1
:

588 
I_RANGE2
:

589 
	`GëDlgIãm
(
IDC_STATIC_I_UNIT
)->
	`SëWödowText
("mA");

592 
I_RANGE3
:

593 
I_RANGE4
:

594 
I_RANGE5
:

595 
	`GëDlgIãm
(
IDC_STATIC_I_UNIT
)->
	`SëWödowText
("uA");

598 
I_RANGE6
:

600 
	`GëDlgIãm
(
IDC_STATIC_I_UNIT
)->
	`SëWödowText
("ADC");

604 
m_nIR™ge
)

606 
I_RANGE0
:

607 
I_RANGE1
:

608 
I_RANGE2
:

609 
	`GëDlgIãm
(
IDC_STATIC_QM_I_UNIT
)->
	`SëWödowText
("mA");

610 
	`GëDlgIãm
(
IDC_STATIC_QM_V_UNIT
)->
	`SëWödowText
("V");

611 
	`GëDlgIãm
(
IDC_STATIC_QM_R_UNIT
)->
	`SëWödowText
("K-ohm");

614 
I_RANGE3
:

615 
I_RANGE4
:

616 
I_RANGE5
:

617 
	`GëDlgIãm
(
IDC_STATIC_QM_I_UNIT
)->
	`SëWödowText
("uA");

618 
	`GëDlgIãm
(
IDC_STATIC_QM_V_UNIT
)->
	`SëWödowText
("V");

619 
	`GëDlgIãm
(
IDC_STATIC_QM_R_UNIT
)->
	`SëWödowText
("M-ohm");

622 
I_RANGE6
:

624 
	`GëDlgIãm
(
IDC_STATIC_QM_I_UNIT
)->
	`SëWödowText
("uA");

625 
	`GëDlgIãm
(
IDC_STATIC_QM_V_UNIT
)->
	`SëWödowText
("V");

626 
	`GëDlgIãm
(
IDC_STATIC_QM_R_UNIT
)->
	`SëWödowText
("M-ohm");

654 
°rTemp
.
	`F‹m©
("%d", 
m_nIadvÆue
);

655 
	`GëDlgIãm
(
IDC_STATIC_QM_I_ADVALUE
)->
	`SëWödowText
(
°rTemp
);

656 
°rTemp
.
	`F‹m©
("%d", 
m_nVadvÆue
);

657 
	`GëDlgIãm
(
IDC_STATIC_QM_V_ADVALUE
)->
	`SëWödowText
(
°rTemp
);

660 if(
m_nADC_A
 == 0 || m_nADC_A == 1)

662 
m_lbIamp
.
	`SëC≠ti⁄
("0.000");

663 
m_lbIamp
.
	`E«bÀWödow
(
FALSE
);

667 if(
m_bIHighGaöMode
 =
TRUE
Ë
°rTemp
.
	`F‹m©
("%.3f", 
m_dIamp
/10);

668 
°rTemp
.
	`F‹m©
("%.3f", 
m_dIamp
);

669 
m_lbIamp
.
	`SëC≠ti⁄
(
°rTemp
);

670 
m_lbIamp
.
	`E«bÀWödow
(
TRUE
);

674 if(
m_nADC_B
 == 2)

676 
m_lbVvﬁt
.
	`SëC≠ti⁄
("0.000");

677 
m_lbVvﬁt
.
	`E«bÀWödow
(
FALSE
);

681 
°rTemp
.
	`F‹m©
("%.3f", 
m_dVvﬁt
);

682 
m_lbVvﬁt
.
	`SëC≠ti⁄
(
°rTemp
);

683 
m_lbVvﬁt
.
	`E«bÀWödow
(
TRUE
);

686 
°rTemp
="0.0";

687 
m_nVB
)

690 
	`GëDlgIãm
(
IDC_STATIC_LV1_MNT
)->
	`GëWödowText
(
°rTemp
);

694 
	`GëDlgIãm
(
IDC_STATIC_LV2_MNT
)->
	`GëWödowText
(
°rTemp
);

698 
	`GëDlgIãm
(
IDC_STATIC_HV1_MNT
)->
	`GëWödowText
(
°rTemp
);

702 
	`GëDlgIãm
(
IDC_STATIC_HV2_MNT
)->
	`GëWödowText
(
°rTemp
);

710 
dVBVﬁt
 = 
	`©of
(
°rTemp
);

711 if(
dVBVﬁt
 !=0 && 
m_dIamp
 != 0)

713 
m_dRohm
 = ()(
dVBVﬁt
 - 
m_dVvﬁt
)/
m_dIamp
;

715 
m_dRohm
>0 && m_dRohm<1)

717 
m_dRohm
 *= 1000;

719 ((
CWnd
*)
	`GëDlgIãm
(
IDC_STATIC_QM_R_UNIT
))->
	`GëWödowText
(
°rTemp
);

720 if(
°rTemp
 ="M-ohm"Ë((
CWnd
*)
	`GëDlgIãm
(
IDC_STATIC_QM_R_UNIT
))->
	`SëWödowText
("K-ohm");

721 if(
°rTemp
 ="K-ohm"Ë((
CWnd
*)
	`GëDlgIãm
(
IDC_STATIC_QM_R_UNIT
))->
	`SëWödowText
( "ohm");

722 if(
°rTemp
 ="ohm"Ë((
CWnd
*)
	`GëDlgIãm
(
IDC_STATIC_QM_R_UNIT
))->
	`SëWödowText
("m-ohm");

723 if(
°rTemp
 ="m-ohm"Ë((
CWnd
*)
	`GëDlgIãm
(
IDC_STATIC_QM_R_UNIT
))->
	`SëWödowText
("u-ohm");

724 if(
°rTemp
 ="u-ohm"Ë((
CWnd
*)
	`GëDlgIãm
(
IDC_STATIC_QM_R_UNIT
))->
	`SëWödowText
("n-ohm");

727 
m_dRohm
>=1000)

729 
m_dRohm
 /= 1000;

731 ((
CWnd
*)
	`GëDlgIãm
(
IDC_STATIC_QM_R_UNIT
))->
	`GëWödowText
(
°rTemp
);

732 if(
°rTemp
 ="M-ohm"Ë((
CWnd
*)
	`GëDlgIãm
(
IDC_STATIC_QM_R_UNIT
))->
	`SëWödowText
("G-ohm");

733 if(
°rTemp
 ="K-ohm"Ë((
CWnd
*)
	`GëDlgIãm
(
IDC_STATIC_QM_R_UNIT
))->
	`SëWödowText
("M-ohm");

734 if(
°rTemp
 ="ohm"Ë((
CWnd
*)
	`GëDlgIãm
(
IDC_STATIC_QM_R_UNIT
))->
	`SëWödowText
("K-ohm");

735 if(
°rTemp
 ="m-ohm"Ë((
CWnd
*)
	`GëDlgIãm
(
IDC_STATIC_QM_R_UNIT
))->
	`SëWödowText
( "ohm");

736 if(
°rTemp
 ="u-ohm"Ë((
CWnd
*)
	`GëDlgIãm
(
IDC_STATIC_QM_R_UNIT
))->
	`SëWödowText
("m-ohm");

739 
m_dRohm
 = 0;

742 
°rTemp
.
	`F‹m©
("%.3f", 
m_dRohm
);

743 
m_lbRohm
.
	`SëC≠ti⁄
(
°rTemp
);

745 
°rTemp
.
	`F‹m©
("%d", 
m_±BTR
);

746 
	`GëDlgIãm
(
IDC_EDIT_QM_BPOINT
)->
	`SëWödowText
(
°rTemp
);

748 
°rTemp
.
	`F‹m©
("%d", 
m_±CTR
);

749 
	`GëDlgIãm
(
IDC_EDIT_QM_CPOINT
)->
	`SëWödowText
(
°rTemp
);

753 if(
m_nS∑rkOn
)

755 
	`GëDlgIãm
(
IDC_EDIT_SPARK
)->
	`E«bÀWödow
(
TRUE
);

756 
	`GëDlgIãm
(
IDC_BUTTON_SPARK_SET
)->
	`E«bÀWödow
(
TRUE
);

760 
	`GëDlgIãm
(
IDC_EDIT_SPARK
)->
	`E«bÀWödow
(
FALSE
);

761 
	`GëDlgIãm
(
IDC_BUTTON_SPARK_SET
)->
	`E«bÀWödow
(
FALSE
);

764 if(
m_bPul£
)

766 
	`GëDlgIãm
(
IDC_RADIO_PULSE_FREQ
)->
	`E«bÀWödow
(
TRUE
);

767 
	`GëDlgIãm
(
IDC_RADIO_PULSE_FREQ1
)->
	`E«bÀWödow
(
TRUE
);

768 
	`GëDlgIãm
(
IDC_RADIO_PULSE_FREQ2
)->
	`E«bÀWödow
(
TRUE
);

769 
	`GëDlgIãm
(
IDC_RADIO_PULSE_FREQ3
)->
	`E«bÀWödow
(
TRUE
);

770 
	`GëDlgIãm
(
IDC_RADIO_PULSE_VOLT
)->
	`E«bÀWödow
(
TRUE
);

771 
	`GëDlgIãm
(
IDC_RADIO_PULSE_VOLT1
)->
	`E«bÀWödow
(
TRUE
);

772 
	`GëDlgIãm
(
IDC_RADIO_PULSE_VOLT2
)->
	`E«bÀWödow
(
TRUE
);

773 
	`GëDlgIãm
(
IDC_RADIO_PULSE_VOLT3
)->
	`E«bÀWödow
(
TRUE
);

777 
	`GëDlgIãm
(
IDC_RADIO_PULSE_FREQ
)->
	`E«bÀWödow
(
FALSE
);

778 
	`GëDlgIãm
(
IDC_RADIO_PULSE_FREQ1
)->
	`E«bÀWödow
(
FALSE
);

779 
	`GëDlgIãm
(
IDC_RADIO_PULSE_FREQ2
)->
	`E«bÀWödow
(
FALSE
);

780 
	`GëDlgIãm
(
IDC_RADIO_PULSE_FREQ3
)->
	`E«bÀWödow
(
FALSE
);

781 
	`GëDlgIãm
(
IDC_RADIO_PULSE_VOLT
)->
	`E«bÀWödow
(
FALSE
);

782 
	`GëDlgIãm
(
IDC_RADIO_PULSE_VOLT1
)->
	`E«bÀWödow
(
FALSE
);

783 
	`GëDlgIãm
(
IDC_RADIO_PULSE_VOLT2
)->
	`E«bÀWödow
(
FALSE
);

784 
	`GëDlgIãm
(
IDC_RADIO_PULSE_VOLT3
)->
	`E«bÀWödow
(
FALSE
);

787 if(
m_bBTRY
 =
TR
)

789 
	`GëDlgIãm
(
IDC_STATIC_BTR
)->
	`E«bÀWödow
(
TRUE
);

790 
	`GëDlgIãm
(
IDC_STATIC_BRY
)->
	`E«bÀWödow
(
FALSE
);

792 if(
m_bBTRY
 =
RY
)

794 
	`GëDlgIãm
(
IDC_STATIC_BTR
)->
	`E«bÀWödow
(
FALSE
);

795 
	`GëDlgIãm
(
IDC_STATIC_BRY
)->
	`E«bÀWödow
(
TRUE
);

798 if(
m_bCTRY
 =
TR
)

800 
	`GëDlgIãm
(
IDC_STATIC_CTR
)->
	`E«bÀWödow
(
TRUE
);

801 
	`GëDlgIãm
(
IDC_STATIC_CRY
)->
	`E«bÀWödow
(
FALSE
);

803 if(
m_bCTRY
 =
RY
)

805 
	`GëDlgIãm
(
IDC_STATIC_CTR
)->
	`E«bÀWödow
(
FALSE
);

806 
	`GëDlgIãm
(
IDC_STATIC_CRY
)->
	`E«bÀWödow
(
TRUE
);

809 
m_nADC_A
)

813 
	`GëDlgIãm
(
IDC_RADIO_PULSE_MEASURE_CAV0
)->
	`E«bÀWödow
(
TRUE
);

814 
	`GëDlgIãm
(
IDC_RADIO_PULSE_MEASURE_CAV1
)->
	`E«bÀWödow
(
TRUE
);

815 
	`GëDlgIãm
(
IDC_RADIO_PULSE_MEASURE_CAV2
)->
	`E«bÀWödow
(
TRUE
);

816 
	`GëDlgIãm
(
IDC_RADIO_PULSE_MEASURE_CAV3
)->
	`E«bÀWödow
(
TRUE
);

817 
	`GëDlgIãm
(
IDC_RADIO_I_RNG0
)->
	`E«bÀWödow
(
TRUE
);

818 
	`GëDlgIãm
(
IDC_RADIO_I_RNG1
)->
	`E«bÀWödow
(
TRUE
);

819 
	`GëDlgIãm
(
IDC_RADIO_I_RNG2
)->
	`E«bÀWödow
(
TRUE
);

820 
	`GëDlgIãm
(
IDC_RADIO_I_RNG3
)->
	`E«bÀWödow
(
TRUE
);

821 
	`GëDlgIãm
(
IDC_RADIO_I_RNG4
)->
	`E«bÀWödow
(
TRUE
);

822 
	`GëDlgIãm
(
IDC_RADIO_I_RNG5
)->
	`E«bÀWödow
(
TRUE
);

823 
	`GëDlgIãm
(
IDC_RADIO_I_RNG6
)->
	`E«bÀWödow
(
TRUE
);

824 
	`GëDlgIãm
(
IDC_EDIT_I
)->
	`E«bÀWödow
(
TRUE
);

825 
	`GëDlgIãm
(
IDC_STATIC_I_ADC
)->
	`E«bÀWödow
(
TRUE
);

826 
	`GëDlgIãm
(
IDC_BUTTON_I_SET
)->
	`E«bÀWödow
(
TRUE
);

827 
	`GëDlgIãm
(
IDC_RADIO_I_CC
)->
	`E«bÀWödow
(
TRUE
);

828 
	`GëDlgIãm
(
IDC_RADIO_I_CV
)->
	`E«bÀWödow
(
TRUE
);

829 
	`GëDlgIãm
(
IDC_CHECK_I_HIGH_GAIN
)->
	`E«bÀWödow
(
TRUE
);

834 
	`GëDlgIãm
(
IDC_RADIO_PULSE_MEASURE_CAV0
)->
	`E«bÀWödow
(
FALSE
);

835 
	`GëDlgIãm
(
IDC_RADIO_PULSE_MEASURE_CAV1
)->
	`E«bÀWödow
(
FALSE
);

836 
	`GëDlgIãm
(
IDC_RADIO_PULSE_MEASURE_CAV2
)->
	`E«bÀWödow
(
FALSE
);

837 
	`GëDlgIãm
(
IDC_RADIO_PULSE_MEASURE_CAV3
)->
	`E«bÀWödow
(
FALSE
);

838 
	`GëDlgIãm
(
IDC_RADIO_I_RNG0
)->
	`E«bÀWödow
(
TRUE
);

839 
	`GëDlgIãm
(
IDC_RADIO_I_RNG1
)->
	`E«bÀWödow
(
TRUE
);

840 
	`GëDlgIãm
(
IDC_RADIO_I_RNG2
)->
	`E«bÀWödow
(
TRUE
);

841 
	`GëDlgIãm
(
IDC_RADIO_I_RNG3
)->
	`E«bÀWödow
(
TRUE
);

842 
	`GëDlgIãm
(
IDC_RADIO_I_RNG4
)->
	`E«bÀWödow
(
TRUE
);

843 
	`GëDlgIãm
(
IDC_RADIO_I_RNG5
)->
	`E«bÀWödow
(
TRUE
);

844 
	`GëDlgIãm
(
IDC_RADIO_I_RNG6
)->
	`E«bÀWödow
(
TRUE
);

845 
	`GëDlgIãm
(
IDC_EDIT_I
)->
	`E«bÀWödow
(
TRUE
);

846 
	`GëDlgIãm
(
IDC_STATIC_I_ADC
)->
	`E«bÀWödow
(
TRUE
);

847 
	`GëDlgIãm
(
IDC_BUTTON_I_SET
)->
	`E«bÀWödow
(
TRUE
);

848 
	`GëDlgIãm
(
IDC_RADIO_I_CC
)->
	`E«bÀWödow
(
TRUE
);

849 
	`GëDlgIãm
(
IDC_RADIO_I_CV
)->
	`E«bÀWödow
(
TRUE
);

850 
	`GëDlgIãm
(
IDC_CHECK_I_HIGH_GAIN
)->
	`E«bÀWödow
(
TRUE
);

855 
	`GëDlgIãm
(
IDC_RADIO_PULSE_MEASURE_CAV0
)->
	`E«bÀWödow
(
FALSE
);

856 
	`GëDlgIãm
(
IDC_RADIO_PULSE_MEASURE_CAV1
)->
	`E«bÀWödow
(
FALSE
);

857 
	`GëDlgIãm
(
IDC_RADIO_PULSE_MEASURE_CAV2
)->
	`E«bÀWödow
(
FALSE
);

858 
	`GëDlgIãm
(
IDC_RADIO_PULSE_MEASURE_CAV3
)->
	`E«bÀWödow
(
FALSE
);

859 
	`GëDlgIãm
(
IDC_RADIO_I_RNG0
)->
	`E«bÀWödow
(
FALSE
);

860 
	`GëDlgIãm
(
IDC_RADIO_I_RNG1
)->
	`E«bÀWödow
(
FALSE
);

861 
	`GëDlgIãm
(
IDC_RADIO_I_RNG2
)->
	`E«bÀWödow
(
FALSE
);

862 
	`GëDlgIãm
(
IDC_RADIO_I_RNG3
)->
	`E«bÀWödow
(
FALSE
);

863 
	`GëDlgIãm
(
IDC_RADIO_I_RNG4
)->
	`E«bÀWödow
(
FALSE
);

864 
	`GëDlgIãm
(
IDC_RADIO_I_RNG5
)->
	`E«bÀWödow
(
FALSE
);

865 
	`GëDlgIãm
(
IDC_RADIO_I_RNG6
)->
	`E«bÀWödow
(
FALSE
);

866 
	`GëDlgIãm
(
IDC_EDIT_I
)->
	`E«bÀWödow
(
FALSE
);

867 
	`GëDlgIãm
(
IDC_STATIC_I_ADC
)->
	`E«bÀWödow
(
FALSE
);

868 
	`GëDlgIãm
(
IDC_BUTTON_I_SET
)->
	`E«bÀWödow
(
FALSE
);

869 
	`GëDlgIãm
(
IDC_RADIO_I_CC
)->
	`E«bÀWödow
(
FALSE
);

870 
	`GëDlgIãm
(
IDC_RADIO_I_CV
)->
	`E«bÀWödow
(
FALSE
);

871 
	`GëDlgIãm
(
IDC_CHECK_I_HIGH_GAIN
)->
	`E«bÀWödow
(
FALSE
);

875 
m_nADC_B
)

879 
	`GëDlgIãm
(
IDC_RADIO_HVC
)->
	`E«bÀWödow
(
TRUE
);

880 
	`GëDlgIãm
(
IDC_RADIO_LVC
)->
	`E«bÀWödow
(
TRUE
);

881 
	`GëDlgIãm
(
IDC_RADIO_HVO_GAIN0
)->
	`E«bÀWödow
(
FALSE
);

882 
	`GëDlgIãm
(
IDC_RADIO_HVO_GAIN1
)->
	`E«bÀWödow
(
FALSE
);

883 
	`GëDlgIãm
(
IDC_RADIO_HVO_GAIN2
)->
	`E«bÀWödow
(
FALSE
);

884 
	`GëDlgIãm
(
IDC_RADIO_HVO_GAIN3
)->
	`E«bÀWödow
(
FALSE
);

885 
	`GëDlgIãm
(
IDC_RADIO_HVO_OFST0
)->
	`E«bÀWödow
(
FALSE
);

886 
	`GëDlgIãm
(
IDC_RADIO_HVO_OFST1
)->
	`E«bÀWödow
(
FALSE
);

887 
	`GëDlgIãm
(
IDC_RADIO_HVO_OFST2
)->
	`E«bÀWödow
(
FALSE
);

888 
	`GëDlgIãm
(
IDC_RADIO_HVO_OFST3
)->
	`E«bÀWödow
(
FALSE
);

889 
	`GëDlgIãm
(
IDC_CHECK_FW_HIGH_GAIN
)->
	`E«bÀWödow
(
FALSE
);

893 
	`GëDlgIãm
(
IDC_RADIO_HVC
)->
	`E«bÀWödow
(
FALSE
);

894 
	`GëDlgIãm
(
IDC_RADIO_LVC
)->
	`E«bÀWödow
(
FALSE
);

895 
	`GëDlgIãm
(
IDC_RADIO_HVO_GAIN0
)->
	`E«bÀWödow
(
TRUE
);

896 
	`GëDlgIãm
(
IDC_RADIO_HVO_GAIN1
)->
	`E«bÀWödow
(
TRUE
);

897 
	`GëDlgIãm
(
IDC_RADIO_HVO_GAIN2
)->
	`E«bÀWödow
(
TRUE
);

898 
	`GëDlgIãm
(
IDC_RADIO_HVO_GAIN3
)->
	`E«bÀWödow
(
TRUE
);

899 
	`GëDlgIãm
(
IDC_RADIO_HVO_OFST0
)->
	`E«bÀWödow
(
TRUE
);

900 
	`GëDlgIãm
(
IDC_RADIO_HVO_OFST1
)->
	`E«bÀWödow
(
TRUE
);

901 
	`GëDlgIãm
(
IDC_RADIO_HVO_OFST2
)->
	`E«bÀWödow
(
TRUE
);

902 
	`GëDlgIãm
(
IDC_RADIO_HVO_OFST3
)->
	`E«bÀWödow
(
TRUE
);

903 
	`GëDlgIãm
(
IDC_CHECK_FW_HIGH_GAIN
)->
	`E«bÀWödow
(
FALSE
);

907 
	`GëDlgIãm
(
IDC_RADIO_HVC
)->
	`E«bÀWödow
(
FALSE
);

908 
	`GëDlgIãm
(
IDC_RADIO_LVC
)->
	`E«bÀWödow
(
FALSE
);

909 
	`GëDlgIãm
(
IDC_RADIO_HVO_GAIN0
)->
	`E«bÀWödow
(
FALSE
);

910 
	`GëDlgIãm
(
IDC_RADIO_HVO_GAIN1
)->
	`E«bÀWödow
(
FALSE
);

911 
	`GëDlgIãm
(
IDC_RADIO_HVO_GAIN2
)->
	`E«bÀWödow
(
FALSE
);

912 
	`GëDlgIãm
(
IDC_RADIO_HVO_GAIN3
)->
	`E«bÀWödow
(
FALSE
);

913 
	`GëDlgIãm
(
IDC_RADIO_HVO_OFST0
)->
	`E«bÀWödow
(
FALSE
);

914 
	`GëDlgIãm
(
IDC_RADIO_HVO_OFST1
)->
	`E«bÀWödow
(
FALSE
);

915 
	`GëDlgIãm
(
IDC_RADIO_HVO_OFST2
)->
	`E«bÀWödow
(
FALSE
);

916 
	`GëDlgIãm
(
IDC_RADIO_HVO_OFST3
)->
	`E«bÀWödow
(
FALSE
);

917 
	`GëDlgIãm
(
IDC_CHECK_FW_HIGH_GAIN
)->
	`E«bÀWödow
(
TRUE
);

921 
	`GëDlgIãm
(
IDC_RADIO_HVC
)->
	`E«bÀWödow
(
FALSE
);

922 
	`GëDlgIãm
(
IDC_RADIO_LVC
)->
	`E«bÀWödow
(
FALSE
);

923 
	`GëDlgIãm
(
IDC_RADIO_HVO_GAIN0
)->
	`E«bÀWödow
(
FALSE
);

924 
	`GëDlgIãm
(
IDC_RADIO_HVO_GAIN1
)->
	`E«bÀWödow
(
FALSE
);

925 
	`GëDlgIãm
(
IDC_RADIO_HVO_GAIN2
)->
	`E«bÀWödow
(
FALSE
);

926 
	`GëDlgIãm
(
IDC_RADIO_HVO_GAIN3
)->
	`E«bÀWödow
(
FALSE
);

927 
	`GëDlgIãm
(
IDC_RADIO_HVO_OFST0
)->
	`E«bÀWödow
(
FALSE
);

928 
	`GëDlgIãm
(
IDC_RADIO_HVO_OFST1
)->
	`E«bÀWödow
(
FALSE
);

929 
	`GëDlgIãm
(
IDC_RADIO_HVO_OFST2
)->
	`E«bÀWödow
(
FALSE
);

930 
	`GëDlgIãm
(
IDC_RADIO_HVO_OFST3
)->
	`E«bÀWödow
(
FALSE
);

931 
	`GëDlgIãm
(
IDC_CHECK_FW_HIGH_GAIN
)->
	`E«bÀWödow
(
FALSE
);

935 
BOOL
 
bAbÀ
=
FALSE
;

936 if(
m_bVBGu¨dOn
Ë
bAbÀ
=
TRUE
;

937 
	`GëDlgIãm
(
IDC_RADIO_BPOINT_CV
)->
	`E«bÀWödow
(
bAbÀ
);

938 
	`GëDlgIãm
(
IDC_RADIO_BPOINT_CC
)->
	`E«bÀWödow
(
bAbÀ
);

940 
bAbÀ
=
FALSE
;

941 if(
m_bVBGu¨dOn
 & 
m_nBCVC
Ë
bAbÀ
=
TRUE
;

942 
	`GëDlgIãm
(
IDC_EDIT_BPOINT_CC_V
)->
	`E«bÀWödow
(
bAbÀ
);

943 
	`GëDlgIãm
(
IDC_BUTTON_BPOINT_CCV_SET
)->
	`E«bÀWödow
(
bAbÀ
);

945 
bAbÀ
=
FALSE
;

946 if(
m_bVCGu¨dOn
Ë
bAbÀ
=
TRUE
;

947 
	`GëDlgIãm
(
IDC_RADIO_CPOINT_CV
)->
	`E«bÀWödow
(
bAbÀ
);

948 
	`GëDlgIãm
(
IDC_RADIO_CPOINT_CC
)->
	`E«bÀWödow
(
bAbÀ
);

950 
bAbÀ
=
FALSE
;

951 if(
m_bVCGu¨dOn
 & 
m_nCCVC
Ë
bAbÀ
=
TRUE
;

952 
	`GëDlgIãm
(
IDC_EDIT_CPOINT_CC_V
)->
	`E«bÀWödow
(
bAbÀ
);

953 
	`GëDlgIãm
(
IDC_BUTTON_CPOINT_CCV_SET
)->
	`E«bÀWödow
(
bAbÀ
);

955 
	`Upd©eD©a
(
FALSE
);

956 
	}
}

958 
	gCV43M™uÆTe°Dlg
::
	$OnBuâ⁄Lv1Së
()

960 
	`Upd©eD©a
(
TRUE
);

961 
UINT
 
moduÀ_id
 = 
LV1
;

962 
UINT
 
ö_vÆue
 = 
m_nLV1
;

964 
	`UNIT_CONVERT
(
ö_vÆue
, 
VOLT_TO_DA
);

965 
MM
.
	`Së
(
moduÀ_id
, 
ö_vÆue
);

967 
MM
.
	`Së
(
LVB
, 
moduÀ_id
);

968 
MM
.
	`Së
(
VBFT
);

970 
	`Dñay
(5, 
m£c
);

972 
CSåög
 
sTemp
;

973 
UINT
 
ãmp
 = 
MM
.
	`Gë
(
V
);

974 
sTemp
.
	`F‹m©
("%d", 
ãmp
);

975 
	`GëDlgIãm
(
IDC_STATIC_LV1_MNT_AD
)->
	`SëWödowText
(
sTemp
);

976 
sTemp
.
	`F‹m©
("%.3f", 
	`UNIT_CONVERT
(
ãmp
, 
AD_TO_LVOLT
));

977 
	`GëDlgIãm
(
IDC_STATIC_LV1_MNT
)->
	`SëWödowText
(
sTemp
);

979 
m_nADC_A
 = 2;

980 
	`Upd©eD©a
(
FALSE
);

981 
	}
}

983 
	gCV43M™uÆTe°Dlg
::
	$OnBuâ⁄Lv2Së
()

985 
	`Upd©eD©a
(
TRUE
);

986 
UINT
 
moduÀ_id
 = 
LV2
;

987 
UINT
 
ö_vÆue
 = 
m_nLV2
;

989 
	`UNIT_CONVERT
(
ö_vÆue
, 
VOLT_TO_DA
);

990 
MM
.
	`Së
(
moduÀ_id
, 
ö_vÆue
);

992 
MM
.
	`Së
(
LVB
, 
moduÀ_id
);

993 
MM
.
	`Së
(
VBFT
);

995 
	`Dñay
(5, 
m£c
);

997 
CSåög
 
sTemp
;

998 
UINT
 
ãmp
 = 
MM
.
	`Gë
(
V
);

999 
sTemp
.
	`F‹m©
("%d", 
ãmp
);

1000 
	`GëDlgIãm
(
IDC_STATIC_LV2_MNT_AD
)->
	`SëWödowText
(
sTemp
);

1001 
sTemp
.
	`F‹m©
("%.3f", 
	`UNIT_CONVERT
(
ãmp
, 
AD_TO_LVOLT
));

1002 
	`GëDlgIãm
(
IDC_STATIC_LV2_MNT
)->
	`SëWödowText
(
sTemp
);

1004 
m_nADC_A
 = 2;

1005 
	`Upd©eD©a
(
FALSE
);

1006 
	}
}

1008 
	gCV43M™uÆTe°Dlg
::
	$OnBuâ⁄Hv1Së
()

1010 
	`Upd©eD©a
(
TRUE
);

1011 
UINT
 
moduÀ_id
 = 
HV1
;

1012 
UINT
 
ö_vÆue
 = 
m_nHV1
;

1014 
	`UNIT_CONVERT
(
ö_vÆue
, 
VOLT_TO_DA
);

1015 
MM
.
	`Së
(
moduÀ_id
, 
ö_vÆue
);

1017 
MM
.
	`Së
(
HVB
, 
moduÀ_id
);

1018 
MM
.
	`Së
(
VBFT
);

1020 
	`Dñay
(5, 
m£c
);

1022 
CSåög
 
sTemp
;

1023 
UINT
 
ãmp
 = 
MM
.
	`Gë
(
V
);

1024 
sTemp
.
	`F‹m©
("%d", 
ãmp
);

1025 
	`GëDlgIãm
(
IDC_STATIC_HV1_MNT_AD
)->
	`SëWödowText
(
sTemp
);

1026 
sTemp
.
	`F‹m©
("%.3f", 
	`UNIT_CONVERT
(
ãmp
, 
AD_TO_HVOLT
));

1027 
	`GëDlgIãm
(
IDC_STATIC_HV1_MNT
)->
	`SëWödowText
(
sTemp
);

1029 
m_nADC_A
 = 2;

1030 
	`Upd©eD©a
(
FALSE
);

1031 
	}
}

1033 
	gCV43M™uÆTe°Dlg
::
	$OnBuâ⁄Hv2Së
()

1035 
	`Upd©eD©a
(
TRUE
);

1036 
UINT
 
moduÀ_id
 = 
HV2
;

1037 
UINT
 
ö_vÆue
 = 
m_nHV2
;

1039 
	`UNIT_CONVERT
(
ö_vÆue
, 
VOLT_TO_DA
);

1040 
MM
.
	`Së
(
moduÀ_id
, 
ö_vÆue
);

1042 
MM
.
	`Së
(
HVB
, 
moduÀ_id
);

1043 
MM
.
	`Së
(
VBFT
);

1045 
	`Dñay
(5, 
m£c
);

1047 
CSåög
 
sTemp
;

1048 
UINT
 
ãmp
 = 
MM
.
	`Gë
(
V
);

1049 
sTemp
.
	`F‹m©
("%d", 
ãmp
);

1050 
	`GëDlgIãm
(
IDC_STATIC_HV2_MNT_AD
)->
	`SëWödowText
(
sTemp
);

1051 
sTemp
.
	`F‹m©
("%.3f", 
	`UNIT_CONVERT
(
ãmp
, 
AD_TO_HVOLT
));

1052 
	`GëDlgIãm
(
IDC_STATIC_HV2_MNT
)->
	`SëWödowText
(
sTemp
);

1054 
m_nADC_A
 = 2;

1055 
	`Upd©eD©a
(
FALSE
);

1056 
	}
}

1058 
	gCV43M™uÆTe°Dlg
::
	$OnCheckPul£
()

1060 
	`Upd©eD©a
(
TRUE
);

1061 if(
m_bPul£
Ë
	`On
(
VB_AC_MODE
);

1062 
	`Off
(
VB_AC_MODE
);

1063 
	}
}

1065 
	gCV43M™uÆTe°Dlg
::
	$OnRadioPul£Fªq
()

1067 
MM
.
	`Së
(
PULSE
, 0, -1);

1068 
	}
}

1070 
	gCV43M™uÆTe°Dlg
::
	$OnRadioPul£Fªq1
()

1072 
MM
.
	`Së
(
PULSE
, 1, -1);

1073 
	}
}

1075 
	gCV43M™uÆTe°Dlg
::
	$OnRadioPul£Fªq2
()

1077 
MM
.
	`Së
(
PULSE
, 2, -1);

1078 
	}
}

1080 
	gCV43M™uÆTe°Dlg
::
	$OnRadioPul£Fªq3
()

1082 
MM
.
	`Së
(
PULSE
, 3, -1);

1083 
	}
}

1085 
	gCV43M™uÆTe°Dlg
::
	$OnRadioPul£Vﬁt
()

1087 
MM
.
	`Së
(
PULSE
, -1, 0);

1088 
	}
}

1090 
	gCV43M™uÆTe°Dlg
::
	$OnRadioPul£Vﬁt1
()

1092 
MM
.
	`Së
(
PULSE
, -1, 1);

1093 
	}
}

1095 
	gCV43M™uÆTe°Dlg
::
	$OnRadioPul£Vﬁt2
()

1097 
MM
.
	`Së
(
PULSE
, -1, 2);

1098 
	}
}

1100 
	gCV43M™uÆTe°Dlg
::
	$OnRadioPul£Vﬁt3
()

1102 
MM
.
	`Së
(
PULSE
, -1, 3);

1103 
	}
}

1105 
	gCV43M™uÆTe°Dlg
::
	$OnBuâ⁄VbOutSë
()

1107 
	`Upd©eD©a
(
TRUE
);

1108 
UINT
 
moduÀ_id
 = 
VB_OUT
;

1110 
	`On
(
VB_OUT_CHK
);

1111 
MM
.
	`Së
(
VBFT
);

1113 
CSåög
 
sTemp
;

1114 
UINT
 
ãmp
 = 
MM
.
	`Gë
(
V
);

1115 
sTemp
.
	`F‹m©
("%d", 
ãmp
);

1116 
	`GëDlgIãm
(
IDC_STATIC_VB_OUT_MNT
)->
	`SëWödowText
(
sTemp
);

1117 
sTemp
.
	`F‹m©
("%.3f", 
	`UNIT_CONVERT
(
ãmp
, 
AD_TO_HVOLT
));

1118 
	`GëDlgIãm
(
IDC_STATIC_VB_OUT_MNT
)->
	`SëWödowText
(
sTemp
);

1119 
	}
}

1121 
	gCV43M™uÆTe°Dlg
::
	$OnBuâ⁄S∑rkSë
()

1123 
	`Upd©eD©a
(
TRUE
);

1124 
UINT
 
moduÀ_id
 = 
SPARK
;

1125 
UINT
 
ö_vÆue
 = 
m_nS∑rk
, 
out_vÆue
 = 0;

1127 
	`UNIT_CONVERT
(
ö_vÆue
, 
VOLT_TO_DA
);

1128 
MM
.
	`Së
(
moduÀ_id
, 
ö_vÆue
);

1129 
	}
}

1131 
	gCV43M™uÆTe°Dlg
::
	$OnCheckS∑rkOn
()

1133 
	`Upd©eD©a
(
TRUE
);

1134 if(
m_nS∑rkOn
Ë
	`On
(
_SPARK_RST
);

1135 
	`Off
(
_SPARK_RST
);

1136 
	}
}

1138 
	gCV43M™uÆTe°Dlg
::
	$OnSëfocusEdôLv1
()

1140 
	`Upd©eD©a
(
TRUE
);

1141 if(
m_bNKeyPadO≥n
 =
TRUE
) ;

1142 
m_bNKeyPadO≥n
 = 
TRUE
;

1144 if(
NKEYPAD
.
	`SëVÆue
(()
m_nLV1
, 0, 20Ë=
FALSE
) ;

1145 
NKEYPAD
.
	`DoModÆ
();

1146 
m_nLV1
 = ()
NKEYPAD
.
	`GëVÆue
();

1148 
m_adcLV1
 = 
m_nLV1
;

1149 
	`UNIT_CONVERT
(
m_adcLV1
, 
VOLT_TO_DA
);

1151 
m_bNKeyPadO≥n
 = 
FALSE
;

1152 
	`SëFocus
( );

1153 
	`Upd©eD©a
(
FALSE
);

1154 
	}
}

1156 
	gCV43M™uÆTe°Dlg
::
	$OnSëfocusEdôLv2
()

1158 
	`Upd©eD©a
(
TRUE
);

1159 if(
m_bNKeyPadO≥n
 =
TRUE
) ;

1160 
m_bNKeyPadO≥n
 = 
TRUE
;

1162 if(
NKEYPAD
.
	`SëVÆue
(()
m_nLV2
, 0, 20Ë=
FALSE
) ;

1163 
NKEYPAD
.
	`DoModÆ
();

1164 
m_nLV2
 = ()
NKEYPAD
.
	`GëVÆue
();

1166 
m_adcLV2
 = 
m_nLV2
;

1167 
	`UNIT_CONVERT
(
m_adcLV2
, 
VOLT_TO_DA
);

1169 
m_bNKeyPadO≥n
 = 
FALSE
;

1170 
	`SëFocus
( );

1171 
	`Upd©eD©a
(
FALSE
);

1172 
	}
}

1174 
	gCV43M™uÆTe°Dlg
::
	$OnSëfocusEdôHv1
()

1176 
	`Upd©eD©a
(
TRUE
);

1177 if(
m_bNKeyPadO≥n
 =
TRUE
) ;

1178 
m_bNKeyPadO≥n
 = 
TRUE
;

1180 if(
NKEYPAD
.
	`SëVÆue
(()
m_nHV1
, 21, 300Ë=
FALSE
) ;

1181 
NKEYPAD
.
	`DoModÆ
();

1182 
m_nHV1
 = ()
NKEYPAD
.
	`GëVÆue
();

1184 
m_adcHV1
 = 
m_nHV1
;

1185 
	`UNIT_CONVERT
(
m_adcHV1
, 
VOLT_TO_DA
);

1187 
m_bNKeyPadO≥n
 = 
FALSE
;

1188 
	`SëFocus
( );

1189 
	`Upd©eD©a
(
FALSE
);

1190 
	}
}

1192 
	gCV43M™uÆTe°Dlg
::
	$OnSëfocusEdôHv2
()

1194 
	`Upd©eD©a
(
TRUE
);

1195 if(
m_bNKeyPadO≥n
 =
TRUE
) ;

1196 
m_bNKeyPadO≥n
 = 
TRUE
;

1198 if(
NKEYPAD
.
	`SëVÆue
(()
m_nHV2
, 21, 300Ë=
FALSE
) ;

1199 
NKEYPAD
.
	`DoModÆ
();

1200 
m_nHV2
 = ()
NKEYPAD
.
	`GëVÆue
();

1202 
m_adcHV2
 = 
m_nHV2
;

1203 
	`UNIT_CONVERT
(
m_adcHV2
, 
VOLT_TO_DA
);

1205 
m_bNKeyPadO≥n
 = 
FALSE
;

1206 
	`SëFocus
( );

1207 
	`Upd©eD©a
(
FALSE
);

1208 
	}
}

1210 
	gCV43M™uÆTe°Dlg
::
	$OnSëfocusEdôS∑rk
()

1212 
	`Upd©eD©a
(
TRUE
);

1213 if(
m_bNKeyPadO≥n
 =
TRUE
) ;

1214 
m_bNKeyPadO≥n
 = 
TRUE
;

1216 if(
NKEYPAD
.
	`SëVÆue
(()
m_nS∑rk
, 0, 0Ë=
FALSE
) ;

1217 
NKEYPAD
.
	`DoModÆ
();

1218 
m_nS∑rk
 = ()
NKEYPAD
.
	`GëVÆue
();

1220 
m_bNKeyPadO≥n
 = 
FALSE
;

1221 
	`SëFocus
( );

1222 
	`Upd©eD©a
(
FALSE
);

1223 
	}
}

1225 
	gCV43M™uÆTe°Dlg
::
	$OnSëfocusEdôI
()

1227 
	`Upd©eD©a
(
TRUE
);

1228 if(
m_bNKeyPadO≥n
 =
TRUE
) ;

1229 
m_bNKeyPadO≥n
 = 
TRUE
;

1231 
m_nIR™ge
)

1233 
I_RANGE0
:

1235 if(
NKEYPAD
.
	`SëVÆue
(()
m_nI
, 1, 100Ë=
FALSE
) ;

1238 
I_RANGE1
:

1240 if(
NKEYPAD
.
	`SëVÆue
(()
m_nI
, 1, 20Ë=
FALSE
) ;

1243 
I_RANGE2
:

1245 if(
NKEYPAD
.
	`SëVÆue
(()
m_nI
, 1, 10Ë=
FALSE
) ;

1248 
I_RANGE3
:

1250 if(
NKEYPAD
.
	`SëVÆue
(()
m_nI
, 1, 2000Ë=
FALSE
) ;

1253 
I_RANGE4
:

1255 if(
NKEYPAD
.
	`SëVÆue
(()
m_nI
, 1, 200Ë=
FALSE
) ;

1258 
I_RANGE5
:

1260 if(
NKEYPAD
.
	`SëVÆue
(()
m_nI
, 1, 20Ë=
FALSE
) ;

1263 
I_RANGE6
:

1265 if(
NKEYPAD
.
	`SëVÆue
(()
m_nI
, 0, 4095Ë=
FALSE
) ;

1269 
NKEYPAD
.
	`DoModÆ
();

1270 
m_nI
 = ()
NKEYPAD
.
	`GëVÆue
();

1272 
m_bNKeyPadO≥n
 = 
FALSE
;

1273 
	`SëFocus
( );

1274 
	`Upd©eD©a
(
FALSE
);

1275 
	}
}

1277 
	gCV43M™uÆTe°Dlg
::
	$OnBuâ⁄ISë
()

1279 
	`Upd©eD©a
(
TRUE
);

1280 
UINT
 
I_vÆue
 = 
m_nI
;

1282 
m_nIR™ge
)

1284 
I_RANGE0
:

1285 
I_RANGE1
:

1286 
I_RANGE2
:

1287 
I_vÆue
 *= 1000;

1288 
I_RANGE3
:

1289 
I_RANGE4
:

1290 
I_RANGE5
:

1291 
	`UNIT_CONVERT
(
I_vÆue
, 
I0_TO_DA
+
m_nIR™ge
-
I_RANGE0
);

1294 
I_RANGE6
:

1299 
CSåög
 
°rTemp
;

1300 
°rTemp
.
	`F‹m©
("%d", 
I_vÆue
);

1301 
	`GëDlgIãm
(
IDC_STATIC_I_ADC
)->
	`SëWödowText
(
°rTemp
);

1303 
MM
.
	`Së
(
I
, 
I_vÆue
);

1304 
	}
}

1306 
	gCV43M™uÆTe°Dlg
::
	$OnRadioICc
()

1308 
	`Off
(
CC_CV_MODE
);

1309 
	}
}

1311 
	gCV43M™uÆTe°Dlg
::
	$OnRadioICv
()

1313 
	`On
(
CC_CV_MODE
);

1314 
	}
}

1316 
	gCV43M™uÆTe°Dlg
::
	$OnCheckIHighGaö
()

1318 
	`Upd©eD©a
(
TRUE
);

1319 if(
m_bIHighGaöMode
Ë
	`On
(
I_GAIN_MODE_CMD
);

1320 
	`Off
(
I_GAIN_MODE_CMD
);

1321 
	}
}

1323 
	gCV43M™uÆTe°Dlg
::
	$OnRadioP·Fa°
()

1325 
MM
.
	`Së
(
PFFT
);

1326 
	}
}

1328 
	gCV43M™uÆTe°Dlg
::
	$OnRadioP·Slow
()

1330 
MM
.
	`Së
(
PSFT
);

1331 
	}
}

1333 
	gCV43M™uÆTe°Dlg
::
	$OnRadioVb·
()

1335 
MM
.
	`Së
(
VBFT
);

1336 
	}
}

1338 
	gCV43M™uÆTe°Dlg
::
	$OnRadioIf·
()

1340 
MM
.
	`Së
(
CFFT
);

1341 
	}
}

1343 
	gCV43M™uÆTe°Dlg
::
	$OnRadioIs·
()

1345 
MM
.
	`Së
(
CSFT
);

1346 
	}
}

1348 
	gCV43M™uÆTe°Dlg
::
	$OnRadioPul£MósuªCav0
()

1350 
MM
.
	`Së
(
PULSE
, -1, -1, 0);

1351 
	}
}

1353 
	gCV43M™uÆTe°Dlg
::
	$OnRadioPul£MósuªCav1
()

1355 
MM
.
	`Së
(
PULSE
, -1, -1, 1);

1356 
	}
}

1358 
	gCV43M™uÆTe°Dlg
::
	$OnRadioPul£MósuªCav2
()

1360 
MM
.
	`Së
(
PULSE
, -1, -1, 2);

1361 
	}
}

1363 
	gCV43M™uÆTe°Dlg
::
	$OnRadioPul£MósuªCav3
()

1365 
MM
.
	`Së
(
PULSE
, -1, -1, 3);

1366 
	}
}

1368 
	gCV43M™uÆTe°Dlg
::
	$OnRadioIRng0
()

1370 
m_nIR™ge
 = 
I_RANGE0
;

1371 
MM
.
	`Së
(
I
, -1, 
m_nIR™ge
);

1372 
	}
}

1374 
	gCV43M™uÆTe°Dlg
::
	$OnRadioIRng1
()

1376 
m_nIR™ge
 = 
I_RANGE1
;

1377 
MM
.
	`Së
(
I
, -1, 
m_nIR™ge
);

1378 
	}
}

1380 
	gCV43M™uÆTe°Dlg
::
	$OnRadioIRng2
()

1382 
m_nIR™ge
 = 
I_RANGE2
;

1383 
MM
.
	`Së
(
I
, -1, 
m_nIR™ge
);

1384 
	}
}

1386 
	gCV43M™uÆTe°Dlg
::
	$OnRadioIRng3
()

1388 
m_nIR™ge
 = 
I_RANGE3
;

1389 
MM
.
	`Së
(
I
, -1, 
m_nIR™ge
);

1390 
	}
}

1392 
	gCV43M™uÆTe°Dlg
::
	$OnRadioIRng4
()

1394 
m_nIR™ge
 = 
I_RANGE4
;

1395 
MM
.
	`Së
(
I
, -1, 
m_nIR™ge
);

1396 
	}
}

1398 
	gCV43M™uÆTe°Dlg
::
	$OnRadioIRng5
()

1400 
m_nIR™ge
 = 
I_RANGE5
;

1401 
MM
.
	`Së
(
I
, -1, 
m_nIR™ge
);

1402 
	}
}

1404 
	gCV43M™uÆTe°Dlg
::
	$OnRadioIRng6
()

1406 
m_nIR™ge
 = 
I_RANGE6
;

1407 
MM
.
	`Së
(
I
, -1, 
m_nIR™ge
);

1408 
	}
}

1410 
	gCV43M™uÆTe°Dlg
::
	$OnRadioVcf·
()

1412 
MM
.
	`Së
(
VCFFT
);

1413 
	}
}

1415 
	gCV43M™uÆTe°Dlg
::
	$OnRadioVcs·
()

1417 
MM
.
	`Së
(
VCSFT
);

1418 
	}
}

1420 
	gCV43M™uÆTe°Dlg
::
	$OnRadioHvo·
()

1422 
MM
.
	`Së
(
HVOFT
);

1423 
	}
}

1425 
	gCV43M™uÆTe°Dlg
::
	$OnRadioFw·
()

1427 
MM
.
	`Së
(
FWFT
);

1428 
	}
}

1430 
	gCV43M™uÆTe°Dlg
::
	$OnRadioHvc
()

1432 
MM
.
	`Së
(
HVC
);

1433 
	}
}

1435 
	gCV43M™uÆTe°Dlg
::
	$OnRadioLvc
()

1437 
MM
.
	`Së
(
LVC
);

1438 
	}
}

1440 
	gCV43M™uÆTe°Dlg
::
	$OnRadioHvoGaö0
()

1442 
MM
.
	`Së
(
HVO
, -1, 0);

1443 
	}
}

1445 
	gCV43M™uÆTe°Dlg
::
	$OnRadioHvoGaö1
()

1447 
MM
.
	`Së
(
HVO
, -1, 1);

1448 
	}
}

1450 
	gCV43M™uÆTe°Dlg
::
	$OnRadioHvoGaö2
()

1452 
MM
.
	`Së
(
HVO
, -1, 2);

1453 
	}
}

1455 
	gCV43M™uÆTe°Dlg
::
	$OnRadioHvoGaö3
()

1457 
MM
.
	`Së
(
HVO
, -1, 3);

1458 
	}
}

1460 
	gCV43M™uÆTe°Dlg
::
	$OnRadioHvoOf°0
()

1462 
MM
.
	`Së
(
HVO
, 0);

1463 
	}
}

1465 
	gCV43M™uÆTe°Dlg
::
	$OnRadioHvoOf°1
()

1467 
MM
.
	`Së
(
HVO
, 1);

1468 
	}
}

1470 
	gCV43M™uÆTe°Dlg
::
	$OnRadioHvoOf°2
()

1472 
MM
.
	`Së
(
HVO
, 2);

1473 
	}
}

1475 
	gCV43M™uÆTe°Dlg
::
	$OnRadioHvoOf°3
()

1477 
MM
.
	`Së
(
HVO
, 3);

1478 
	}
}

1480 
	gCV43M™uÆTe°Dlg
::
	$OnCheckFwHighGaö
()

1482 
	`Upd©eD©a
(
TRUE
);

1483 if(
m_bFWHighGaöMode
Ë
MM
.
	`Së
(
FW_GAIN
, 1);

1484 
MM
.
	`Së
(
FW_GAIN
, 0);

1485 
	}
}

1487 
	gCV43M™uÆTe°Dlg
::
	$CÆcPoöt
()

1489 
	`Upd©eD©a
(
TRUE
);

1490 
UINT
 
poöt
=0, 
box_no
=0, 
PCBíabÀ
=0, 
PCB_no
=0, 
CPLD_no
=0, 
pö_no
=0;

1492 
m_nBPCB
 = ((
m_nBPCB3
 &1)<<3Ë+ ((
m_nBPCB2
 &1)<<2Ë+ ((
m_nBPCB1
 &1)<<1Ë+ (
m_nBPCB0
 &1);

1493 
m_nBPö
 = ((
m_nBPö5
 &1)<<5Ë+ ((
m_nBPö4
 &1)<<4Ë+ ((
m_nBPö3
 &1)<<3Ë+ ((
m_nBPö2
 &1)<<2Ë+ ((
m_nBPö1
 &1)<<1Ë+ (
m_nBPö0
 &1);

1494 
box_no
 = 
m_nBBox
;

1495 
PCBíabÀ
 = 
m_nBPCBE«bÀ
;

1496 
PCB_no
 = 
m_nBPCB
;

1497 
CPLD_no
 = 
	`ldiv
(
m_nBCPLD
, 2).
ªm
;

1498 
pö_no
 = 
m_nBPö
;

1500 
poöt
 = 
box_no
 * 4096 + 
PCBíabÀ
 * 2048 + 
PCB_no
 * 128 + 
CPLD_no
 * 64 + 
pö_no
;

1501 if(
m_bBTRY
 =
TR
Ë
m_±BTR
 = 
poöt
;

1502 if(
m_bBTRY
 =
RY
Ë
m_±BRY
 = 
poöt
;

1504 
m_nCPCB
 = ((
m_nCPCB3
 &1)<<3Ë+ ((
m_nCPCB2
 &1)<<2Ë+ ((
m_nCPCB1
 &1)<<1Ë+ (
m_nCPCB0
 &1);

1505 
m_nCPö
 = ((
m_nCPö5
 &1)<<5Ë+ ((
m_nCPö4
 &1)<<4Ë+ ((
m_nCPö3
 &1)<<3Ë+ ((
m_nCPö2
 &1)<<2Ë+ ((
m_nCPö1
 &1)<<1Ë+ (
m_nCPö0
 &1);

1506 
box_no
 = 
m_nCBox
;

1507 
PCBíabÀ
 = 
m_nCPCBE«bÀ
;

1508 
PCB_no
 = 
m_nCPCB
;

1509 
CPLD_no
 = 
	`ldiv
(
m_nCCPLD
, 2).
ªm
;

1510 
pö_no
 = 
m_nCPö
;

1512 
poöt
 = 
box_no
 * 4096 + 
PCBíabÀ
 * 2048 + 
PCB_no
 * 128 + 
CPLD_no
 * 64 + 
pö_no
;

1513 if(
m_bCTRY
 =
TR
Ë
m_±CTR
 = 
poöt
;

1514 if(
m_bCTRY
 =
RY
Ë
m_±CRY
 = 
poöt
;

1516 
	`Upd©eD©a
(
FALSE
);

1518 
	}
}

1520 
	gCV43M™uÆTe°Dlg
::
	$OnDbl˛kLi°Bpoöt
()

1522 
BOOL
 
bTRY
 = 
TR
;

1523 
CSåög
 
°rTemp
;

1524 
ödex
 = 
m_li°BPoöt
.
	`GëCurSñ
();

1525 if(
ödex
 < 0) ;

1526 
m_li°BPoöt
.
	`GëText
(
ödex
, 
°rTemp
);

1527 
nBPoöt
 = 
	`©oi
(
°rTemp
);

1528 if(
°rTemp
.
	`Föd
("RY", 0Ë>=0 ) 
bTRY
 = 
RY
;

1529 
m_bBTRY
 = 
bTRY
;

1532 
m_nBBox
 = 
nBPoöt
>>12;

1533 
m_nBPCBE«bÀ
 = (
nBPoöt
>>11) & 1;

1534 
m_nBPCB0
 = (
nBPoöt
>>7) & 1;

1535 
m_nBPCB1
 = (
nBPoöt
>>8) & 1;

1536 
m_nBPCB2
 = (
nBPoöt
>>9) & 1;

1537 
m_nBPCB3
 = (
nBPoöt
>>10) & 1;

1538 
m_nBCPLD
 = ((
nBPoöt
>>6Ë& 1Ë+ 
bTRY
*2;

1539 
m_nBPö0
 = (
nBPoöt
>>0) & 1;

1540 
m_nBPö1
 = (
nBPoöt
>>1) & 1;

1541 
m_nBPö2
 = (
nBPoöt
>>2) & 1;

1542 
m_nBPö3
 = (
nBPoöt
>>3) & 1;

1543 
m_nBPö4
 = (
nBPoöt
>>4) & 1;

1544 
m_nBPö5
 = (
nBPoöt
>>5) & 1;

1546 
	`SëFocus
( );

1547 
	`Upd©eD©a
(
FALSE
);

1548 
	}
}

1550 
	gCV43M™uÆTe°Dlg
::
	$OnSëfocusEdôBpö
()

1552 
	`Upd©eD©a
(
TRUE
);

1553 if(
m_bNKeyPadO≥n
 =
TRUE
) ;

1554 
m_bNKeyPadO≥n
 = 
TRUE
;

1556 if(
NKEYPAD
.
	`SëVÆue
(()
m_nBPö
, 0, 63Ë=
FALSE
) ;

1557 
NKEYPAD
.
	`DoModÆ
();

1558 
nBPö
 = ()
NKEYPAD
.
	`GëVÆue
();

1561 
m_nBPö0
 = (
nBPö
>>0) & 1;

1562 
m_nBPö1
 = (
nBPö
>>1) & 1;

1563 
m_nBPö2
 = (
nBPö
>>2) & 1;

1564 
m_nBPö3
 = (
nBPö
>>3) & 1;

1565 
m_nBPö4
 = (
nBPö
>>4) & 1;

1566 
m_nBPö5
 = (
nBPö
>>5) & 1;

1568 
m_bNKeyPadO≥n
 = 
FALSE
;

1569 
	`SëFocus
( );

1570 
	`Upd©eD©a
(
FALSE
);

1571 
	}
}

1573 
	gCV43M™uÆTe°Dlg
::
	$OnSëfocusEdôBpoötTr
()

1575 
	`Upd©eD©a
(
TRUE
);

1576 if(
m_bNKeyPadO≥n
 =
TRUE
) ;

1577 
m_bNKeyPadO≥n
 = 
TRUE
;

1579 if(
NKEYPAD
.
	`SëVÆue
(()
m_±BTR
, 0, 32767Ë=
FALSE
) ;

1580 
NKEYPAD
.
	`DoModÆ
();

1581 
nBPoöt
 = ()
NKEYPAD
.
	`GëVÆue
();

1582 
m_±BTR
 = 
nBPoöt
;

1585 
m_nBBox
 = 
nBPoöt
>>12;

1586 
m_nBPCBE«bÀ
 = (
nBPoöt
>>11) & 1;

1587 
m_nBPCB0
 = (
nBPoöt
>>7) & 1;

1588 
m_nBPCB1
 = (
nBPoöt
>>8) & 1;

1589 
m_nBPCB2
 = (
nBPoöt
>>9) & 1;

1590 
m_nBPCB3
 = (
nBPoöt
>>10) & 1;

1591 
m_nBCPLD
 = ((
nBPoöt
>>6Ë& 1Ë+ 
TR
*2;

1592 
m_nBPö0
 = (
nBPoöt
>>0) & 1;

1593 
m_nBPö1
 = (
nBPoöt
>>1) & 1;

1594 
m_nBPö2
 = (
nBPoöt
>>2) & 1;

1595 
m_nBPö3
 = (
nBPoöt
>>3) & 1;

1596 
m_nBPö4
 = (
nBPoöt
>>4) & 1;

1597 
m_nBPö5
 = (
nBPoöt
>>5) & 1;

1599 
m_bBTRY
 = 
TR
;

1600 
m_bNKeyPadO≥n
 = 
FALSE
;

1601 
	`SëFocus
( );

1602 
	`Upd©eD©a
(
FALSE
);

1603 
	}
}

1605 
	gCV43M™uÆTe°Dlg
::
	$OnSëfocusEdôBpoötRy
()

1607 
	`Upd©eD©a
(
TRUE
);

1608 if(
m_bNKeyPadO≥n
 =
TRUE
) ;

1609 
m_bNKeyPadO≥n
 = 
TRUE
;

1611 if(
NKEYPAD
.
	`SëVÆue
(()
m_±BRY
, 0, 32767Ë=
FALSE
) ;

1612 
NKEYPAD
.
	`DoModÆ
();

1613 
nBPoöt
 = ()
NKEYPAD
.
	`GëVÆue
();

1614 
m_±BRY
 = 
nBPoöt
;

1617 
m_nBBox
 = 
nBPoöt
>>12;

1618 
m_nBPCBE«bÀ
 = (
nBPoöt
>>11) & 1;

1619 
m_nBPCB0
 = (
nBPoöt
>>7) & 1;

1620 
m_nBPCB1
 = (
nBPoöt
>>8) & 1;

1621 
m_nBPCB2
 = (
nBPoöt
>>9) & 1;

1622 
m_nBPCB3
 = (
nBPoöt
>>10) & 1;

1623 
m_nBCPLD
 = ((
nBPoöt
>>6Ë& 1Ë+ 
RY
*2;

1624 
m_nBPö0
 = (
nBPoöt
>>0) & 1;

1625 
m_nBPö1
 = (
nBPoöt
>>1) & 1;

1626 
m_nBPö2
 = (
nBPoöt
>>2) & 1;

1627 
m_nBPö3
 = (
nBPoöt
>>3) & 1;

1628 
m_nBPö4
 = (
nBPoöt
>>4) & 1;

1629 
m_nBPö5
 = (
nBPoöt
>>5) & 1;

1631 
m_bBTRY
 = 
RY
;

1632 
m_bNKeyPadO≥n
 = 
FALSE
;

1633 
	`SëFocus
( );

1634 
	`Upd©eD©a
(
FALSE
);

1635 
	}
}

1637 
	gCV43M™uÆTe°Dlg
::
	$OnBuâ⁄BpoötTrSë
()

1639 
	`Upd©eD©a
(
TRUE
);

1640 
UINT
 
poöt_no
=
m_±BTR
;

1642 
MM
.
	`Së
(
BPOINT
, 
poöt_no
, 
TR
);

1644 
CSåög
 
°rTemp
;

1645 
°rTemp
.
	`F‹m©
("%d TR", 
poöt_no
);

1646 if(
m_li°BPoöt
.
	`FödSåög
(-1, 
°rTemp
Ë=
LB_ERR
Ëm_li°BPoöt.
	`AddSåög
(strTemp);

1647 
	}
}

1649 
	gCV43M™uÆTe°Dlg
::
	$OnBuâ⁄BpoötTrR°
()

1651 
	`Upd©eD©a
(
TRUE
);

1652 
UINT
 
poöt_no
=
m_±BTR
;

1654 
MM
.
	`R°
(
BPOINT
, 
poöt_no
, 
TR
);

1656 
CSåög
 
°rTemp
;

1657 
°rTemp
.
	`F‹m©
("%d TR", 
poöt_no
);

1658 
ödex
 = 
m_li°BPoöt
.
	`FödSåög
(-1, 
°rTemp
);

1659 if(
ödex
 !
LB_ERR
Ë
m_li°BPoöt
.
	`DñëeSåög
(index);

1660 
	}
}

1662 
	gCV43M™uÆTe°Dlg
::
	$OnBuâ⁄BpoötRySë
()

1664 
	`Upd©eD©a
(
TRUE
);

1665 
UINT
 
poöt_no
=
m_±BRY
;

1667 
MM
.
	`Së
(
BPOINT
, 
poöt_no
, 
RY
);

1669 
CSåög
 
°rTemp
;

1670 
°rTemp
.
	`F‹m©
("%d RY", 
poöt_no
);

1671 if(
m_li°BPoöt
.
	`FödSåög
(-1, 
°rTemp
Ë=
LB_ERR
Ëm_li°BPoöt.
	`AddSåög
(strTemp);

1672 
	}
}

1674 
	gCV43M™uÆTe°Dlg
::
	$OnBuâ⁄BpoötRyR°
()

1676 
	`Upd©eD©a
(
TRUE
);

1677 
UINT
 
poöt_no
=
m_±BRY
;

1679 
MM
.
	`R°
(
BPOINT
, 
poöt_no
, 
RY
);

1681 
CSåög
 
°rTemp
;

1682 
°rTemp
.
	`F‹m©
("%d RY", 
poöt_no
);

1683 
ödex
 = 
m_li°BPoöt
.
	`FödSåög
(-1, 
°rTemp
);

1684 if(
ödex
 !
LB_ERR
Ë
m_li°BPoöt
.
	`DñëeSåög
(index);

1685 
	}
}

1687 
	gCV43M™uÆTe°Dlg
::
	$OnDbl˛kLi°Cpoöt
()

1689 
BOOL
 
bTRY
 = 
TR
;

1690 
CSåög
 
°rTemp
;

1691 
ödex
 = 
m_li°CPoöt
.
	`GëCurSñ
();

1692 if(
ödex
 < 0) ;

1693 
m_li°CPoöt
.
	`GëText
(
ödex
, 
°rTemp
);

1694 
nCPoöt
 = 
	`©oi
(
°rTemp
);

1695 if(
°rTemp
.
	`Föd
("RY", 0Ë>=0 ) 
bTRY
 = 
RY
;

1696 
m_bCTRY
 = 
bTRY
;

1699 
m_nCBox
 = 
nCPoöt
>>12;

1700 
m_nCPCBE«bÀ
 = (
nCPoöt
>>11) & 1;

1701 
m_nCPCB0
 = (
nCPoöt
>>7) & 1;

1702 
m_nCPCB1
 = (
nCPoöt
>>8) & 1;

1703 
m_nCPCB2
 = (
nCPoöt
>>9) & 1;

1704 
m_nCPCB3
 = (
nCPoöt
>>10) & 1;

1705 
m_nCCPLD
 = ((
nCPoöt
>>6Ë& 1Ë+ 
bTRY
*2;

1706 
m_nCPö0
 = (
nCPoöt
>>0) & 1;

1707 
m_nCPö1
 = (
nCPoöt
>>1) & 1;

1708 
m_nCPö2
 = (
nCPoöt
>>2) & 1;

1709 
m_nCPö3
 = (
nCPoöt
>>3) & 1;

1710 
m_nCPö4
 = (
nCPoöt
>>4) & 1;

1711 
m_nCPö5
 = (
nCPoöt
>>5) & 1;

1713 
	`SëFocus
( );

1714 
	`Upd©eD©a
(
FALSE
);

1715 
	}
}

1717 
	gCV43M™uÆTe°Dlg
::
	$OnSëfocusEdôCpö
()

1719 
	`Upd©eD©a
(
TRUE
);

1720 if(
m_bNKeyPadO≥n
 =
TRUE
) ;

1721 
m_bNKeyPadO≥n
 = 
TRUE
;

1723 if(
NKEYPAD
.
	`SëVÆue
(()
m_nCPö
, 0, 63Ë=
FALSE
) ;

1724 
NKEYPAD
.
	`DoModÆ
();

1725 
nCPö
 = ()
NKEYPAD
.
	`GëVÆue
();

1728 
m_nCPö0
 = (
nCPö
>>0) & 1;

1729 
m_nCPö1
 = (
nCPö
>>1) & 1;

1730 
m_nCPö2
 = (
nCPö
>>2) & 1;

1731 
m_nCPö3
 = (
nCPö
>>3) & 1;

1732 
m_nCPö4
 = (
nCPö
>>4) & 1;

1733 
m_nCPö5
 = (
nCPö
>>5) & 1;

1735 
m_bNKeyPadO≥n
 = 
FALSE
;

1736 
	`SëFocus
( );

1737 
	`Upd©eD©a
(
FALSE
);

1738 
	}
}

1740 
	gCV43M™uÆTe°Dlg
::
	$OnSëfocusEdôCpoötTr
()

1742 
	`Upd©eD©a
(
TRUE
);

1743 if(
m_bNKeyPadO≥n
 =
TRUE
) ;

1744 
m_bNKeyPadO≥n
 = 
TRUE
;

1746 if(
NKEYPAD
.
	`SëVÆue
(()
m_±CTR
, 0, 32767Ë=
FALSE
) ;

1747 
NKEYPAD
.
	`DoModÆ
();

1748 
nCPoöt
 = ()
NKEYPAD
.
	`GëVÆue
();

1749 
m_±CTR
 = 
nCPoöt
;

1752 
m_nCBox
 = 
nCPoöt
>>12;

1753 
m_nCPCBE«bÀ
 = (
nCPoöt
>>11) & 1;

1754 
m_nCPCB0
 = (
nCPoöt
>>7) & 1;

1755 
m_nCPCB1
 = (
nCPoöt
>>8) & 1;

1756 
m_nCPCB2
 = (
nCPoöt
>>9) & 1;

1757 
m_nCPCB3
 = (
nCPoöt
>>10) & 1;

1758 
m_nCCPLD
 = ((
nCPoöt
>>6Ë& 1Ë+ 
TR
*2;

1759 
m_nCPö0
 = (
nCPoöt
>>0) & 1;

1760 
m_nCPö1
 = (
nCPoöt
>>1) & 1;

1761 
m_nCPö2
 = (
nCPoöt
>>2) & 1;

1762 
m_nCPö3
 = (
nCPoöt
>>3) & 1;

1763 
m_nCPö4
 = (
nCPoöt
>>4) & 1;

1764 
m_nCPö5
 = (
nCPoöt
>>5) & 1;

1766 
m_bCTRY
 = 
TR
;

1767 
m_bNKeyPadO≥n
 = 
FALSE
;

1768 
	`SëFocus
( );

1769 
	`Upd©eD©a
(
FALSE
);

1770 
	}
}

1772 
	gCV43M™uÆTe°Dlg
::
	$OnSëfocusEdôCpoötRy
()

1774 
	`Upd©eD©a
(
TRUE
);

1775 if(
m_bNKeyPadO≥n
 =
TRUE
) ;

1776 
m_bNKeyPadO≥n
 = 
TRUE
;

1778 if(
NKEYPAD
.
	`SëVÆue
(()
m_±CRY
, 0, 32767Ë=
FALSE
) ;

1779 
NKEYPAD
.
	`DoModÆ
();

1780 
nCPoöt
 = ()
NKEYPAD
.
	`GëVÆue
();

1781 
m_±CRY
 = 
nCPoöt
;

1784 
m_nCBox
 = 
nCPoöt
>>12;

1785 
m_nCPCBE«bÀ
 = (
nCPoöt
>>11) & 1;

1786 
m_nCPCB0
 = (
nCPoöt
>>7) & 1;

1787 
m_nCPCB1
 = (
nCPoöt
>>8) & 1;

1788 
m_nCPCB2
 = (
nCPoöt
>>9) & 1;

1789 
m_nCPCB3
 = (
nCPoöt
>>10) & 1;

1790 
m_nCCPLD
 = ((
nCPoöt
>>6Ë& 1Ë+ 
RY
*2;

1791 
m_nCPö0
 = (
nCPoöt
>>0) & 1;

1792 
m_nCPö1
 = (
nCPoöt
>>1) & 1;

1793 
m_nCPö2
 = (
nCPoöt
>>2) & 1;

1794 
m_nCPö3
 = (
nCPoöt
>>3) & 1;

1795 
m_nCPö4
 = (
nCPoöt
>>4) & 1;

1796 
m_nCPö5
 = (
nCPoöt
>>5) & 1;

1798 
m_bCTRY
 = 
RY
;

1799 
m_bNKeyPadO≥n
 = 
FALSE
;

1800 
	`SëFocus
( );

1801 
	`Upd©eD©a
(
FALSE
);

1802 
	}
}

1804 
	gCV43M™uÆTe°Dlg
::
	$OnBuâ⁄CpoötTrSë
()

1806 
	`Upd©eD©a
(
TRUE
);

1807 
UINT
 
poöt_no
=
m_±CTR
;

1809 
MM
.
	`Së
(
CPOINT
, 
poöt_no
, 
TR
);

1811 
CSåög
 
°rTemp
;

1812 
°rTemp
.
	`F‹m©
("%d TR", 
poöt_no
);

1813 if(
m_li°CPoöt
.
	`FödSåög
(-1, 
°rTemp
Ë=
LB_ERR
Ëm_li°CPoöt.
	`AddSåög
(strTemp);

1814 
	}
}

1816 
	gCV43M™uÆTe°Dlg
::
	$OnBuâ⁄CpoötTrR°
()

1818 
	`Upd©eD©a
(
TRUE
);

1819 
UINT
 
poöt_no
=
m_±CTR
;

1821 
MM
.
	`R°
(
CPOINT
, 
poöt_no
, 
TR
);

1823 
CSåög
 
°rTemp
;

1824 
°rTemp
.
	`F‹m©
("%d TR", 
poöt_no
);

1825 
ödex
 = 
m_li°CPoöt
.
	`FödSåög
(-1, 
°rTemp
);

1826 if(
ödex
 !
LB_ERR
Ë
m_li°CPoöt
.
	`DñëeSåög
(index);

1827 
	}
}

1829 
	gCV43M™uÆTe°Dlg
::
	$OnBuâ⁄CpoötRySë
()

1831 
	`Upd©eD©a
(
TRUE
);

1832 
UINT
 
poöt_no
=
m_±CRY
;

1834 
MM
.
	`Së
(
CPOINT
, 
poöt_no
, 
RY
);

1835 
CSåög
 
°rTemp
;

1836 
°rTemp
.
	`F‹m©
("%d RY", 
poöt_no
);

1837 if(
m_li°CPoöt
.
	`FödSåög
(-1, 
°rTemp
Ë=
LB_ERR
Ëm_li°CPoöt.
	`AddSåög
(strTemp);

1838 
	}
}

1840 
	gCV43M™uÆTe°Dlg
::
	$OnBuâ⁄CpoötRyR°
()

1842 
	`Upd©eD©a
(
TRUE
);

1843 
UINT
 
poöt_no
=
m_±CRY
;

1845 
MM
.
	`R°
(
CPOINT
, 
poöt_no
, 
RY
);

1847 
CSåög
 
°rTemp
;

1848 
°rTemp
.
	`F‹m©
("%d RY", 
poöt_no
);

1849 
ödex
 = 
m_li°CPoöt
.
	`FödSåög
(-1, 
°rTemp
);

1850 if(
ödex
 !
LB_ERR
Ë
m_li°CPoöt
.
	`DñëeSåög
(index);

1851 
	}
}

1853 
	gCV43M™uÆTe°Dlg
::
	$OnRadioLv1
()

1855 
MM
.
	`Aµly
(
LV1
);

1856 
	}
}

1858 
	gCV43M™uÆTe°Dlg
::
	$OnRadioLv2
()

1860 
MM
.
	`Aµly
(
LV2
);

1861 
	}
}

1863 
	gCV43M™uÆTe°Dlg
::
	$OnRadioHv1
()

1865 
MM
.
	`Aµly
(
HV1
);

1866 
	}
}

1868 
	gCV43M™uÆTe°Dlg
::
	$OnRadioHv2
()

1870 
MM
.
	`Aµly
(
HV2
);

1871 
	}
}

1873 
	gCV43M™uÆTe°Dlg
::
	$OnRadioPul£
()

1875 
MM
.
	`Aµly
(
PULSE
);

1876 
	}
}

1878 
	gCV43M™uÆTe°Dlg
::
	$OnCheckDcOut
()

1880 
	`Upd©eD©a
(
TRUE
);

1881 if(
m_bDCOut
Ë
	`On
(
DC_RELAY_OUT
);

1882 
	`Off
(
DC_RELAY_OUT
);

1883 
	}
}

1885 
	gCV43M™uÆTe°Dlg
::
	$OnBuâ⁄Bªak
()

1891 
MM
.
	`Bªak
(
VB_ONLY
);

1893 ((
CBuâ⁄
*)
	`GëDlgIãm
(
IDC_RADIO_LV1
))->
	`SëCheck
(0);

1894 ((
CBuâ⁄
*)
	`GëDlgIãm
(
IDC_RADIO_LV2
))->
	`SëCheck
(0);

1895 ((
CBuâ⁄
*)
	`GëDlgIãm
(
IDC_RADIO_HV1
))->
	`SëCheck
(0);

1896 ((
CBuâ⁄
*)
	`GëDlgIãm
(
IDC_RADIO_HV2
))->
	`SëCheck
(0);

1897 ((
CBuâ⁄
*)
	`GëDlgIãm
(
IDC_RADIO_PULSE
))->
	`SëCheck
(0);

1898 
	`GëDlgIãm
(
IDC_STATIC_LV1_MNT
)->
	`SëWödowText
("0.0");

1899 
	`GëDlgIãm
(
IDC_STATIC_LV2_MNT
)->
	`SëWödowText
("0.0");

1900 
	`GëDlgIãm
(
IDC_STATIC_HV1_MNT
)->
	`SëWödowText
("0.0");

1901 
	`GëDlgIãm
(
IDC_STATIC_HV2_MNT
)->
	`SëWödowText
("0.0");

1902 
	}
}

1904 
	gCV43M™uÆTe°Dlg
::
	$OnSëfocusEdôQmBpoöt
()

1906 
	`OnSëfocusEdôBpoötTr
();

1907 
	}
}

1909 
	gCV43M™uÆTe°Dlg
::
	$OnSëfocusEdôQmCpoöt
()

1911 
	`OnSëfocusEdôCpoötTr
();

1912 
	}
}

1914 
	gCV43M™uÆTe°Dlg
::
	$OnBuâ⁄PoötSë
()

1916 
	`GëDlgIãm
(
IDC_BUTTON_POINT_SET
)->
	`E«bÀWödow
(
FALSE
);

1918 
	`OnBuâ⁄BpoötTrSë
();

1919 
	`OnBuâ⁄CpoötTrSë
();

1921 
	`GëDlgIãm
(
IDC_BUTTON_POINT_SET
)->
	`E«bÀWödow
(
TRUE
);

1922 
	}
}

1924 
	gCV43M™uÆTe°Dlg
::
	$OnBuâ⁄BoxR°
()

1926 
	`GëDlgIãm
(
IDC_BUTTON_BOX_RST
)->
	`E«bÀWödow
(
FALSE
);

1928 
MM
.
	`R°BoxAŒ
();

1930 
m_li°BPoöt
.
	`Re£tC⁄ã¡
();

1931 
m_li°CPoöt
.
	`Re£tC⁄ã¡
();

1932 
	`GëDlgIãm
(
IDC_BUTTON_BOX_RST
)->
	`E«bÀWödow
(
TRUE
);

1933 
	}
}

1935 
	gCV43M™uÆTe°Dlg
::
	$OnBuâ⁄AdRód
()

1937 
	`GëDlgIãm
(
IDC_BUTTON_AD_READ
)->
	`E«bÀWödow
(
FALSE
);

1939 if(
m_nADC_A
 =-1Ë
m_li°Msg
.
	`AddSåög
("CheckÅhe ADC-A filter, first !");

1940 
m_li°Msg
.
	`Re£tC⁄ã¡
();

1942 
	`Upd©eD©a
(
TRUE
);

1943 
UINT
 
out_vÆue
=0;

1946 
UINT
 
ãmp
 = 
MM
.
	`Gë
(
VI
);

1947 
UINT
 
nIadvÆue
 = 
ãmp
 & 0xffff;

1948 
UINT
 
nVadvÆue
 = 
ãmp
>>16 & 0xffff;

1949 
m_nIadvÆue
 = 
nIadvÆue
;

1950 
m_nVadvÆue
 = 
nVadvÆue
;

1951 
m_dIamp
 = 
	`UNIT_CONVERT
(
nIadvÆue
, 
AD_TO_I0
 + 
m_nIR™ge
-
I_RANGE0
);

1953 
m_nVB
)

1957 
m_dVvﬁt
 = 
	`UNIT_CONVERT
(
nVadvÆue
, 
AD_TO_LVOLT
);

1962 
m_dVvﬁt
 = 
	`UNIT_CONVERT
(
nVadvÆue
, 
AD_TO_HVOLT
);

1966 
m_dVvﬁt
 = 0;

1969 
	`GëDlgIãm
(
IDC_BUTTON_AD_READ
)->
	`E«bÀWödow
(
TRUE
);

1970 
	}
}

1972 
	gCV43M™uÆTe°Dlg
::
	$OnRadioB˝ld0
()

1974 
m_bBTRY
 = 
TR
;

1975 
	}
}

1977 
	gCV43M™uÆTe°Dlg
::
	$OnRadioB˝ld1
()

1979 
m_bBTRY
 = 
TR
;

1980 
	}
}

1982 
	gCV43M™uÆTe°Dlg
::
	$OnRadioB˝ld2
()

1984 
m_bBTRY
 = 
RY
;

1985 
	}
}

1987 
	gCV43M™uÆTe°Dlg
::
	$OnRadioB˝ld3
()

1989 
m_bBTRY
 = 
RY
;

1990 
	}
}

1992 
	gCV43M™uÆTe°Dlg
::
	$OnRadioC˝ld0
()

1994 
m_bCTRY
 = 
TR
;

1995 
	}
}

1997 
	gCV43M™uÆTe°Dlg
::
	$OnRadioC˝ld1
()

1999 
m_bCTRY
 = 
TR
;

2000 
	}
}

2002 
	gCV43M™uÆTe°Dlg
::
	$OnRadioC˝ld2
()

2004 
m_bCTRY
 = 
RY
;

2005 
	}
}

2007 
	gCV43M™uÆTe°Dlg
::
	$OnRadioC˝ld3
()

2009 
m_bCTRY
 = 
RY
;

2010 
	}
}

2012 
	gCV43M™uÆTe°Dlg
::
	$OnCheckVbGu¨dOn
()

2014 
	`Upd©eD©a
(
TRUE
);

2015 if(
m_bVBGu¨dOn
Ë
	`On
(
VB_GUARD_ON
);

2016 
	`Off
(
VB_GUARD_ON
);

2017 
	}
}

2019 
	gCV43M™uÆTe°Dlg
::
	$OnRadioBpoötCv
()

2021 
	`Off
(
VB_GUARD_SEL
);

2022 
	}
}

2024 
	gCV43M™uÆTe°Dlg
::
	$OnRadioBpoötCc
()

2026 
	`On
(
VB_GUARD_SEL
);

2027 
	}
}

2029 
	gCV43M™uÆTe°Dlg
::
	$OnSëfocusEdôBpoötCcV
()

2031 
	`Upd©eD©a
(
TRUE
);

2032 if(
m_bNKeyPadO≥n
 =
TRUE
) ;

2033 
m_bNKeyPadO≥n
 = 
TRUE
;

2035 if(
NKEYPAD
.
	`SëVÆue
(()
m_nBCCV
, 0, 20Ë=
FALSE
) ;

2036 
NKEYPAD
.
	`DoModÆ
();

2037 
m_nBCCV
 = ()
NKEYPAD
.
	`GëVÆue
();

2039 
m_bNKeyPadO≥n
 = 
FALSE
;

2040 
	`SëFocus
( );

2041 
	`Upd©eD©a
(
FALSE
);

2042 
	}
}

2044 
	gCV43M™uÆTe°Dlg
::
	$OnBuâ⁄BpoötCcvSë
()

2046 
	`Upd©eD©a
(
TRUE
);

2047 
UINT
 
moduÀ_id
 = 
LV1
;

2048 
UINT
 
ö_vÆue
 = 
m_nBCCV
, 
out_vÆue
 = 0;

2050 
	`UNIT_CONVERT
(
ö_vÆue
, 
VOLT_TO_DA
);

2051 
MM
.
	`Së
(
moduÀ_id
, 
ö_vÆue
);

2053 
MM
.
	`Së
(
LVB
, 
moduÀ_id
);

2054 
MM
.
	`Së
(
VBFT
);

2056 
CSåög
 
sTemp
;

2057 
UINT
 
ãmp
 = 
MM
.
	`Gë
(
V
);

2058 
sTemp
.
	`F‹m©
("%.3f", 
	`UNIT_CONVERT
(
ãmp
, 
AD_TO_LVOLT
));

2059 
	`GëDlgIãm
(
IDC_STATIC_LV1_MNT
)->
	`SëWödowText
(
sTemp
);

2060 
	}
}

2062 
	gCV43M™uÆTe°Dlg
::
	$OnCheckVcGu¨dOn
()

2064 
	`Upd©eD©a
(
TRUE
);

2065 if(
m_bVCGu¨dOn
Ë
	`On
(
VC_GUARD_ON
);

2066 
	`Off
(
VC_GUARD_ON
);

2068 
	`Re‰eshVõw
();

2069 
	}
}

2071 
	gCV43M™uÆTe°Dlg
::
	$OnRadioCpoötCv
()

2073 
	`Off
(
VC_GUARD_SEL
);

2074 
	}
}

2076 
	gCV43M™uÆTe°Dlg
::
	$OnRadioCpoötCc
()

2078 
	`On
(
VC_GUARD_SEL
);

2079 
	}
}

2081 
	gCV43M™uÆTe°Dlg
::
	$OnSëfocusEdôCpoötCcV
()

2083 
	`Upd©eD©a
(
TRUE
);

2084 if(
m_bNKeyPadO≥n
 =
TRUE
) ;

2085 
m_bNKeyPadO≥n
 = 
TRUE
;

2087 if(
NKEYPAD
.
	`SëVÆue
(()
m_nCCCV
, 0, 20Ë=
FALSE
) ;

2088 
NKEYPAD
.
	`DoModÆ
();

2089 
m_nCCCV
 = ()
NKEYPAD
.
	`GëVÆue
();

2091 
m_bNKeyPadO≥n
 = 
FALSE
;

2092 
	`SëFocus
( );

2093 
	`Upd©eD©a
(
FALSE
);

2094 
	}
}

2096 
	gCV43M™uÆTe°Dlg
::
	$OnBuâ⁄CpoötCcvSë
()

2098 
	`Upd©eD©a
(
TRUE
);

2099 
UINT
 
moduÀ_id
 = 
LV1
;

2100 
UINT
 
ö_vÆue
 = 
m_nCCCV
, 
out_vÆue
 = 0;

2102 
	`UNIT_CONVERT
(
ö_vÆue
, 
VOLT_TO_DA
);

2103 
MM
.
	`Së
(
moduÀ_id
, 
ö_vÆue
);

2105 
MM
.
	`Së
(
LVB
, 
moduÀ_id
);

2106 
MM
.
	`Së
(
VBFT
);

2108 
CSåög
 
sTemp
;

2109 
UINT
 
ãmp
 = 
MM
.
	`Gë
(
V
);

2110 
sTemp
.
	`F‹m©
("%.3f", 
	`UNIT_CONVERT
(
ãmp
, 
AD_TO_LVOLT
));

2111 
	`GëDlgIãm
(
IDC_STATIC_LV1_MNT
)->
	`SëWödowText
(
sTemp
);

2112 
	}
}

2114 
BOOL
 
	gCV43M™uÆTe°Dlg
::
	$De°royWödow
()

2116 
MM
.
	`Bªak
();

2118  
CDülog
::
	`De°royWödow
();

2119 
	}
}

2121 
	gCV43M™uÆTe°Dlg
::
	$OnBuâ⁄Inô
()

2123 
MM
.
	`Bªak
();

2125 
	`InôMembî
();

2126 
	}
}

	@C:\sonji\Bioptro\ACE400Cal_140409\ACE400Cal_140409\ACE400CalDlg.h

2 
	~"œbñc⁄åﬁ.h
"

7 #i‡!
deföed
(
AFX_ACE400CalDLG_H__E0BF6063_6F03_40DE_A586_5DB4D3DA7AA0__INCLUDED_
)

8 
	#AFX_ACE400CalDLG_H__E0BF6063_6F03_40DE_A586_5DB4D3DA7AA0__INCLUDED_


	)

10 #i‡
_MSC_VER
 > 1000

11 #¥agm®
⁄˚


17 ˛as†
	cCV43M™uÆTe°Dlg
 : 
public
 
CDülog


19 
BOOL
 
m_bNKeyPadO≥n
, 
	mm_bBTRY
, 
	mm_bCTRY
;

20 
	mm_nBPCB
, 
	mm_nCPCB
, 
	mm_nIR™ge
;

21 
UINT
 
	mm_nIadvÆue
, 
	mm_nVadvÆue
;

22 
	mm_dIamp
, 
	mm_dVvﬁt
, 
	mm_dRohm
;

25 
	mpublic
:

26 
CV43M™uÆTe°Dlg
(
CWnd
* 
pP¨ít
 = 
NULL
);

28 
InôMembî
();

29 
InôVõw
();

30 
Re‰eshVõw
(
CWnd
 *
pWnd
 = 
NULL
);

31 
CÆcPoöt
();

35 íum { 
	mIDD
 = 
IDD_ACE400Cal_DIALOG
 };

36 
CLi°Box
 
	gm_li°Msg
;

37 
CLi°Box
 
	gm_li°BPoöt
;

38 
CLi°Box
 
	gm_li°CPoöt
;

39 
UINT
 
	gm_nLV1
;

40 
UINT
 
	gm_nLV2
;

41 
UINT
 
	gm_nHV1
;

42 
UINT
 
	gm_nHV2
;

43 
UINT
 
	gm_nI
;

44 
UINT
 
	gm_nBPö
;

45 
UINT
 
	gm_nCPö
;

46 
	gm_nBBox
;

47 
	gm_nCBox
;

48 
	gm_nBPCBE«bÀ
;

49 
	gm_nCPCBE«bÀ
;

50 
	gm_nBCPLD
;

51 
	gm_nCCPLD
;

52 
BOOL
 
	gm_nBPCB0
;

53 
BOOL
 
	gm_nBPCB1
;

54 
BOOL
 
	gm_nBPCB2
;

55 
BOOL
 
	gm_nBPCB3
;

56 
BOOL
 
	gm_nBPö0
;

57 
BOOL
 
	gm_nBPö1
;

58 
BOOL
 
	gm_nBPö2
;

59 
BOOL
 
	gm_nBPö3
;

60 
BOOL
 
	gm_nBPö4
;

61 
BOOL
 
	gm_nBPö5
;

62 
BOOL
 
	gm_nCPCB0
;

63 
BOOL
 
	gm_nCPCB1
;

64 
BOOL
 
	gm_nCPCB2
;

65 
BOOL
 
	gm_nCPCB3
;

66 
BOOL
 
	gm_nCPö0
;

67 
BOOL
 
	gm_nCPö1
;

68 
BOOL
 
	gm_nCPö2
;

69 
BOOL
 
	gm_nCPö3
;

70 
BOOL
 
	gm_nCPö4
;

71 
BOOL
 
	gm_nCPö5
;

72 
CLabñC⁄åﬁ
 
	gm_lbIamp
;

73 
CLabñC⁄åﬁ
 
	gm_lbVvﬁt
;

74 
CLabñC⁄åﬁ
 
	gm_lbRohm
;

75 
BOOL
 
	gm_nS∑rkOn
;

76 
UINT
 
	gm_nS∑rk
;

77 
BOOL
 
	gm_bIHighGaöMode
;

78 
BOOL
 
	gm_bFWHighGaöMode
;

79 
BOOL
 
	gm_bDCOut
;

80 
UINT
 
	gm_±BTR
;

81 
UINT
 
	gm_±BRY
;

82 
UINT
 
	gm_±CTR
;

83 
UINT
 
	gm_±CRY
;

84 
BOOL
 
	gm_bVBGu¨dOn
;

85 
BOOL
 
	gm_bVCGu¨dOn
;

86 
UINT
 
	gm_nBCCV
;

87 
UINT
 
	gm_nCCCV
;

88 
	gm_nBCVC
;

89 
	gm_nCCVC
;

90 
BOOL
 
	gm_bPul£
;

91 
	gm_nADC_B
;

92 
	gm_nADC_A
;

93 
	gm_nHLVC
;

94 
	gm_nHVOGaö
;

95 
	gm_nHVOOff£t
;

96 
	gm_nICC
;

97 
	gm_nVB
;

98 
	gm_nPul£Fªq
;

99 
	gm_nPul£Mó
;

100 
	gm_nPul£Vﬁt
;

101 
UINT
 
	gm_adcHV1
;

102 
UINT
 
	gm_adcHV2
;

103 
UINT
 
	gm_adcLV1
;

104 
UINT
 
	gm_adcLV2
;

105 
	gm_nIRng
;

110 
	gpublic
:

111 
vútuÆ
 
BOOL
 
PªTøn¶©eMesßge
(
MSG
* 
pMsg
);

112 
vútuÆ
 
BOOL
 
De°royWödow
();

113 
	g¥Ÿe˘ed
:

114 
vútuÆ
 
DoD©aExch™ge
(
CD©aExch™ge
* 
pDX
);

118 
	g¥Ÿe˘ed
:

119 
HICON
 
m_hIc⁄
;

123 
vútuÆ
 
BOOL
 
OnInôDülog
();

124 
afx_msg
 
OnSysComm™d
(
UINT
 
nID
, 
LPARAM
 
lP¨am
);

125 
afx_msg
 
OnPaöt
();

126 
afx_msg
 
HCURSOR
 
OnQuîyDøgIc⁄
();

127 
afx_msg
 
HBRUSH
 
OnCéCﬁ‹
(
CDC
* 
pDC
, 
CWnd
* 
pWnd
, 
UINT
 
nCéCﬁ‹
);

128 
afx_msg
 
OnTimî
(
UINT
 
nIDEvít
);

129 
afx_msg
 
OnBuâ⁄Lv1Së
();

130 
afx_msg
 
OnBuâ⁄Lv2Së
();

131 
afx_msg
 
OnBuâ⁄Hv1Së
();

132 
afx_msg
 
OnBuâ⁄Hv2Së
();

133 
afx_msg
 
OnSëfocusEdôLv1
();

134 
afx_msg
 
OnSëfocusEdôLv2
();

135 
afx_msg
 
OnSëfocusEdôHv1
();

136 
afx_msg
 
OnSëfocusEdôHv2
();

137 
afx_msg
 
OnSëfocusEdôI
();

138 
afx_msg
 
OnBuâ⁄ISë
();

139 
afx_msg
 
OnRadioIf·
();

140 
afx_msg
 
OnRadioIs·
();

141 
afx_msg
 
OnRadioVb·
();

142 
afx_msg
 
OnRadioHvc
();

143 
afx_msg
 
OnRadioLvc
();

144 
afx_msg
 
OnRadioVcf·
();

145 
afx_msg
 
OnRadioVcs·
();

146 
afx_msg
 
OnDbl˛kLi°Bpoöt
();

147 
afx_msg
 
OnSëfocusEdôBpö
();

148 
afx_msg
 
OnDbl˛kLi°Cpoöt
();

149 
afx_msg
 
OnSëfocusEdôCpö
();

150 
afx_msg
 
OnRadioLv1
();

151 
afx_msg
 
OnRadioLv2
();

152 
afx_msg
 
OnRadioHv1
();

153 
afx_msg
 
OnRadioHv2
();

154 
afx_msg
 
OnBuâ⁄Bªak
();

155 
afx_msg
 
OnBuâ⁄PoötSë
();

156 
afx_msg
 
OnBuâ⁄BoxR°
();

157 
afx_msg
 
OnBuâ⁄AdRód
();

158 
afx_msg
 
OnSëfocusEdôQmBpoöt
();

159 
afx_msg
 
OnSëfocusEdôQmCpoöt
();

160 
afx_msg
 
OnShowWödow
(
BOOL
 
bShow
, 
UINT
 
nSètus
);

161 
afx_msg
 
OnBuâ⁄VbOutSë
();

162 
afx_msg
 
OnBuâ⁄S∑rkSë
();

163 
afx_msg
 
OnSëfocusEdôS∑rk
();

164 
afx_msg
 
OnCheckS∑rkOn
();

165 
afx_msg
 
OnRadioPul£
();

166 
afx_msg
 
OnCheckDcOut
();

167 
afx_msg
 
OnRadioP·Fa°
();

168 
afx_msg
 
OnRadioP·Slow
();

169 
afx_msg
 
OnRadioPul£Vﬁt
();

170 
afx_msg
 
OnRadioPul£Vﬁt1
();

171 
afx_msg
 
OnRadioPul£Vﬁt2
();

172 
afx_msg
 
OnRadioPul£Vﬁt3
();

173 
afx_msg
 
OnRadioPul£Fªq
();

174 
afx_msg
 
OnRadioPul£Fªq1
();

175 
afx_msg
 
OnRadioPul£Fªq2
();

176 
afx_msg
 
OnRadioPul£Fªq3
();

177 
afx_msg
 
OnRadioPul£MósuªCav0
();

178 
afx_msg
 
OnRadioPul£MósuªCav1
();

179 
afx_msg
 
OnRadioPul£MósuªCav2
();

180 
afx_msg
 
OnRadioPul£MósuªCav3
();

181 
afx_msg
 
OnRadioIRng0
();

182 
afx_msg
 
OnRadioIRng1
();

183 
afx_msg
 
OnRadioIRng2
();

184 
afx_msg
 
OnRadioIRng3
();

185 
afx_msg
 
OnRadioIRng4
();

186 
afx_msg
 
OnRadioIRng5
();

187 
afx_msg
 
OnRadioIRng6
();

188 
afx_msg
 
OnRadioICc
();

189 
afx_msg
 
OnRadioICv
();

190 
afx_msg
 
OnCheckIHighGaö
();

191 
afx_msg
 
OnRadioHvoGaö0
();

192 
afx_msg
 
OnRadioHvoGaö1
();

193 
afx_msg
 
OnRadioHvoGaö2
();

194 
afx_msg
 
OnRadioHvoGaö3
();

195 
afx_msg
 
OnRadioHvoOf°0
();

196 
afx_msg
 
OnRadioHvoOf°1
();

197 
afx_msg
 
OnRadioHvoOf°2
();

198 
afx_msg
 
OnRadioHvoOf°3
();

199 
afx_msg
 
OnCheckFwHighGaö
();

200 
afx_msg
 
OnBuâ⁄BpoötTrSë
();

201 
afx_msg
 
OnBuâ⁄BpoötTrR°
();

202 
afx_msg
 
OnBuâ⁄BpoötRySë
();

203 
afx_msg
 
OnBuâ⁄BpoötRyR°
();

204 
afx_msg
 
OnSëfocusEdôBpoötTr
();

205 
afx_msg
 
OnSëfocusEdôBpoötRy
();

206 
afx_msg
 
OnSëfocusEdôCpoötTr
();

207 
afx_msg
 
OnSëfocusEdôCpoötRy
();

208 
afx_msg
 
OnBuâ⁄CpoötTrSë
();

209 
afx_msg
 
OnBuâ⁄CpoötTrR°
();

210 
afx_msg
 
OnBuâ⁄CpoötRySë
();

211 
afx_msg
 
OnBuâ⁄CpoötRyR°
();

212 
afx_msg
 
OnRadioB˝ld0
();

213 
afx_msg
 
OnRadioB˝ld1
();

214 
afx_msg
 
OnRadioB˝ld2
();

215 
afx_msg
 
OnRadioB˝ld3
();

216 
afx_msg
 
OnRadioC˝ld0
();

217 
afx_msg
 
OnRadioC˝ld1
();

218 
afx_msg
 
OnRadioC˝ld2
();

219 
afx_msg
 
OnRadioC˝ld3
();

220 
afx_msg
 
OnSëfocusEdôBpoötCcV
();

221 
afx_msg
 
OnSëfocusEdôCpoötCcV
();

222 
afx_msg
 
OnRadioBpoötCv
();

223 
afx_msg
 
OnRadioBpoötCc
();

224 
afx_msg
 
OnRadioCpoötCv
();

225 
afx_msg
 
OnRadioCpoötCc
();

226 
afx_msg
 
OnCheckVbGu¨dOn
();

227 
afx_msg
 
OnCheckVcGu¨dOn
();

228 
afx_msg
 
OnBuâ⁄BpoötCcvSë
();

229 
afx_msg
 
OnBuâ⁄CpoötCcvSë
();

230 
afx_msg
 
OnCheckPul£
();

231 
afx_msg
 
OnRadioHvo·
();

232 
afx_msg
 
OnRadioFw·
();

233 
afx_msg
 
OnBuâ⁄Inô
();

234 
	$DECLARE_EVENTSINK_MAP
()

236 
	`DECLARE_MESSAGE_MAP
()

237 
	}
};

	@C:\sonji\Bioptro\ACE400Cal_140409\ACE400Cal_140409\font.cpp

7 
	~"°dafx.h
"

8 
	~"f⁄t.h
"

14 
CSåög
 
	gCOÀF⁄t
::
	$GëName
()

16 
CSåög
 
ªsu…
;

17 
	`GëPr›îty
(0x0, 
VT_BSTR
, (*)&
ªsu…
);

18  
ªsu…
;

19 
	}
}

21 
	gCOÀF⁄t
::
	$SëName
(
LPCTSTR
 
¥›VÆ
)

23 
	`SëPr›îty
(0x0, 
VT_BSTR
, 
¥›VÆ
);

24 
	}
}

26 
CY
 
	gCOÀF⁄t
::
	$GëSize
()

28 
CY
 
ªsu…
;

29 
	`GëPr›îty
(0x2, 
VT_CY
, (*)&
ªsu…
);

30  
ªsu…
;

31 
	}
}

33 
	gCOÀF⁄t
::
	$SëSize
(c⁄° 
CY
& 
¥›VÆ
)

35 
	`SëPr›îty
(0x2, 
VT_CY
, &
¥›VÆ
);

36 
	}
}

38 
BOOL
 
	gCOÀF⁄t
::
	$GëBﬁd
()

40 
BOOL
 
ªsu…
;

41 
	`GëPr›îty
(0x3, 
VT_BOOL
, (*)&
ªsu…
);

42  
ªsu…
;

43 
	}
}

45 
	gCOÀF⁄t
::
	$SëBﬁd
(
BOOL
 
¥›VÆ
)

47 
	`SëPr›îty
(0x3, 
VT_BOOL
, 
¥›VÆ
);

48 
	}
}

50 
BOOL
 
	gCOÀF⁄t
::
	$GëIèlic
()

52 
BOOL
 
ªsu…
;

53 
	`GëPr›îty
(0x4, 
VT_BOOL
, (*)&
ªsu…
);

54  
ªsu…
;

55 
	}
}

57 
	gCOÀF⁄t
::
	$SëIèlic
(
BOOL
 
¥›VÆ
)

59 
	`SëPr›îty
(0x4, 
VT_BOOL
, 
¥›VÆ
);

60 
	}
}

62 
BOOL
 
	gCOÀF⁄t
::
	$GëUndîlöe
()

64 
BOOL
 
ªsu…
;

65 
	`GëPr›îty
(0x5, 
VT_BOOL
, (*)&
ªsu…
);

66  
ªsu…
;

67 
	}
}

69 
	gCOÀF⁄t
::
	$SëUndîlöe
(
BOOL
 
¥›VÆ
)

71 
	`SëPr›îty
(0x5, 
VT_BOOL
, 
¥›VÆ
);

72 
	}
}

74 
BOOL
 
	gCOÀF⁄t
::
	$GëSåikëhrough
()

76 
BOOL
 
ªsu…
;

77 
	`GëPr›îty
(0x6, 
VT_BOOL
, (*)&
ªsu…
);

78  
ªsu…
;

79 
	}
}

81 
	gCOÀF⁄t
::
	$SëSåikëhrough
(
BOOL
 
¥›VÆ
)

83 
	`SëPr›îty
(0x6, 
VT_BOOL
, 
¥›VÆ
);

84 
	}
}

86 
	gCOÀF⁄t
::
	$GëWeight
()

88 
ªsu…
;

89 
	`GëPr›îty
(0x7, 
VT_I2
, (*)&
ªsu…
);

90  
ªsu…
;

91 
	}
}

93 
	gCOÀF⁄t
::
	$SëWeight
(
¥›VÆ
)

95 
	`SëPr›îty
(0x7, 
VT_I2
, 
¥›VÆ
);

96 
	}
}

98 
	gCOÀF⁄t
::
	$GëCh¨£t
()

100 
ªsu…
;

101 
	`GëPr›îty
(0x8, 
VT_I2
, (*)&
ªsu…
);

102  
ªsu…
;

103 
	}
}

105 
	gCOÀF⁄t
::
	$SëCh¨£t
(
¥›VÆ
)

107 
	`SëPr›îty
(0x8, 
VT_I2
, 
¥›VÆ
);

108 
	}
}

	@C:\sonji\Bioptro\ACE400Cal_140409\ACE400Cal_140409\font.h

9 ˛as†
	cCOÀF⁄t
 : 
public
 
COÀDi•©chDrivî


11 
public
:

12 
	$COÀF⁄t
() {}

13 
	$COÀF⁄t
(
LPDISPATCH
 
pDi•©ch
Ë: 
	$COÀDi•©chDrivî
(
pDi•©ch
Ë{
	}
}

14 
	$COÀF⁄t
(c⁄° 
COÀF⁄t
& 
di•©chSrc
Ë: 
	$COÀDi•©chDrivî
(
di•©chSrc
Ë{
	}
}

17 
public
:

18 
CSåög
 
GëName
();

19 
SëName
(
LPCTSTR
);

20 
CY
 
GëSize
();

21 
SëSize
(c⁄° 
CY
&);

22 
BOOL
 
GëBﬁd
();

23 
SëBﬁd
(
BOOL
);

24 
BOOL
 
GëIèlic
();

25 
SëIèlic
(
BOOL
);

26 
BOOL
 
GëUndîlöe
();

27 
SëUndîlöe
(
BOOL
);

28 
BOOL
 
GëSåikëhrough
();

29 
SëSåikëhrough
(
BOOL
);

30 
GëWeight
();

31 
SëWeight
();

32 
GëCh¨£t
();

33 
SëCh¨£t
();

36 
	gpublic
:

	@C:\sonji\Bioptro\ACE400Cal_140409\ACE400Cal_140409\labelcontrol.cpp

7 
	~"°dafx.h
"

8 
	~"œbñc⁄åﬁ.h
"

11 
	~"F⁄t.h
"

12 
	~"Pi˘uª.h
"

17 
	$IMPLEMENT_DYNCREATE
(
CLabñC⁄åﬁ
, 
CWnd
)

25 
CLabñC⁄åﬁ
::
	$SëAutoSize
(
BOOL
 
bNewVÆue
)

27 
BYTE
 
∑rms
[] =

28 
VTS_BOOL
;

29 
	`InvokeHñ≥r
(0xffff„0c, 
DISPATCH_PROPERTYPUT
, 
VT_EMPTY
, 
NULL
, 
∑rms
,

30 
bNewVÆue
);

31 
	}
}

33 
BOOL
 
	gCLabñC⁄åﬁ
::
	$GëAutoSize
()

35 
BOOL
 
ªsu…
;

36 
	`InvokeHñ≥r
(0xffff„0c, 
DISPATCH_PROPERTYGET
, 
VT_BOOL
, (*)&
ªsu…
, 
NULL
);

37  
ªsu…
;

38 
	}
}

40 
	gCLabñC⁄åﬁ
::
	$SëBackCﬁ‹
(
nNewVÆue
)

42 
BYTE
 
∑rms
[] =

43 
VTS_I4
;

44 
	`InvokeHñ≥r
(
DISPID_BACKCOLOR
, 
DISPATCH_PROPERTYPUT
, 
VT_EMPTY
, 
NULL
, 
∑rms
,

45 
nNewVÆue
);

46 
	}
}

48 
	gCLabñC⁄åﬁ
::
	$GëBackCﬁ‹
()

50 
ªsu…
;

51 
	`InvokeHñ≥r
(
DISPID_BACKCOLOR
, 
DISPATCH_PROPERTYGET
, 
VT_I4
, (*)&
ªsu…
, 
NULL
);

52  
ªsu…
;

53 
	}
}

55 
	gCLabñC⁄åﬁ
::
	$SëBackStyÀ
(
nNewVÆue
)

57 
BYTE
 
∑rms
[] =

58 
VTS_I4
;

59 
	`InvokeHñ≥r
(0xffff„0a, 
DISPATCH_PROPERTYPUT
, 
VT_EMPTY
, 
NULL
, 
∑rms
,

60 
nNewVÆue
);

61 
	}
}

63 
	gCLabñC⁄åﬁ
::
	$GëBackStyÀ
()

65 
ªsu…
;

66 
	`InvokeHñ≥r
(0xffff„0a, 
DISPATCH_PROPERTYGET
, 
VT_I4
, (*)&
ªsu…
, 
NULL
);

67  
ªsu…
;

68 
	}
}

70 
	gCLabñC⁄åﬁ
::
	$SëB‹dîCﬁ‹
(
nNewVÆue
)

72 
BYTE
 
∑rms
[] =

73 
VTS_I4
;

74 
	`InvokeHñ≥r
(0xffff„09, 
DISPATCH_PROPERTYPUT
, 
VT_EMPTY
, 
NULL
, 
∑rms
,

75 
nNewVÆue
);

76 
	}
}

78 
	gCLabñC⁄åﬁ
::
	$GëB‹dîCﬁ‹
()

80 
ªsu…
;

81 
	`InvokeHñ≥r
(0xffff„09, 
DISPATCH_PROPERTYGET
, 
VT_I4
, (*)&
ªsu…
, 
NULL
);

82  
ªsu…
;

83 
	}
}

85 
	gCLabñC⁄åﬁ
::
	$SëB‹dîStyÀ
(
nNewVÆue
)

87 
BYTE
 
∑rms
[] =

88 
VTS_I4
;

89 
	`InvokeHñ≥r
(
DISPID_BORDERSTYLE
, 
DISPATCH_PROPERTYPUT
, 
VT_EMPTY
, 
NULL
, 
∑rms
,

90 
nNewVÆue
);

91 
	}
}

93 
	gCLabñC⁄åﬁ
::
	$GëB‹dîStyÀ
()

95 
ªsu…
;

96 
	`InvokeHñ≥r
(
DISPID_BORDERSTYLE
, 
DISPATCH_PROPERTYGET
, 
VT_I4
, (*)&
ªsu…
, 
NULL
);

97  
ªsu…
;

98 
	}
}

100 
	gCLabñC⁄åﬁ
::
	$SëC≠ti⁄
(
LPCTSTR
 
ÕszNewVÆue
)

102 
BYTE
 
∑rms
[] =

103 
VTS_BSTR
;

104 
	`InvokeHñ≥r
(0x0, 
DISPATCH_PROPERTYPUT
, 
VT_EMPTY
, 
NULL
, 
∑rms
,

105 
ÕszNewVÆue
);

106 
	}
}

108 
CSåög
 
	gCLabñC⁄åﬁ
::
	$GëC≠ti⁄
()

110 
CSåög
 
ªsu…
;

111 
	`InvokeHñ≥r
(0x0, 
DISPATCH_PROPERTYGET
, 
VT_BSTR
, (*)&
ªsu…
, 
NULL
);

112  
ªsu…
;

113 
	}
}

115 
	gCLabñC⁄åﬁ
::
	$SëE«bÀd
(
BOOL
 
bNewVÆue
)

117 
BYTE
 
∑rms
[] =

118 
VTS_BOOL
;

119 
	`InvokeHñ≥r
(
DISPID_ENABLED
, 
DISPATCH_PROPERTYPUT
, 
VT_EMPTY
, 
NULL
, 
∑rms
,

120 
bNewVÆue
);

121 
	}
}

123 
BOOL
 
	gCLabñC⁄åﬁ
::
	$GëE«bÀd
()

125 
BOOL
 
ªsu…
;

126 
	`InvokeHñ≥r
(
DISPID_ENABLED
, 
DISPATCH_PROPERTYGET
, 
VT_BOOL
, (*)&
ªsu…
, 
NULL
);

127  
ªsu…
;

128 
	}
}

130 
	gCLabñC⁄åﬁ
::
	$SëRefF⁄t
(
LPDISPATCH
 
√wVÆue
)

132 
BYTE
 
∑rms
[] =

133 
VTS_DISPATCH
;

134 
	`InvokeHñ≥r
(
DISPID_FONT
, 
DISPATCH_PROPERTYPUTREF
, 
VT_EMPTY
, 
NULL
, 
∑rms
,

135 
√wVÆue
);

136 
	}
}

138 
COÀF⁄t
 
	gCLabñC⁄åﬁ
::
	$GëF⁄t
()

140 
LPDISPATCH
 
pDi•©ch
;

141 
	`InvokeHñ≥r
(
DISPID_FONT
, 
DISPATCH_PROPERTYGET
, 
VT_DISPATCH
, (*)&
pDi•©ch
, 
NULL
);

142  
	`COÀF⁄t
(
pDi•©ch
);

143 
	}
}

145 
	gCLabñC⁄åﬁ
::
	$SëF‹eCﬁ‹
(
nNewVÆue
)

147 
BYTE
 
∑rms
[] =

148 
VTS_I4
;

149 
	`InvokeHñ≥r
(
DISPID_FORECOLOR
, 
DISPATCH_PROPERTYPUT
, 
VT_EMPTY
, 
NULL
, 
∑rms
,

150 
nNewVÆue
);

151 
	}
}

153 
	gCLabñC⁄åﬁ
::
	$GëF‹eCﬁ‹
()

155 
ªsu…
;

156 
	`InvokeHñ≥r
(
DISPID_FORECOLOR
, 
DISPATCH_PROPERTYGET
, 
VT_I4
, (*)&
ªsu…
, 
NULL
);

157  
ªsu…
;

158 
	}
}

160 
	gCLabñC⁄åﬁ
::
	$SëMou£Ic⁄
(
LPDISPATCH
 
√wVÆue
)

162 
BYTE
 
∑rms
[] =

163 
VTS_DISPATCH
;

164 
	`InvokeHñ≥r
(0xfffffdf6, 
DISPATCH_PROPERTYPUT
, 
VT_EMPTY
, 
NULL
, 
∑rms
,

165 
√wVÆue
);

166 
	}
}

168 
	gCLabñC⁄åﬁ
::
	$SëRefMou£Ic⁄
(
LPDISPATCH
 
√wVÆue
)

170 
BYTE
 
∑rms
[] =

171 
VTS_DISPATCH
;

172 
	`InvokeHñ≥r
(0xfffffdf6, 
DISPATCH_PROPERTYPUTREF
, 
VT_EMPTY
, 
NULL
, 
∑rms
,

173 
√wVÆue
);

174 
	}
}

176 
CPi˘uª
 
	gCLabñC⁄åﬁ
::
	$GëMou£Ic⁄
()

178 
LPDISPATCH
 
pDi•©ch
;

179 
	`InvokeHñ≥r
(0xfffffdf6, 
DISPATCH_PROPERTYGET
, 
VT_DISPATCH
, (*)&
pDi•©ch
, 
NULL
);

180  
	`CPi˘uª
(
pDi•©ch
);

181 
	}
}

183 
	gCLabñC⁄åﬁ
::
	$SëMou£Poöãr
(
nNewVÆue
)

185 
BYTE
 
∑rms
[] =

186 
VTS_I4
;

187 
	`InvokeHñ≥r
(0xfffffdf7, 
DISPATCH_PROPERTYPUT
, 
VT_EMPTY
, 
NULL
, 
∑rms
,

188 
nNewVÆue
);

189 
	}
}

191 
	gCLabñC⁄åﬁ
::
	$GëMou£Poöãr
()

193 
ªsu…
;

194 
	`InvokeHñ≥r
(0xfffffdf7, 
DISPATCH_PROPERTYGET
, 
VT_I4
, (*)&
ªsu…
, 
NULL
);

195  
ªsu…
;

196 
	}
}

198 
	gCLabñC⁄åﬁ
::
	$SëPi˘uª
(
LPDISPATCH
 
√wVÆue
)

200 
BYTE
 
∑rms
[] =

201 
VTS_DISPATCH
;

202 
	`InvokeHñ≥r
(0xfffffdf5, 
DISPATCH_PROPERTYPUT
, 
VT_EMPTY
, 
NULL
, 
∑rms
,

203 
√wVÆue
);

204 
	}
}

206 
	gCLabñC⁄åﬁ
::
	$SëRefPi˘uª
(
LPDISPATCH
 
√wVÆue
)

208 
BYTE
 
∑rms
[] =

209 
VTS_DISPATCH
;

210 
	`InvokeHñ≥r
(0xfffffdf5, 
DISPATCH_PROPERTYPUTREF
, 
VT_EMPTY
, 
NULL
, 
∑rms
,

211 
√wVÆue
);

212 
	}
}

214 
CPi˘uª
 
	gCLabñC⁄åﬁ
::
	$GëPi˘uª
()

216 
LPDISPATCH
 
pDi•©ch
;

217 
	`InvokeHñ≥r
(0xfffffdf5, 
DISPATCH_PROPERTYGET
, 
VT_DISPATCH
, (*)&
pDi•©ch
, 
NULL
);

218  
	`CPi˘uª
(
pDi•©ch
);

219 
	}
}

221 
	gCLabñC⁄åﬁ
::
	$SëPi˘uªPosôi⁄
(
nNewVÆue
)

223 
BYTE
 
∑rms
[] =

224 
VTS_I4
;

225 
	`InvokeHñ≥r
(0xb, 
DISPATCH_PROPERTYPUT
, 
VT_EMPTY
, 
NULL
, 
∑rms
,

226 
nNewVÆue
);

227 
	}
}

229 
	gCLabñC⁄åﬁ
::
	$GëPi˘uªPosôi⁄
()

231 
ªsu…
;

232 
	`InvokeHñ≥r
(0xb, 
DISPATCH_PROPERTYGET
, 
VT_I4
, (*)&
ªsu…
, 
NULL
);

233  
ªsu…
;

234 
	}
}

236 
	gCLabñC⁄åﬁ
::
	$SëS≥cülEf„˘
(
nNewVÆue
)

238 
BYTE
 
∑rms
[] =

239 
VTS_I4
;

240 
	`InvokeHñ≥r
(0xc, 
DISPATCH_PROPERTYPUT
, 
VT_EMPTY
, 
NULL
, 
∑rms
,

241 
nNewVÆue
);

242 
	}
}

244 
	gCLabñC⁄åﬁ
::
	$GëS≥cülEf„˘
()

246 
ªsu…
;

247 
	`InvokeHñ≥r
(0xc, 
DISPATCH_PROPERTYGET
, 
VT_I4
, (*)&
ªsu…
, 
NULL
);

248  
ªsu…
;

249 
	}
}

251 
	gCLabñC⁄åﬁ
::
	$SëTextAlign
(
nNewVÆue
)

253 
BYTE
 
∑rms
[] =

254 
VTS_I4
;

255 
	`InvokeHñ≥r
(0xd, 
DISPATCH_PROPERTYPUT
, 
VT_EMPTY
, 
NULL
, 
∑rms
,

256 
nNewVÆue
);

257 
	}
}

259 
	gCLabñC⁄åﬁ
::
	$GëTextAlign
()

261 
ªsu…
;

262 
	`InvokeHñ≥r
(0xd, 
DISPATCH_PROPERTYGET
, 
VT_I4
, (*)&
ªsu…
, 
NULL
);

263  
ªsu…
;

264 
	}
}

266 
	gCLabñC⁄åﬁ
::
	$SëW‹dWøp
(
BOOL
 
bNewVÆue
)

268 
BYTE
 
∑rms
[] =

269 
VTS_BOOL
;

270 
	`InvokeHñ≥r
(0xfffffde8, 
DISPATCH_PROPERTYPUT
, 
VT_EMPTY
, 
NULL
, 
∑rms
,

271 
bNewVÆue
);

272 
	}
}

274 
BOOL
 
	gCLabñC⁄åﬁ
::
	$GëW‹dWøp
()

276 
BOOL
 
ªsu…
;

277 
	`InvokeHñ≥r
(0xfffffde8, 
DISPATCH_PROPERTYGET
, 
VT_BOOL
, (*)&
ªsu…
, 
NULL
);

278  
ªsu…
;

279 
	}
}

281 
	gCLabñC⁄åﬁ
::
	$SëAc˚Àøt‹
(
LPCTSTR
 
ÕszNewVÆue
)

283 
BYTE
 
∑rms
[] =

284 
VTS_BSTR
;

285 
	`InvokeHñ≥r
(0xfffffde1, 
DISPATCH_PROPERTYPUT
, 
VT_EMPTY
, 
NULL
, 
∑rms
,

286 
ÕszNewVÆue
);

287 
	}
}

289 
CSåög
 
	gCLabñC⁄åﬁ
::
	$GëAc˚Àøt‹
()

291 
CSåög
 
ªsu…
;

292 
	`InvokeHñ≥r
(0xfffffde1, 
DISPATCH_PROPERTYGET
, 
VT_BSTR
, (*)&
ªsu…
, 
NULL
);

293  
ªsu…
;

294 
	}
}

	@C:\sonji\Bioptro\ACE400Cal_140409\ACE400Cal_140409\labelcontrol.h

1 #i‡!
deföed
(
AFX_LABELCONTROL_H__40217C5B_09A9_412D_9896_EB425CA14E16__INCLUDED_
)

2 
	#AFX_LABELCONTROL_H__40217C5B_09A9_412D_9896_EB425CA14E16__INCLUDED_


	)

4 #i‡
_MSC_VER
 > 1000

5 #¥agm®
⁄˚


14 
˛ass
 
	gCOÀF⁄t
;

15 
˛ass
 
	gCPi˘uª
;

20 ˛as†
	cCLabñC⁄åﬁ
 : 
public
 
CWnd


22 
¥Ÿe˘ed
:

23 
	$DECLARE_DYNCREATE
(
CLabñC⁄åﬁ
)

24 
public
:

25 
CLSID
 c⁄°& 
	$GëClsid
()

27 
CLSID
 c⁄° 
˛sid


29  
˛sid
;

31 
vútuÆ
 
BOOL
 
	$Cª©e
(
LPCTSTR
 
ÕszCœssName
,

32 
LPCTSTR
 
ÕszWödowName
, 
DWORD
 
dwStyÀ
,

33 c⁄° 
RECT
& 
ª˘
,

34 
CWnd
* 
pP¨ítWnd
, 
UINT
 
nID
,

35 
CCª©eC⁄ãxt
* 
pC⁄ãxt
 = 
NULL
)

36 {  
	`Cª©eC⁄åﬁ
(
	`GëClsid
(), 
ÕszWödowName
, 
dwStyÀ
, 
ª˘
, 
pP¨ítWnd
, 
nID
); 
	}
}

38 
BOOL
 
	$Cª©e
(
LPCTSTR
 
ÕszWödowName
, 
DWORD
 
dwStyÀ
,

39 c⁄° 
RECT
& 
ª˘
, 
CWnd
* 
pP¨ítWnd
, 
UINT
 
nID
,

40 
CFûe
* 
pPîsi°
 = 
NULL
, 
BOOL
 
bSt‹age
 = 
FALSE
,

41 
BSTR
 
b°rLicKey
 = 
NULL
)

42 {  
	`Cª©eC⁄åﬁ
(
	`GëClsid
(), 
ÕszWödowName
, 
dwStyÀ
, 
ª˘
, 
pP¨ítWnd
, 
nID
,

43 
pPîsi°
, 
bSt‹age
, 
b°rLicKey
); 
	}
}

46 
	gpublic
:

49 
public
:

50 
SëAutoSize
(
BOOL
 
bNewVÆue
);

51 
BOOL
 
GëAutoSize
();

52 
SëBackCﬁ‹
(
nNewVÆue
);

53 
GëBackCﬁ‹
();

54 
SëBackStyÀ
(
nNewVÆue
);

55 
GëBackStyÀ
();

56 
SëB‹dîCﬁ‹
(
nNewVÆue
);

57 
GëB‹dîCﬁ‹
();

58 
SëB‹dîStyÀ
(
nNewVÆue
);

59 
GëB‹dîStyÀ
();

60 
SëC≠ti⁄
(
LPCTSTR
 
ÕszNewVÆue
);

61 
CSåög
 
GëC≠ti⁄
();

62 
SëE«bÀd
(
BOOL
 
bNewVÆue
);

63 
BOOL
 
GëE«bÀd
();

64 
SëRefF⁄t
(
LPDISPATCH
 
√wVÆue
);

65 
COÀF⁄t
 
GëF⁄t
();

66 
SëF‹eCﬁ‹
(
nNewVÆue
);

67 
GëF‹eCﬁ‹
();

68 
SëMou£Ic⁄
(
LPDISPATCH
 
√wVÆue
);

69 
SëRefMou£Ic⁄
(
LPDISPATCH
 
√wVÆue
);

70 
CPi˘uª
 
GëMou£Ic⁄
();

71 
SëMou£Poöãr
(
nNewVÆue
);

72 
GëMou£Poöãr
();

73 
SëPi˘uª
(
LPDISPATCH
 
√wVÆue
);

74 
SëRefPi˘uª
(
LPDISPATCH
 
√wVÆue
);

75 
CPi˘uª
 
GëPi˘uª
();

76 
SëPi˘uªPosôi⁄
(
nNewVÆue
);

77 
GëPi˘uªPosôi⁄
();

78 
SëS≥cülEf„˘
(
nNewVÆue
);

79 
GëS≥cülEf„˘
();

80 
SëTextAlign
(
nNewVÆue
);

81 
GëTextAlign
();

82 
SëW‹dWøp
(
BOOL
 
bNewVÆue
);

83 
BOOL
 
GëW‹dWøp
();

84 
SëAc˚Àøt‹
(
LPCTSTR
 
ÕszNewVÆue
);

85 
CSåög
 
GëAc˚Àøt‹
();

	@C:\sonji\Bioptro\ACE400Cal_140409\ACE400Cal_140409\picture.cpp

7 
	~"°dafx.h
"

8 
	~"pi˘uª.h
"

14 
	gCPi˘uª
::
	$GëH™dÀ
()

16 
ªsu…
;

17 
	`GëPr›îty
(0x0, 
VT_I4
, (*)&
ªsu…
);

18  
ªsu…
;

19 
	}
}

21 
	gCPi˘uª
::
	$GëHPÆ
()

23 
ªsu…
;

24 
	`GëPr›îty
(0x2, 
VT_I4
, (*)&
ªsu…
);

25  
ªsu…
;

26 
	}
}

28 
	gCPi˘uª
::
	$SëHPÆ
(
¥›VÆ
)

30 
	`SëPr›îty
(0x2, 
VT_I4
, 
¥›VÆ
);

31 
	}
}

33 
	gCPi˘uª
::
	$GëTy≥
()

35 
ªsu…
;

36 
	`GëPr›îty
(0x3, 
VT_I2
, (*)&
ªsu…
);

37  
ªsu…
;

38 
	}
}

40 
	gCPi˘uª
::
	$GëWidth
()

42 
ªsu…
;

43 
	`GëPr›îty
(0x4, 
VT_I4
, (*)&
ªsu…
);

44  
ªsu…
;

45 
	}
}

47 
	gCPi˘uª
::
	$GëHeight
()

49 
ªsu…
;

50 
	`GëPr›îty
(0x5, 
VT_I4
, (*)&
ªsu…
);

51  
ªsu…
;

52 
	}
}

	@C:\sonji\Bioptro\ACE400Cal_140409\ACE400Cal_140409\picture.h

9 ˛as†
	cCPi˘uª
 : 
public
 
COÀDi•©chDrivî


11 
public
:

12 
	$CPi˘uª
() {}

13 
	$CPi˘uª
(
LPDISPATCH
 
pDi•©ch
Ë: 
	$COÀDi•©chDrivî
(
pDi•©ch
Ë{
	}
}

14 
	$CPi˘uª
(c⁄° 
CPi˘uª
& 
di•©chSrc
Ë: 
	$COÀDi•©chDrivî
(
di•©chSrc
Ë{
	}
}

17 
public
:

18 
GëH™dÀ
();

19 
GëHPÆ
();

20 
SëHPÆ
();

21 
GëTy≥
();

22 
GëWidth
();

23 
GëHeight
();

26 
	gpublic
:

	@C:\sonji\Bioptro\ACE400Cal_140409\ACE400Cal_140409\resource.h

5 
	#IDM_ABOUTBOX
 0x0010

	)

6 
	#IDD_ABOUTBOX
 100

	)

7 
	#IDS_ABOUTBOX
 101

	)

8 
	#IDD_ACE400Cal_DIALOG
 102

	)

9 
	#IDR_MAINFRAME
 128

	)

10 
	#IDD_DIALOG_NUM_PAD
 160

	)

11 
	#IDD_DIALOG_CONTROLLER
 277

	)

12 
	#IDC_LABEL1
 1000

	)

13 
	#IDC_STATIC_I_ADC
 1001

	)

14 
	#IDC_EDIT_LV1
 1007

	)

15 
	#IDC_SSPANEL2
 1007

	)

16 
	#IDC_EDIT_LV2
 1008

	)

17 
	#IDC_SSPANEL4
 1008

	)

18 
	#IDC_EDIT_HV1
 1009

	)

19 
	#IDC_EDIT_BPOINT_CC_V
 1010

	)

20 
	#IDC_EDIT_SPARK
 1011

	)

21 
	#IDC_EDIT_HV2
 1012

	)

22 
	#IDC_BUTTON_LV1_SET
 1013

	)

23 
	#IDC_BUTTON_LV2_SET
 1014

	)

24 
	#IDC_BUTTON_DEL
 1014

	)

25 
	#IDC_BUTTON_HV1_SET
 1015

	)

26 
	#IDC_BUTTON_HV2_SET
 1016

	)

27 
	#IDC_BUTTON_CURSOR_BACK
 1016

	)

28 
	#IDC_RADIO_LV1
 1017

	)

29 
	#IDC_BUTTON_CURSOR_FWD
 1017

	)

30 
	#IDC_RADIO_I_RNG0
 1018

	)

31 
	#IDC_BUTTON_BACKSPACE
 1018

	)

32 
	#IDC_BUTTON_I_SET
 1019

	)

33 
	#IDC_BUTTON_KEYPAD_7
 1019

	)

34 
	#IDC_RADIO_HVO_OFST0
 1020

	)

35 
	#IDC_BUTTON_KEYPAD_8
 1020

	)

36 
	#IDC_BUTTON_AD_READ
 1021

	)

37 
	#IDC_BUTTON_KEYPAD_9
 1021

	)

38 
	#IDC_RADIO_LV2
 1022

	)

39 
	#IDC_BUTTON_CLR
 1022

	)

40 
	#IDC_RADIO_HV1
 1023

	)

41 
	#IDC_BUTTON_KEYPAD_4
 1023

	)

42 
	#IDC_RADIO_HV2
 1024

	)

43 
	#IDC_BUTTON_KEYPAD_5
 1024

	)

44 
	#IDC_RADIO_HVO_GAIN0
 1025

	)

45 
	#IDC_BUTTON_KEYPAD_6
 1025

	)

46 
	#IDC_EDIT_I
 1026

	)

47 
	#IDC_BUTTON_CANCEL
 1026

	)

48 
	#IDC_RADIO_I_RNG1
 1027

	)

49 
	#IDC_BUTTON_KEYPAD_1
 1027

	)

50 
	#IDC_RADIO_I_RNG2
 1028

	)

51 
	#IDC_BUTTON_KEYPAD_2
 1028

	)

52 
	#IDC_RADIO_I_RNG3
 1029

	)

53 
	#IDC_SSPANEL3
 1029

	)

54 
	#IDC_RADIO_I_RNG4
 1030

	)

55 
	#IDC_BUTTON_KEYPAD_3
 1030

	)

56 
	#IDC_RADIO_HVO_OFST1
 1031

	)

57 
	#IDC_BUTTON_ENTER
 1031

	)

58 
	#IDC_RADIO_HVO_OFST2
 1032

	)

59 
	#IDC_BUTTON_SIGN
 1032

	)

60 
	#IDC_RADIO_HVO_OFST3
 1033

	)

61 
	#IDC_BUTTON_KEYPAD_0
 1033

	)

62 
	#IDC_RADIO_HVO_GAIN1
 1034

	)

63 
	#IDC_BUTTON_DOT
 1034

	)

64 
	#IDC_RADIO_HVO_GAIN2
 1035

	)

65 
	#IDC_RADIO_HVO_GAIN3
 1036

	)

66 
	#IDC_BUTTON_BPOINT_CCV_SET
 1037

	)

67 
	#IDC_LIST_CPOINT
 1038

	)

68 
	#IDC_BUTTON_CPOINT_CCV_SET
 1039

	)

69 
	#IDC_RADIO_I_RNG5
 1040

	)

70 
	#IDC_RADIO_I_RNG6
 1041

	)

71 
	#IDC_RADIO_PULSE
 1042

	)

72 
	#IDC_EDIT_LV1_DA
 1043

	)

73 
	#IDC_BUTTON_SPARK_SET
 1044

	)

74 
	#IDC_EDIT_CPOINT_CC_V
 1045

	)

75 
	#IDC_RADIO_PULSE_MEASURE_CAV0
 1046

	)

76 
	#IDC_RADIO_PULSE_MEASURE_CAV1
 1047

	)

77 
	#IDC_RADIO_PULSE_MEASURE_CAV2
 1048

	)

78 
	#IDC_RADIO_PULSE_MEASURE_CAV3
 1049

	)

79 
	#IDC_EDIT_LV2_DA
 1050

	)

80 
	#IDC_EDIT_HV1_DA
 1051

	)

81 
	#IDC_EDIT_HV2_DA
 1052

	)

82 
	#IDC_BUTTON_INIT
 1053

	)

83 
	#IDC_RADIO_I_CC
 1056

	)

84 
	#IDC_RADIO_I_CV
 1057

	)

85 
	#IDC_RADIO_BPOINT_CV
 1058

	)

86 
	#IDC_RADIO_VCSFT
 1059

	)

87 
	#IDC_RADIO_VBFT
 1060

	)

88 
	#IDC_RADIO_PFT_FAST
 1061

	)

89 
	#IDC_RADIO_PFT_SLOW
 1062

	)

90 
	#IDC_RADIO_BPOINT_CC
 1063

	)

91 
	#IDC_RADIO_CPOINT_CV
 1064

	)

92 
	#IDC_RADIO_CPOINT_CC
 1065

	)

93 
	#IDC_EDIT_CPOINT_TR
 1070

	)

94 
	#IDC_BUTTON_CPOINT_TR_SET
 1071

	)

95 
	#IDC_RADIO_CBOXA
 1072

	)

96 
	#IDC_RADIO_CBOXB
 1073

	)

97 
	#IDC_RADIO_CBOXC
 1074

	)

98 
	#IDC_RADIO_CBOXD
 1075

	)

99 
	#IDC_RADIO_CBOXE
 1076

	)

100 
	#IDC_RADIO_CBOXF
 1077

	)

101 
	#IDC_RADIO_CBOXG
 1078

	)

102 
	#IDC_RADIO_CBOXH
 1079

	)

103 
	#IDC_EDIT_CPOINT_RY
 1080

	)

104 
	#IDC_BUTTON_CPOINT_RY_SET
 1081

	)

105 
	#IDC_RADIO_CCPLD0
 1084

	)

106 
	#IDC_RADIO_CCPLD1
 1085

	)

107 
	#IDC_RADIO_CCPLD2
 1086

	)

108 
	#IDC_RADIO_CCPLD3
 1087

	)

109 
	#IDC_BUTTON_CPOINT_TR_RST
 1094

	)

110 
	#IDC_SSPANEL_NUM_DATA
 1096

	)

111 
	#IDC_BUTTON_POINT_SET
 1098

	)

112 
	#IDC_LABEL_I_AMP
 1099

	)

113 
	#IDC_BUTTON_BOX_RST
 1100

	)

114 
	#IDC_LABEL_V_VOLT
 1101

	)

115 
	#IDC_LABEL_R_OHM
 1102

	)

116 
	#IDC_BUTTON_VB_OUT_SET
 1103

	)

117 
	#IDC_BUTTON_CPOINT_RY_RST
 1104

	)

118 
	#IDC_LIST_MSG
 1111

	)

119 
	#IDC_STATIC_LV1
 1112

	)

120 
	#IDC_SSPANEL_MIN_VALUE
 1115

	)

121 
	#IDC_SSPANEL_NUMPOS_0
 1116

	)

122 
	#IDC_SSPANEL_NUMPOS_1
 1117

	)

123 
	#IDC_SSPANEL_NUMPOS_2
 1118

	)

124 
	#IDC_EDIT_CPIN
 1119

	)

125 
	#IDC_SSPANEL_NUMPOS_3
 1119

	)

126 
	#IDC_CHECK_CPIN0
 1120

	)

127 
	#IDC_SSPANEL_NUMPOS_4
 1120

	)

128 
	#IDC_CHECK_CPIN1
 1121

	)

129 
	#IDC_SSPANEL_NUMPOS_5
 1121

	)

130 
	#IDC_CHECK_CPIN2
 1122

	)

131 
	#IDC_SSPANEL_NUMPOS_6
 1122

	)

132 
	#IDC_CHECK_CPIN3
 1123

	)

133 
	#IDC_SSPANEL_NUMPOS_7
 1123

	)

134 
	#IDC_CHECK_CPIN4
 1124

	)

135 
	#IDC_SSPANEL_NUMPOS_8
 1124

	)

136 
	#IDC_CHECK_CPIN5
 1125

	)

137 
	#IDC_SSPANEL_NUMPOS_9
 1125

	)

138 
	#IDC_SSPANEL_NUMPOS_10
 1126

	)

139 
	#IDC_SSPANEL_NUMPOS_11
 1127

	)

140 
	#IDC_SSPANEL_MAX_VALUE
 1128

	)

141 
	#IDC_STATIC_LV1_MNT
 1131

	)

142 
	#IDC_STATIC_LV2_MNT
 1132

	)

143 
	#IDC_CHECK_CPCB0
 1133

	)

144 
	#IDC_CHECK_CPCB1
 1134

	)

145 
	#IDC_CHECK_CPCB2
 1135

	)

146 
	#IDC_CHECK_CPCB3
 1136

	)

147 
	#IDC_EDIT_BPOINT_TR
 1137

	)

148 
	#IDC_BUTTON_BPOINT_TR_SET
 1138

	)

149 
	#IDC_RADIO_BBOXA
 1139

	)

150 
	#IDC_RADIO_BBOXB
 1140

	)

151 
	#IDC_RADIO_BBOXC
 1141

	)

152 
	#IDC_RADIO_BBOXD
 1142

	)

153 
	#IDC_RADIO_BBOXE
 1143

	)

154 
	#IDC_RADIO_BBOXF
 1144

	)

155 
	#IDC_RADIO_BBOXG
 1145

	)

156 
	#IDC_RADIO_BBOXH
 1146

	)

157 
	#IDC_RADIO_BCPLD0
 1147

	)

158 
	#IDC_RADIO_BCPLD1
 1148

	)

159 
	#IDC_RADIO_BCPLD2
 1149

	)

160 
	#IDC_RADIO_BCPLD3
 1150

	)

161 
	#IDC_BUTTON_BPOINT_RY_RST
 1151

	)

162 
	#IDC_STATIC_LV1_MNT_AD
 1152

	)

163 
	#IDC_STATIC_LV2_MNT_AD
 1153

	)

164 
	#IDC_EDIT_BPIN
 1154

	)

165 
	#IDC_STATIC_HV1_MNT
 1155

	)

166 
	#IDC_CHECK_BPIN0
 1156

	)

167 
	#IDC_CHECK_BPIN1
 1157

	)

168 
	#IDC_CHECK_BPIN2
 1158

	)

169 
	#IDC_CHECK_BPIN3
 1159

	)

170 
	#IDC_CHECK_BPIN4
 1160

	)

171 
	#IDC_CHECK_BPIN5
 1161

	)

172 
	#IDC_CHECK_BPCB0
 1162

	)

173 
	#IDC_CHECK_BPCB1
 1163

	)

174 
	#IDC_CHECK_BPCB2
 1164

	)

175 
	#IDC_CHECK_BPCB3
 1165

	)

176 
	#IDC_STATIC_HV2_MNT
 1166

	)

177 
	#IDC_STATIC_HV1_MNT_AD
 1167

	)

178 
	#IDC_STATIC_LV1_UNIT1
 1168

	)

179 
	#IDC_STATIC_HV2_MNT_AD
 1168

	)

180 
	#IDC_STATIC_LV2_UNIT1
 1169

	)

181 
	#IDC_STATIC_HV1_UNIT1
 1170

	)

182 
	#IDC_STATIC_HV2_UNIT1
 1171

	)

183 
	#IDC_RADIO_IFFT
 1173

	)

184 
	#IDC_RADIO_ISFT
 1174

	)

185 
	#IDC_RADIO_HVC
 1175

	)

186 
	#IDC_RADIO_VCFFT
 1176

	)

187 
	#IDC_RADIO_FWFT
 1177

	)

188 
	#IDC_BUTTON_BREAK
 1178

	)

189 
	#IDC_BUTTON_BPOINT_RY_SET
 1179

	)

190 
	#IDC_BUTTON_BPOINT_TR_RST
 1180

	)

191 
	#IDC_STATIC_SPARK_UNIT
 1182

	)

192 
	#IDC_STATIC_VB_OUT_MNT
 1183

	)

193 
	#IDC_STATIC_VB_OUT_MNT_AD
 1184

	)

194 
	#IDC_LIST_BPOINT
 1191

	)

195 
	#IDC_STATIC_I_UNIT
 1192

	)

196 
	#IDC_RADIO_BPCB_ENABLE0
 1193

	)

197 
	#IDC_RADIO_BPCB_ENABLE1
 1194

	)

198 
	#IDC_RADIO_CPCB_ENABLE0
 1195

	)

199 
	#IDC_RADIO_CPCB_ENABLE1
 1196

	)

200 
	#IDC_STATIC_I
 1197

	)

201 
	#IDC_STATIC_V
 1198

	)

202 
	#IDC_STATIC_R
 1199

	)

203 
	#IDC_STATIC_QM_I_UNIT
 1200

	)

204 
	#IDC_STATIC_QM_V_UNIT
 1201

	)

205 
	#IDC_STATIC_QM_R_UNIT
 1202

	)

206 
	#IDC_STATIC_QM_I_ADVALUE
 1203

	)

207 
	#IDC_STATIC_QM_V_ADVALUE
 1204

	)

208 
	#IDC_EDIT_QM_BPOINT
 1205

	)

209 
	#IDC_EDIT_QM_CPOINT
 1206

	)

210 
	#IDC_STATIC_VB_OUT_UNIT
 1207

	)

211 
	#IDC_EDIT_BPOINT_RY
 1209

	)

212 
	#IDC_CHECK_I_HIGH_GAIN
 1211

	)

213 
	#IDC_CHECK_FW_HIGH_GAIN
 1212

	)

214 
	#IDC_CHECK_SPARK_ON
 1226

	)

215 
	#IDC_CHECK_DC_OUT
 1229

	)

216 
	#IDC_CHECK_VB_GUARD_ON
 1231

	)

217 
	#IDC_CHECK_VC_GUARD_ON
 1232

	)

218 
	#IDC_STATIC_BTR
 1233

	)

219 
	#IDC_STATIC_BRY
 1234

	)

220 
	#IDC_STATIC_CTR
 1235

	)

221 
	#IDC_STATIC_CRY
 1236

	)

222 
	#IDC_CHECK_PULSE
 1237

	)

223 
	#IDC_STATIC_PULSE
 1238

	)

224 
	#IDC_RADIO_PULSE_VOLT
 1279

	)

225 
	#IDC_RADIO_LVC
 1280

	)

226 
	#IDC_RADIO_HVOFT
 1281

	)

227 
	#IDC_RADIO_PULSE_VOLT1
 1282

	)

228 
	#IDC_RADIO_PULSE_VOLT2
 1283

	)

229 
	#IDC_RADIO_PULSE_VOLT3
 1284

	)

230 
	#IDC_RADIO_PULSE_FREQ
 1285

	)

231 
	#IDC_RADIO_PULSE_FREQ1
 1286

	)

232 
	#IDC_RADIO_PULSE_FREQ2
 1287

	)

233 
	#IDC_RADIO_PULSE_FREQ3
 1288

	)

237 #ifde‡
APSTUDIO_INVOKED


238 #i‚de‡
APSTUDIO_READONLY_SYMBOLS


239 
	#_APS_NEXT_RESOURCE_VALUE
 131

	)

240 
	#_APS_NEXT_COMMAND_VALUE
 32771

	)

241 
	#_APS_NEXT_CONTROL_VALUE
 1002

	)

242 
	#_APS_NEXT_SYMED_VALUE
 101

	)

	@C:\sonji\Bioptro\ACE400Cal_140409\ACE400Cal_140409\sspnctrl.cpp

7 
	~"°dafx.h
"

8 
	~"s•n˘æ.h
"

11 
	~"f⁄t.h
"

12 
	~"pi˘uª.h
"

17 
	$IMPLEMENT_DYNCREATE
(
CSSPNCål
, 
CWnd
)

22 
CSåög
 
CSSPNCål
::
	$GëC≠ti⁄
()

24 
CSåög
 
ªsu…
;

25 
	`GëPr›îty
(
DISPID_CAPTION
, 
VT_BSTR
, (*)&
ªsu…
);

26  
ªsu…
;

27 
	}
}

29 
	gCSSPNCål
::
	$SëC≠ti⁄
(
LPCTSTR
 
¥›VÆ
)

31 
	`SëPr›îty
(
DISPID_CAPTION
, 
VT_BSTR
, 
¥›VÆ
);

32 
	}
}

34 
	gCSSPNCål
::
	$GëBevñWidth
()

36 
ªsu…
;

37 
	`GëPr›îty
(0x7, 
VT_I2
, (*)&
ªsu…
);

38  
ªsu…
;

39 
	}
}

41 
	gCSSPNCål
::
	$SëBevñWidth
(
¥›VÆ
)

43 
	`SëPr›îty
(0x7, 
VT_I2
, 
¥›VÆ
);

44 
	}
}

46 
	gCSSPNCål
::
	$GëB‹dîWidth
()

48 
ªsu…
;

49 
	`GëPr›îty
(0x8, 
VT_I2
, (*)&
ªsu…
);

50  
ªsu…
;

51 
	}
}

53 
	gCSSPNCål
::
	$SëB‹dîWidth
(
¥›VÆ
)

55 
	`SëPr›îty
(0x8, 
VT_I2
, 
¥›VÆ
);

56 
	}
}

58 
	gCSSPNCål
::
	$GëBevñOuãr
()

60 
ªsu…
;

61 
	`GëPr›îty
(0x9, 
VT_I4
, (*)&
ªsu…
);

62  
ªsu…
;

63 
	}
}

65 
	gCSSPNCål
::
	$SëBevñOuãr
(
¥›VÆ
)

67 
	`SëPr›îty
(0x9, 
VT_I4
, 
¥›VÆ
);

68 
	}
}

70 
	gCSSPNCål
::
	$GëBevñI¬î
()

72 
ªsu…
;

73 
	`GëPr›îty
(0xa, 
VT_I4
, (*)&
ªsu…
);

74  
ªsu…
;

75 
	}
}

77 
	gCSSPNCål
::
	$SëBevñI¬î
(
¥›VÆ
)

79 
	`SëPr›îty
(0xa, 
VT_I4
, 
¥›VÆ
);

80 
	}
}

82 
BOOL
 
	gCSSPNCål
::
	$GëRoundedC‹√rs
()

84 
BOOL
 
ªsu…
;

85 
	`GëPr›îty
(0xb, 
VT_BOOL
, (*)&
ªsu…
);

86  
ªsu…
;

87 
	}
}

89 
	gCSSPNCål
::
	$SëRoundedC‹√rs
(
BOOL
 
¥›VÆ
)

91 
	`SëPr›îty
(0xb, 
VT_BOOL
, 
¥›VÆ
);

92 
	}
}

94 
BOOL
 
	gCSSPNCål
::
	$GëOuéöe
()

96 
BOOL
 
ªsu…
;

97 
	`GëPr›îty
(0xc, 
VT_BOOL
, (*)&
ªsu…
);

98  
ªsu…
;

99 
	}
}

101 
	gCSSPNCål
::
	$SëOuéöe
(
BOOL
 
¥›VÆ
)

103 
	`SëPr›îty
(0xc, 
VT_BOOL
, 
¥›VÆ
);

104 
	}
}

106 
	gCSSPNCål
::
	$GëFloodTy≥
()

108 
ªsu…
;

109 
	`GëPr›îty
(0xd, 
VT_I4
, (*)&
ªsu…
);

110  
ªsu…
;

111 
	}
}

113 
	gCSSPNCål
::
	$SëFloodTy≥
(
¥›VÆ
)

115 
	`SëPr›îty
(0xd, 
VT_I4
, 
¥›VÆ
);

116 
	}
}

118 
	gCSSPNCål
::
	$GëFloodCﬁ‹
()

120 
ªsu…
;

121 
	`GëPr›îty
(0xe, 
VT_I4
, (*)&
ªsu…
);

122  
ªsu…
;

123 
	}
}

125 
	gCSSPNCål
::
	$SëFloodCﬁ‹
(
¥›VÆ
)

127 
	`SëPr›îty
(0xe, 
VT_I4
, 
¥›VÆ
);

128 
	}
}

130 
	gCSSPNCål
::
	$GëFloodPî˚¡
()

132 
ªsu…
;

133 
	`GëPr›îty
(0xf, 
VT_I2
, (*)&
ªsu…
);

134  
ªsu…
;

135 
	}
}

137 
	gCSSPNCål
::
	$SëFloodPî˚¡
(
¥›VÆ
)

139 
	`SëPr›îty
(0xf, 
VT_I2
, 
¥›VÆ
);

140 
	}
}

142 
	gCSSPNCål
::
	$GëShadowCﬁ‹
()

144 
ªsu…
;

145 
	`GëPr›îty
(0x10, 
VT_I4
, (*)&
ªsu…
);

146  
ªsu…
;

147 
	}
}

149 
	gCSSPNCål
::
	$SëShadowCﬁ‹
(
¥›VÆ
)

151 
	`SëPr›îty
(0x10, 
VT_I4
, 
¥›VÆ
);

152 
	}
}

154 
BOOL
 
	gCSSPNCål
::
	$GëFloodShowP˘
()

156 
BOOL
 
ªsu…
;

157 
	`GëPr›îty
(0x11, 
VT_BOOL
, (*)&
ªsu…
);

158  
ªsu…
;

159 
	}
}

161 
	gCSSPNCål
::
	$SëFloodShowP˘
(
BOOL
 
¥›VÆ
)

163 
	`SëPr›îty
(0x11, 
VT_BOOL
, 
¥›VÆ
);

164 
	}
}

166 
	gCSSPNCål
::
	$GëF⁄t3D
()

168 
ªsu…
;

169 
	`GëPr›îty
(0x12, 
VT_I4
, (*)&
ªsu…
);

170  
ªsu…
;

171 
	}
}

173 
	gCSSPNCål
::
	$SëF⁄t3D
(
¥›VÆ
)

175 
	`SëPr›îty
(0x12, 
VT_I4
, 
¥›VÆ
);

176 
	}
}

178 
	gCSSPNCål
::
	$GëAlignmít
()

180 
ªsu…
;

181 
	`GëPr›îty
(0x13, 
VT_I4
, (*)&
ªsu…
);

182  
ªsu…
;

183 
	}
}

185 
	gCSSPNCål
::
	$SëAlignmít
(
¥›VÆ
)

187 
	`SëPr›îty
(0x13, 
VT_I4
, 
¥›VÆ
);

188 
	}
}

190 
	gCSSPNCål
::
	$GëAutoSize
()

192 
ªsu…
;

193 
	`GëPr›îty
(0x14, 
VT_I4
, (*)&
ªsu…
);

194  
ªsu…
;

195 
	}
}

197 
	gCSSPNCål
::
	$SëAutoSize
(
¥›VÆ
)

199 
	`SëPr›îty
(0x14, 
VT_I4
, 
¥›VÆ
);

200 
	}
}

202 
COÀF⁄t
 
	gCSSPNCål
::
	$GëF⁄t
()

204 
LPDISPATCH
 
pDi•©ch
;

205 
	`GëPr›îty
(
DISPID_FONT
, 
VT_DISPATCH
, (*)&
pDi•©ch
);

206  
	`COÀF⁄t
(
pDi•©ch
);

207 
	}
}

209 
	gCSSPNCål
::
	$SëF⁄t
(
LPDISPATCH
 
¥›VÆ
)

211 
	`SëPr›îty
(
DISPID_FONT
, 
VT_DISPATCH
, 
¥›VÆ
);

212 
	}
}

214 
BOOL
 
	gCSSPNCål
::
	$GëE«bÀd
()

216 
BOOL
 
ªsu…
;

217 
	`GëPr›îty
(
DISPID_ENABLED
, 
VT_BOOL
, (*)&
ªsu…
);

218  
ªsu…
;

219 
	}
}

221 
	gCSSPNCål
::
	$SëE«bÀd
(
BOOL
 
¥›VÆ
)

223 
	`SëPr›îty
(
DISPID_ENABLED
, 
VT_BOOL
, 
¥›VÆ
);

224 
	}
}

226 
	gCSSPNCål
::
	$GëMou£Poöãr
()

228 
ªsu…
;

229 
	`GëPr›îty
(0x15, 
VT_I4
, (*)&
ªsu…
);

230  
ªsu…
;

231 
	}
}

233 
	gCSSPNCål
::
	$SëMou£Poöãr
(
¥›VÆ
)

235 
	`SëPr›îty
(0x15, 
VT_I4
, 
¥›VÆ
);

236 
	}
}

238 
CPi˘uª
 
	gCSSPNCål
::
	$GëMou£Ic⁄
()

240 
LPDISPATCH
 
pDi•©ch
;

241 
	`GëPr›îty
(0x16, 
VT_DISPATCH
, (*)&
pDi•©ch
);

242  
	`CPi˘uª
(
pDi•©ch
);

243 
	}
}

245 
	gCSSPNCål
::
	$SëMou£Ic⁄
(
LPDISPATCH
 
¥›VÆ
)

247 
	`SëPr›îty
(0x16, 
VT_DISPATCH
, 
¥›VÆ
);

248 
	}
}

250 
OLE_COLOR
 
	gCSSPNCål
::
	$GëBackCﬁ‹
()

252 
OLE_COLOR
 
ªsu…
;

253 
	`GëPr›îty
(
DISPID_BACKCOLOR
, 
VT_I4
, (*)&
ªsu…
);

254  
ªsu…
;

255 
	}
}

257 
	gCSSPNCål
::
	$SëBackCﬁ‹
(
OLE_COLOR
 
¥›VÆ
)

259 
	`SëPr›îty
(
DISPID_BACKCOLOR
, 
VT_I4
, 
¥›VÆ
);

260 
	}
}

262 
OLE_COLOR
 
	gCSSPNCål
::
	$GëF‹eCﬁ‹
()

264 
OLE_COLOR
 
ªsu…
;

265 
	`GëPr›îty
(
DISPID_FORECOLOR
, 
VT_I4
, (*)&
ªsu…
);

266  
ªsu…
;

267 
	}
}

269 
	gCSSPNCål
::
	$SëF‹eCﬁ‹
(
OLE_COLOR
 
¥›VÆ
)

271 
	`SëPr›îty
(
DISPID_FORECOLOR
, 
VT_I4
, 
¥›VÆ
);

272 
	}
}

274 
OLE_HANDLE
 
	gCSSPNCål
::
	$GëHWnd
()

276 
OLE_HANDLE
 
ªsu…
;

277 
	`GëPr›îty
(
DISPID_HWND
, 
VT_I4
, (*)&
ªsu…
);

278  
ªsu…
;

279 
	}
}

281 
	gCSSPNCål
::
	$SëHWnd
(
OLE_HANDLE
 
¥›VÆ
)

283 
	`SëPr›îty
(
DISPID_HWND
, 
VT_I4
, 
¥›VÆ
);

284 
	}
}

289 
	gCSSPNCål
::
	$Re‰esh
()

291 
	`InvokeHñ≥r
(
DISPID_REFRESH
, 
DISPATCH_METHOD
, 
VT_EMPTY
, 
NULL
, NULL);

292 
	}
}

	@C:\sonji\Bioptro\ACE400Cal_140409\ACE400Cal_140409\sspnctrl.h

1 #i‡!
deföed
(
AFX_SSPNCTRL_H__317B7428_E7D1_4FD1_BF39_BC98618EBD61__INCLUDED_
)

2 
	#AFX_SSPNCTRL_H__317B7428_E7D1_4FD1_BF39_BC98618EBD61__INCLUDED_


	)

4 #i‡
_MSC_VER
 > 1000

5 #¥agm®
⁄˚


14 
˛ass
 
	gCOÀF⁄t
;

15 
˛ass
 
	gCPi˘uª
;

20 ˛as†
	cCSSPNCål
 : 
public
 
CWnd


22 
¥Ÿe˘ed
:

23 
	$DECLARE_DYNCREATE
(
CSSPNCål
)

24 
public
:

25 
CLSID
 c⁄°& 
	$GëClsid
()

27 
CLSID
 c⁄° 
˛sid


29  
˛sid
;

31 
vútuÆ
 
BOOL
 
	$Cª©e
(
LPCTSTR
 
ÕszCœssName
,

32 
LPCTSTR
 
ÕszWödowName
, 
DWORD
 
dwStyÀ
,

33 c⁄° 
RECT
& 
ª˘
,

34 
CWnd
* 
pP¨ítWnd
, 
UINT
 
nID
,

35 
CCª©eC⁄ãxt
* 
pC⁄ãxt
 = 
NULL
)

36 {  
	`Cª©eC⁄åﬁ
(
	`GëClsid
(), 
ÕszWödowName
, 
dwStyÀ
, 
ª˘
, 
pP¨ítWnd
, 
nID
); 
	}
}

38 
BOOL
 
	$Cª©e
(
LPCTSTR
 
ÕszWödowName
, 
DWORD
 
dwStyÀ
,

39 c⁄° 
RECT
& 
ª˘
, 
CWnd
* 
pP¨ítWnd
, 
UINT
 
nID
,

40 
CFûe
* 
pPîsi°
 = 
NULL
, 
BOOL
 
bSt‹age
 = 
FALSE
,

41 
BSTR
 
b°rLicKey
 = 
NULL
)

42 {  
	`Cª©eC⁄åﬁ
(
	`GëClsid
(), 
ÕszWödowName
, 
dwStyÀ
, 
ª˘
, 
pP¨ítWnd
, 
nID
,

43 
pPîsi°
, 
bSt‹age
, 
b°rLicKey
); 
	}
}

46 
	gpublic
:

47 
CSåög
 
GëC≠ti⁄
();

48 
SëC≠ti⁄
(
LPCTSTR
);

49 
GëBevñWidth
();

50 
SëBevñWidth
();

51 
GëB‹dîWidth
();

52 
SëB‹dîWidth
();

53 
GëBevñOuãr
();

54 
SëBevñOuãr
();

55 
GëBevñI¬î
();

56 
SëBevñI¬î
();

57 
BOOL
 
GëRoundedC‹√rs
();

58 
SëRoundedC‹√rs
(
BOOL
);

59 
BOOL
 
GëOuéöe
();

60 
SëOuéöe
(
BOOL
);

61 
GëFloodTy≥
();

62 
SëFloodTy≥
();

63 
GëFloodCﬁ‹
();

64 
SëFloodCﬁ‹
();

65 
GëFloodPî˚¡
();

66 
SëFloodPî˚¡
();

67 
GëShadowCﬁ‹
();

68 
SëShadowCﬁ‹
();

69 
BOOL
 
GëFloodShowP˘
();

70 
SëFloodShowP˘
(
BOOL
);

71 
GëF⁄t3D
();

72 
SëF⁄t3D
();

73 
GëAlignmít
();

74 
SëAlignmít
();

75 
GëAutoSize
();

76 
SëAutoSize
();

77 
COÀF⁄t
 
GëF⁄t
();

78 
SëF⁄t
(
LPDISPATCH
);

79 
BOOL
 
GëE«bÀd
();

80 
SëE«bÀd
(
BOOL
);

81 
GëMou£Poöãr
();

82 
SëMou£Poöãr
();

83 
CPi˘uª
 
GëMou£Ic⁄
();

84 
SëMou£Ic⁄
(
LPDISPATCH
);

85 
OLE_COLOR
 
GëBackCﬁ‹
();

86 
SëBackCﬁ‹
(
OLE_COLOR
);

87 
OLE_COLOR
 
GëF‹eCﬁ‹
();

88 
SëF‹eCﬁ‹
(
OLE_COLOR
);

89 
OLE_HANDLE
 
GëHWnd
();

90 
SëHWnd
(
OLE_HANDLE
);

93 
	gpublic
:

94 
Re‰esh
();

	@CDIO.h

8 (
	tWINAPI
 *
	tPDIO_INT_CALLBACK
)(, 
	tWPARAM
, 
	tLPARAM
, *);

9 (
	tWINAPI
 *
	tPDIO_TRG_CALLBACK
)(, 
	tWPARAM
, 
	tLPARAM
, *);

10 (
	tWINAPI
 *
	tPDIO_DM_COUNT_CALLBACK
)(, 
	tWPARAM
, 
	tLPARAM
, *);

11 (
	tWINAPI
 *
	tPDIO_DM_STOP_CALLBACK
)(, 
	tWPARAM
, 
	tLPARAM
, *);

16 #ifde‡
__˝lu•lus


20 
WINAPI
 
	`DioInô
(*
Devi˚Name
, *
Id
);

21 
WINAPI
 
	`DioExô
(
Id
);

22 
WINAPI
 
	`DioRe£tDevi˚
(
Id
);

23 
WINAPI
 
	`DioGëEº‹Såög
(
Eº‹Code
 , *
Eº‹Såög
);

26 
WINAPI
 
	`DioSëDigôÆFûãr
(
Id
, 
FûãrVÆue
);

27 
WINAPI
 
	`DioGëDigôÆFûãr
(
Id
, *
FûãrVÆue
);

30 
WINAPI
 
	`DioSëIoDúe˘i⁄
(
Id
, 
DWORD
 
Dú
);

31 
WINAPI
 
	`DioGëIoDúe˘i⁄
(
Id
, 
DWORD
 *
Dú
);

32 
WINAPI
 
	`DioSëIoDúe˘i⁄Ex
(
Id
, 
DWORD
 
dwDú
);

33 
WINAPI
 
	`DioGëIoDúe˘i⁄Ex
(
Id
, 
DWORD
 *
dwDú
);

34 
WINAPI
 
	`DioSë8255Mode
(
Id
, 
ChùNo
, 
CålW‹d
);

35 
WINAPI
 
	`DioGë8255Mode
(
Id
, 
ChùNo
, *
CålW‹d
);

38 
WINAPI
 
	`DioI≈Byã
(
Id
, 
P‹tNo
, 
BYTE
 *
D©a
);

39 
WINAPI
 
	`DioI≈Bô
(
Id
, 
BôNo
, 
BYTE
 *
D©a
);

40 
WINAPI
 
	`DioOutByã
(
Id
, 
P‹tNo
, 
BYTE
 
D©a
);

41 
WINAPI
 
	`DioOutBô
(
Id
, 
BôNo
, 
BYTE
 
D©a
);

42 
WINAPI
 
	`DioEchoBackByã
(
Id
, 
P‹tNo
, 
BYTE
 *
D©a
);

43 
WINAPI
 
	`DioEchoBackBô
(
Id
, 
BôNo
, 
BYTE
 *
D©a
);

46 
WINAPI
 
	`DioI≈Mu…iByã
(
Id
, *
P‹tNo
, 
P‹tNum
, 
BYTE
 *
D©a
);

47 
WINAPI
 
	`DioI≈Mu…iBô
(
Id
, *
BôNo
, 
BôNum
, 
BYTE
 *
D©a
);

48 
WINAPI
 
	`DioOutMu…iByã
(
Id
, *
P‹tNo
, 
P‹tNum
, 
BYTE
 *
D©a
);

49 
WINAPI
 
	`DioOutMu…iBô
(
Id
, *
BôNo
, 
BôNum
, 
BYTE
 *
D©a
);

50 
WINAPI
 
	`DioEchoBackMu…iByã
(
Id
, *
P‹tNo
, 
P‹tNum
, 
BYTE
 *
D©a
);

51 
WINAPI
 
	`DioEchoBackMu…iBô
(
Id
, *
BôNo
, 
BôNum
, 
BYTE
 *
D©a
);

54 
WINAPI
 
	`DioNŸifyI¡îru±
(
Id
, 
BôNo
, 
Logic
, 
HANDLE
 
hWnd
);

55 
WINAPI
 
	`DioSëI¡îru±CÆlBackProc
(
Id
, 
PDIO_INT_CALLBACK
 
CÆlBackProc
, *
P¨am
);

58 
WINAPI
 
	`DioNŸifyTrg
(
Id
, 
TrgBô
, 
TrgKöd
, 
Tim
, 
HANDLE
 
hWnd
);

59 
WINAPI
 
	`DioSt›NŸifyTrg
(
Id
, 
TrgBô
);

60 
WINAPI
 
	`DioSëTrgCÆlBackProc
(
Id
, 
PDIO_TRG_CALLBACK
 
CÆlBackProc
, *
P¨am
);

63 
WINAPI
 
	`DioGëDevi˚Info
(*
Devi˚
, 
InfoTy≥
, *
P¨am1
, *
P¨am2
, *
P¨am3
);

64 
WINAPI
 
	`DioQuîyDevi˚Name
(
Index
, *
Devi˚Name
, *
Devi˚
);

65 
WINAPI
 
	`DioGëDevi˚Ty≥
(*
Devi˚
, *
Devi˚Ty≥
);

66 
WINAPI
 
	`DioGëMaxP‹ts
(
Id
, *
InP‹tNum
, *
OutP‹tNum
);

69 
WINAPI
 
	`DioDmSëDúe˘i⁄
(
Id
, 
Dúe˘i⁄
);

70 
WINAPI
 
	`DioDmGëDúe˘i⁄
(
Id
, *
Dúe˘i⁄
);

71 
WINAPI
 
	`DioDmSëSèndAl⁄e
(
Id
);

72 
WINAPI
 
	`DioDmSëMa°î
(
Id
, 
ExtSig1
, 
ExtSig2
, 
ExtSig3
, 
Ma°îHÆt
, 
SœveHÆt
);

73 
WINAPI
 
	`DioDmSëSœve
(
Id
, 
ExtSig1
, 
ExtSig2
, 
ExtSig3
, 
Ma°îHÆt
, 
SœveHÆt
);

74 
WINAPI
 
	`DioDmSëSèπTriggî
(
Id
, 
Dúe˘i⁄
, 
Sèπ
);

75 
WINAPI
 
	`DioDmSëSèπP©ã∫
(
Id
, 
P©ã∫
, 
Mask
);

76 
WINAPI
 
	`DioDmSëClockTriggî
(
Id
, 
Dúe˘i⁄
, 
Clock
);

77 
WINAPI
 
	`DioDmSëI¡î«lClock
(
Id
, 
Dúe˘i⁄
, 
Clock
, 
Unô
);

78 
WINAPI
 
	`DioDmSëSt›Triggî
(
Id
, 
Dúe˘i⁄
, 
St›
);

79 
WINAPI
 
	`DioDmSëSt›Numbî
(
Id
, 
Dúe˘i⁄
, 
St›Numbî
);

80 
WINAPI
 
	`DioDmFifoRe£t
(
Id
, 
Re£t
);

81 
WINAPI
 
	`DioDmSëBuf„r
(
Id
, 
Dúe˘i⁄
, *
Buf„r
, 
Lígth
, 
IsRög
);

82 
WINAPI
 
	`DioDmSëTøns„rSèπWaô
(
Id
, 
Time
);

83 
WINAPI
 
	`DioDmTøns„rSèπ
(
Id
, 
Dúe˘i⁄
);

84 
WINAPI
 
	`DioDmTøns„rSt›
(
Id
, 
Dúe˘i⁄
);

85 
WINAPI
 
	`DioDmGëSètus
(
Id
, 
Dúe˘i⁄
, *
Sètus
, *
Eº
);

86 
WINAPI
 
	`DioDmGëCou¡
(
Id
, 
Dúe˘i⁄
, *
Cou¡
, *
C¨ry
);

87 
WINAPI
 
	`DioDmGëWrôePoöãr
(
Id
, 
Dúe˘i⁄
, *
WrôePoöãr
, *
Cou¡
, *
C¨ry
);

88 
WINAPI
 
	`DioDmSëSt›Evít
(
Id
, 
Dúe˘i⁄
, 
HANDLE
 
hWnd
);

89 
WINAPI
 
	`DioDmSëSt›CÆlBackProc
 (
Id
 ,
PDIO_DM_STOP_CALLBACK
 
CÆlBackProc
 , *
P¨am
);

90 
WINAPI
 
	`DioDmSëCou¡Evít
(
Id
, 
Dúe˘i⁄
, 
Cou¡
, 
HANDLE
 
hWnd
);

91 
WINAPI
 
	`DioDmSëCou¡CÆlBackProc
(
Id
 ,
PDIO_DM_COUNT_CALLBACK
 
CÆlBackProc
 , *
P¨am
);

94 
WINAPI
 
	`DioSëDemoByã
(
Id
, 
P‹tNo
, 
BYTE
 
D©a
);

95 
WINAPI
 
	`DioSëDemoBô
(
Id
, 
BôNo
, 
BYTE
 
D©a
);

97 #ifde‡
__˝lu•lus


98 
	}
};

104 
	#DEVICE_TYPE_ISA
 0

105 
	#DEVICE_TYPE_PCI
 1

106 
	#DEVICE_TYPE_PCMCIA
 2

107 
	#DEVICE_TYPE_USB
 3

108 
	#DEVICE_TYPE_FIT
 4

109 
	#DEVICE_TYPE_CARDBUS
 5

110 

	)

115 
	#DIO_MAX_ACCS_PORTS
 256

	)

117 
	#DIO_INT_NONE
 0

	)

118 
	#DIO_INT_RISE
 1

	)

119 
	#DIO_INT_FALL
 2

	)

121 
	#DIO_TRG_RISE
 1

	)

122 
	#DIO_TRG_FALL
 2

	)

124 
	#DIOM_INTERRUPT
 0x1300

	)

125 
	#DIOM_TRIGGER
 0x1340

	)

126 
	#DIO_DMM_STOP
 0x1350

	)

127 
	#DIO_DMM_COUNT
 0x1360

	)

129 
	#IDIO_DEVICE_TYPE
 0

130 
	#IDIO_NUMBER_OF_8255
 1

131 
	#IDIO_IS_8255_BOARD
 2

132 
	#IDIO_NUMBER_OF_DI_BIT
 3

133 
	#IDIO_NUMBER_OF_DO_BIT
 4

134 
	#IDIO_NUMBER_OF_DI_PORT
 5

135 
	#IDIO_NUMBER_OF_DO_PORT
 6

136 
	#IDIO_IS_POSITIVE_LOGIC
 7

137 
	#IDIO_IS_ECHO_BACK
 8

138 
	#IDIO_IS_DIRECTION
 9

139 
	#IDIO_IS_FILTER
 10

140 
	#IDIO_NUMBER_OF_INT_BIT
 11

141 

	)

145 
	#PI_32
 1

	)

146 
	#PO_32
 2

	)

147 
	#PIO_1616
 3

	)

148 
	#DIODM_DIR_IN
 0x1

	)

149 
	#DIODM_DIR_OUT
 0x2

	)

153 
	#DIODM_START_SOFT
 1

	)

154 
	#DIODM_START_EXT_RISE
 2

	)

155 
	#DIODM_START_EXT_FALL
 3

	)

156 
	#DIODM_START_PATTERN
 4

	)

157 
	#DIODM_START_EXTSIG_1
 5

	)

158 
	#DIODM_START_EXTSIG_2
 6

	)

159 
	#DIODM_START_EXTSIG_3
 7

	)

163 
	#DIODM_CLK_CLOCK
 1

	)

164 
	#DIODM_CLK_EXT_TRG
 2

	)

165 
	#DIODM_CLK_HANDSHAKE
 3

	)

166 
	#DIODM_CLK_EXTSIG_1
 4

	)

167 
	#DIODM_CLK_EXTSIG_2
 5

	)

168 
	#DIODM_CLK_EXTSIG_3
 6

	)

172 
	#DIODM_TIM_UNIT_S
 1

	)

173 
	#DIODM_TIM_UNIT_MS
 2

	)

174 
	#DIODM_TIM_UNIT_US
 3

	)

175 
	#DIODM_TIM_UNIT_NS
 4

	)

179 
	#DIODM_STOP_SOFT
 1

	)

180 
	#DIODM_STOP_EXT_RISE
 2

	)

181 
	#DIODM_STOP_EXT_FALL
 3

	)

182 
	#DIODM_STOP_NUM
 4

	)

183 
	#DIODM_STOP_EXTSIG_1
 5

	)

184 
	#DIODM_STOP_EXTSIG_2
 6

	)

185 
	#DIODM_STOP_EXTSIG_3
 7

	)

189 
	#DIODM_EXT_START_SOFT_IN
 1

	)

190 
	#DIODM_EXT_STOP_SOFT_IN
 2

	)

191 
	#DIODM_EXT_CLOCK_IN
 3

	)

192 
	#DIODM_EXT_EXT_TRG_IN
 4

	)

193 
	#DIODM_EXT_START_EXT_RISE_IN
 5

	)

194 
	#DIODM_EXT_START_EXT_FALL_IN
 6

	)

195 
	#DIODM_EXT_START_PATTERN_IN
 7

	)

196 
	#DIODM_EXT_STOP_EXT_RISE_IN
 8

	)

197 
	#DIODM_EXT_STOP_EXT_FALL_IN
 9

	)

198 
	#DIODM_EXT_CLOCK_ERROR_IN
 10

	)

199 
	#DIODM_EXT_HANDSHAKE_IN
 11

	)

200 
	#DIODM_EXT_TRNSNUM_IN
 12

	)

202 
	#DIODM_EXT_START_SOFT_OUT
 101

	)

203 
	#DIODM_EXT_STOP_SOFT_OUT
 102

	)

204 
	#DIODM_EXT_CLOCK_OUT
 103

	)

205 
	#DIODM_EXT_EXT_TRG_OUT
 104

	)

206 
	#DIODM_EXT_START_EXT_RISE_OUT
 105

	)

207 
	#DIODM_EXT_START_EXT_FALL_OUT
 106

	)

208 
	#DIODM_EXT_STOP_EXT_RISE_OUT
 107

	)

209 
	#DIODM_EXT_STOP_EXT_FALL_OUT
 108

	)

210 
	#DIODM_EXT_CLOCK_ERROR_OUT
 109

	)

211 
	#DIODM_EXT_HANDSHAKE_OUT
 110

	)

212 
	#DIODM_EXT_TRNSNUM_OUT
 111

	)

216 
	#DIODM_STATUS_BMSTOP
 0x1

	)

217 
	#DIODM_STATUS_PIOSTART
 0x2

	)

218 
	#DIODM_STATUS_PIOSTOP
 0x4

	)

219 
	#DIODM_STATUS_TRGIN
 0x8

	)

220 
	#DIODM_STATUS_OVERRUN
 0x10

	)

224 
	#DIODM_STATUS_FIFOEMPTY
 0x1

	)

225 
	#DIODM_STATUS_FIFOFULL
 0x2

	)

226 
	#DIODM_STATUS_SGOVERIN
 0x4

	)

227 
	#DIODM_STATUS_TRGERR
 0x8

	)

228 
	#DIODM_STATUS_CLKERR
 0x10

	)

229 
	#DIODM_STATUS_SLAVEHALT
 0x20

	)

230 
	#DIODM_STATUS_MASTERHALT
 0x40

	)

234 
	#DIODM_RESET_FIFO_IN
 0x02

	)

235 
	#DIODM_RESET_FIFO_OUT
 0x04

	)

239 
	#DIODM_WRITE_ONCE
 0

	)

240 
	#DIODM_WRITE_RING
 1

	)

247 
	#DIO_ERR_SUCCESS
 0

248 
	#DIO_ERR_INI_RESOURCE
 1

249 
	#DIO_ERR_INI_INTERRUPT
 2

250 
	#DIO_ERR_INI_MEMORY
 3

251 
	#DIO_ERR_INI_REGISTRY
 4

252 

	)

253 
	#DIO_ERR_SYS_RECOVERED_FROM_STANDBY
 7

254 
	#DIO_ERR_INI_NOT_FOUND_SYS_FILE
 8

255 
	#DIO_ERR_INI_DLL_FILE_VERSION
 9

256 
	#DIO_ERR_INI_SYS_FILE_VERSION
 10

257 
	#DIO_ERR_INI_NO_MATCH_DRV_VERSION
 11

259 

	)

262 
	#DIO_ERR_DLL_DEVICE_NAME
 10000

263 
	#DIO_ERR_DLL_INVALID_ID
 10001

264 
	#DIO_ERR_DLL_CALL_DRIVER
 10002

265 
	#DIO_ERR_DLL_CREATE_FILE
 10003

266 
	#DIO_ERR_DLL_CLOSE_FILE
 10004

267 
	#DIO_ERR_DLL_CREATE_THREAD
 10005

268 
	#DIO_ERR_INFO_INVALID_DEVICE
 10050

269 
	#DIO_ERR_INFO_NOT_FIND_DEVICE
 10051

270 
	#DIO_ERR_INFO_INVALID_INFOTYPE
 10052

271 

	)

273 
	#DIO_ERR_DLL_BUFF_ADDRESS
 10100

274 
	#DIO_ERR_DLL_HWND
 10200

275 
	#DIO_ERR_DLL_TRG_KIND
 10300

276 

	)

279 
	#DIO_ERR_SYS_MEMORY
 20000

280 
	#DIO_ERR_SYS_NOT_SUPPORTED
 20001

281 
	#DIO_ERR_SYS_BOARD_EXECUTING
 20002

282 
	#DIO_ERR_SYS_USING_OTHER_PROCESS
 20003

283 
	#DIO_ERR_SYS_NOT_FOUND_PROCESS_DATA
 20004

284 

	)

285 #i‚de‡
STATUS_SYS_USB_CRC


286 
	#STATUS_SYS_USB_CRC
 20020

287 
	#STATUS_SYS_USB_BTSTUFF
 20021

288 
	#STATUS_SYS_USB_DATA_TOGGLE_MISMATCH
 20022

289 
	#STATUS_SYS_USB_STALL_PID
 20023

290 
	#STATUS_SYS_USB_DEV_NOT_RESPONDING
 20024

291 
	#STATUS_SYS_USB_PID_CHECK_FAILURE
 20025

	)

292 
	#STATUS_SYS_USB_UNEXPECTED_PID
 20026

293 
	#STATUS_SYS_USB_DATA_OVERRUN
 20027

294 
	#STATUS_SYS_USB_DATA_UNDERRUN
 20028

295 
	#STATUS_SYS_USB_BUFFER_OVERRUN
 20029

296 
	#STATUS_SYS_USB_BUFFER_UNDERRUN
 20030

297 
	#STATUS_SYS_USB_ENDPOINT_HALTED
 20031

298 
	#STATUS_SYS_USB_NOT_FOUND_DEVINFO
 20032

299 
	#STATUS_SYS_USB_ACCESS_DENIED
 20033

300 
	#STATUS_SYS_USB_INVALID_HANDLE
 20034

303 
	#DIO_ERR_SYS_PORT_NO
 20100

304 
	#DIO_ERR_SYS_PORT_NUM
 20101

305 
	#DIO_ERR_SYS_BIT_NO
 20102

306 
	#DIO_ERR_SYS_BIT_NUM
 20103

307 
	#DIO_ERR_SYS_BIT_DATA
 20104

308 
	#DIO_ERR_SYS_INT_BIT
 20200

309 
	#DIO_ERR_SYS_INT_LOGIC
 20201

310 
	#DIO_ERR_SYS_TIM
 20300

311 
	#DIO_ERR_SYS_FILTER
 20400

312 
	#DIO_ERR_SYS_IODIRECTION
 20500

313 
	#DIO_ERR_SYS_8255
 20600

315 
	#DIO_ERR_SYS_SIGNAL
 21000

316 
	#DIO_ERR_SYS_START
 21001

317 
	#DIO_ERR_SYS_CLOCK
 21002

318 
	#DIO_ERR_SYS_CLOCK_VAL
 21003

319 
	#DIO_ERR_SYS_CLOCK_UNIT
 21004

320 
	#DIO_ERR_SYS_STOP
 21005

321 
	#DIO_ERR_SYS_STOP_NUM
 21006

322 
	#DIO_ERR_SYS_RESET
 21007

323 
	#DIO_ERR_SYS_LEN
 21008

324 
	#DIO_ERR_SYS_RING
 21009

325 
	#DIO_ERR_SYS_COUNT
 21010

326 
	#DIO_ERR_DM_BUFFER
 21100

327 
	#DIO_ERR_DM_LOCK_MEMORY
 21101

328 
	#DIO_ERR_DM_PARAM
 21102

329 
	#DIO_ERR_DM_SEQUENCE
 21103

330 

	)

	@DlgNumberKeyPad.h

2 
	~"s•n˘æ.h
"

4 #i‡!
deföed
(
AFX_DLGNUMBERKEYPAD_H__43CD8555_86D8_491C_9DD0_5AB1C7BD72FB__INCLUDED_
)

5 
	#AFX_DLGNUMBERKEYPAD_H__43CD8555_86D8_491C_9DD0_5AB1C7BD72FB__INCLUDED_


	)

7 #i‡
_MSC_VER
 > 1000

8 #¥agm®
⁄˚


16 ˛as†
	cCDlgNumbîKeyPad
 : 
public
 
CDülog


18 
BOOL
 
m_bFú°
, 
	mm_bI¡egî
;

19 
	mm_nCurs‹Pos
, 
	mm_nNumLígth
;

20 
	mm_dCÆVÆue
, 
	mm_dBackupVÆue
;

21 
	mm_dNumD©a
;

22 
	mm_dMaxLimôVÆue
, 
	mm_dMöLimôVÆue
;

23 
CSåög
 
	mm_°rP™ñBô
[12];

26 
	mpublic
:

27 
CDlgNumbîKeyPad
(
CWnd
* 
pP¨ít
 = 
NULL
);

29 
BOOL
 
	mm_bSignVñ
;

31 
	$GëVÆue
(Ë{  
m_dCÆVÆue
; }

32 
BOOL
 
	`SëVÆue
(
nVÆue
, 
dMöLimôVÆue
=-100000000, 
dMaxLimôVÆue
=100000000);

33 
BOOL
 
	`SëVÆue
(
dVÆue
, 
dMöLimôVÆue
=-100000000, 
dMaxLimôVÆue
=100000000);

34 
	`SëLimôVÆue
(
dMöVÆue
, 
dMaxVÆue
);

36 
¥Ÿe˘ed
:

37 
	`Di•œyNum
();

38 
	`SëCurs‹Cﬁ‹
(
nNo
, 
lCﬁ‹
);

39 
	`AddBô
(
CSåög
 
°rBô
);

40 
	`Back•a˚Bô
();

41 
	`DñëeBô
();

45 íum { 
IDD
 = 
IDD_DIALOG_NUM_PAD
 
	}
};

46 
CSSPNCål
 
	gm_NumPadD©a
;

47 
CSSPNCål
 
	gm_NumPos0
;

48 
CSSPNCål
 
	gm_NumPos1
;

49 
CSSPNCål
 
	gm_NumPos10
;

50 
CSSPNCål
 
	gm_NumPos11
;

51 
CSSPNCål
 
	gm_NumPos2
;

52 
CSSPNCål
 
	gm_NumPos3
;

53 
CSSPNCål
 
	gm_NumPos4
;

54 
CSSPNCål
 
	gm_NumPos5
;

55 
CSSPNCål
 
	gm_NumPos6
;

56 
CSSPNCål
 
	gm_NumPos7
;

57 
CSSPNCål
 
	gm_NumPos8
;

58 
CSSPNCål
 
	gm_NumPos9
;

59 
CSSPNCål
 
	gm_sMaxLimô
;

60 
CSSPNCål
 
	gm_sMöLimô
;

67 
	gpublic
:

68 
vútuÆ
 
BOOL
 
PªTøn¶©eMesßge
(
MSG
* 
pMsg
);

69 
	g¥Ÿe˘ed
:

70 
vútuÆ
 
DoD©aExch™ge
(
CD©aExch™ge
* 
pDX
);

74 
	g¥Ÿe˘ed
:

78 
vútuÆ
 
BOOL
 
OnInôDülog
();

79 
afx_msg
 
OnBuâ⁄Key∑d0
();

80 
afx_msg
 
OnBuâ⁄Back•a˚
();

81 
afx_msg
 
OnBuâ⁄C™˚l
();

82 
afx_msg
 
OnBuâ⁄CÃ
();

83 
afx_msg
 
OnBuâ⁄Curs‹Back
();

84 
afx_msg
 
OnBuâ⁄Curs‹Fwd
();

85 
afx_msg
 
OnBuâ⁄Dñ
();

86 
afx_msg
 
OnBuâ⁄DŸ
();

87 
afx_msg
 
OnBuâ⁄Key∑d1
();

88 
afx_msg
 
OnBuâ⁄Key∑d2
();

89 
afx_msg
 
OnBuâ⁄Key∑d3
();

90 
afx_msg
 
OnBuâ⁄Key∑d4
();

91 
afx_msg
 
OnBuâ⁄Key∑d5
();

92 
afx_msg
 
OnBuâ⁄Key∑d6
();

93 
afx_msg
 
OnBuâ⁄Key∑d7
();

94 
afx_msg
 
OnBuâ⁄Key∑d8
();

95 
afx_msg
 
OnBuâ⁄Key∑d9
();

96 
afx_msg
 
OnBuâ⁄Sign
();

97 
afx_msg
 
OnBuâ⁄E¡î
();

98 
	$DECLARE_EVENTSINK_MAP
()

100 
	`DECLARE_MESSAGE_MAP
()

101 
	}
};

104 
CDlgNumbîKeyPad
 
NKEYPAD
;

	@Error.h

5 #i‡!
deföed
(
AFX_ERROR_H__8D3D34FA_3024_4D5F_81B6_D01841D85268__INCLUDED_
)

6 
	#AFX_ERROR_H__8D3D34FA_3024_4D5F_81B6_D01841D85268__INCLUDED_


	)

8 #i‡
_MSC_VER
 > 1000

9 #¥agm®
⁄˚


14 
	eEºID
 {

16 
	mNO_ERR
=0,

19 
	mESTOP
=10,

23 
	mSENSOR
=100,

24 
	mSS_DT5V_LOW
,

25 
	mSS_DT12V_LOW
,

26 
	mSS_DT24V_LOW
,

27 
	mSS_DTHV_LOW
,

28 
	mSS_DT5VB_A_LOW
,

29 
	mSS_DT5VC_A_LOW
,

30 
	mSS_DT5VB_B_LOW
,

31 
	mSS_DT5VC_B_LOW
,

32 
	mSS_DT5VB_C_LOW
,

33 
	mSS_DT5VC_C_LOW
,

34 
	mSS_DT5VB_D_LOW
,

35 
	mSS_DT5VC_D_LOW
,

36 
	mSS_DT5VB_E_LOW
,

37 
	mSS_DT5VC_E_LOW
,

38 
	mSS_DT5VB_F_LOW
,

39 
	mSS_DT5VC_F_LOW
,

40 
	mSS_DT5VB_G_LOW
,

41 
	mSS_DT5VC_G_LOW
,

42 
	mSS_DT5VB_H_LOW
,

43 
	mSS_DT5VC_H_LOW
,

46 
	mSGNI
=400,

49 
	mFLAG
=500,

50 
	mFLAG_SOURCE_OR_SINK_CANNOT_ON
,

51 
	mFLAG_SOURCE_CANNOT_OFF
,

52 
	mFLAG_SINK_CANNOT_OFF
,

53 
	mFLAG_SOURCE_LEAK
,

54 
	mFLAG_SINK_LEAK
,

55 
	mFLAG_ODD_SOURCE_LEAK
,

56 
	mFLAG_EVEN_SOURCE_LEAK
,

59 
	mINVALID_RETURN
=600,

62 
	mOVERLIMIT
=700,

63 
	mOL_REF_CURRENT_IS_OVER_INPUT_VOLT_N_RGST
,

64 
	mOL_I_RANGE_OVER
,

65 
	mOL_I_RANGE_UNDER
,

68 
	mOVERTIME
=800,

69 
	mOT_SETNCHK
,

72 
	mDEVICE
=1000,

74 
	mMOTION
=
DEVICE
+100,

75 
	mINVALID_RETURN_DIOINPBIT
,

76 
	mINVALID_RETURN_DIOOUTBIT
,

77 
	mINVALID_RETURN_DIOINPBYTE
,

78 
	mINVALID_RETURN_DIOOUTBYTE
,

83 
	mîr‹_no
;

84 c⁄° * 
	mtôÀ
;

85 c⁄° * 
	m°©e
;

86 c⁄° * 
	msﬁ
;

87 } 
	tsEºMsg
;

89 
sEºMsg
 
	gEºMsgTabÀ
[] =

91 { 
NO_ERR
, "Normal", "", "" },

93 { 
ESTOP
, "E-Stop", "", "" },

95 { 
SENSOR
, "Sensor", "", "" },

96 { 
SS_DT5V_LOW
 , "5V ¿¸ø¯ ¿ÃªÛ", "", "" },

97 { 
SS_DT12V_LOW
, "12V ¿¸ø¯ ¿ÃªÛ", "", "" },

98 { 
SS_DT24V_LOW
, "24V ¿¸ø¯ ¿ÃªÛ", "", "" },

99 { 
SS_DTHV_LOW
 , "HV ¿¸ø¯ ¿ÃªÛ", "", "" },

101 { 
SS_DT5VB_A_LOW
, "BOX A 5VB ¿¸ø¯ ¿ÃªÛ", "" , "" },

102 { 
SS_DT5VC_A_LOW
, "BOX A 5VC ¿¸ø¯ ¿ÃªÛ", "" , "" },

103 { 
SS_DT5VB_B_LOW
, "BOX B 5VB ¿¸ø¯ ¿ÃªÛ", "" , "" },

104 { 
SS_DT5VC_B_LOW
, "BOX B 5VC ¿¸ø¯ ¿ÃªÛ", "" , "" },

105 { 
SS_DT5VB_C_LOW
, "BOX C 5VB ¿¸ø¯ ¿ÃªÛ", "" , "" },

106 { 
SS_DT5VC_C_LOW
, "BOX C 5VC ¿¸ø¯ ¿ÃªÛ", "" , "" },

107 { 
SS_DT5VB_D_LOW
, "BOX D 5VB ¿¸ø¯ ¿ÃªÛ", "" , "" },

108 { 
SS_DT5VC_D_LOW
, "BOX D 5VC ¿¸ø¯ ¿ÃªÛ", "" , "" },

109 { 
SS_DT5VB_E_LOW
, "BOX E 5VB ¿¸ø¯ ¿ÃªÛ", "" , "" },

110 { 
SS_DT5VC_E_LOW
, "BOX E 5VC ¿¸ø¯ ¿ÃªÛ", "" , "" },

111 { 
SS_DT5VB_F_LOW
, "BOX F 5VB ¿¸ø¯ ¿ÃªÛ", "" , "" },

112 { 
SS_DT5VC_F_LOW
, "BOX F 5VC ¿¸ø¯ ¿ÃªÛ", "" , "" },

113 { 
SS_DT5VB_G_LOW
, "BOX G 5VB ¿¸ø¯ ¿ÃªÛ", "" , "" },

114 { 
SS_DT5VC_G_LOW
, "BOX G 5VC ¿¸ø¯ ¿ÃªÛ", "" , "" },

115 { 
SS_DT5VB_H_LOW
, "BOX H 5VB ¿¸ø¯ ¿ÃªÛ", "" , "" },

116 { 
SS_DT5VC_H_LOW
, "BOX H 5VC ¿¸ø¯ ¿ÃªÛ", "" , "" },

118 { 
SGNI
, "Signal", "", "" },

120 { 
FLAG
, "Flag", "", "" },

122 { 
FLAG_SOURCE_OR_SINK_CANNOT_ON
, "Source/Sink ON ¿ÃªÛ", "", "" },

123 { 
FLAG_SOURCE_CANNOT_OFF
, "Source OFF ¿ÃªÛ", "", "" },

124 { 
FLAG_SINK_CANNOT_OFF
, "Sink OFF ¿ÃªÛ", "", "" },

125 { 
FLAG_SOURCE_LEAK
, "Source Leak ¿ÃªÛ", "", "" },

126 { 
FLAG_SINK_LEAK
, "Sink Leak ¿ÃªÛ", "", "" },

127 { 
FLAG_ODD_SOURCE_LEAK
, "Odd Source Leak ¿ÃªÛ", "", "" },

128 { 
FLAG_EVEN_SOURCE_LEAK
, "Even Source Leak ¿ÃªÛ", "", "" },

130 { 
INVALID_RETURN
, "InvalidÑeturn", "", "" },

132 { 
OVERLIMIT
, "OverÜimit", "", "" },

133 { 
OL_REF_CURRENT_IS_OVER_INPUT_VOLT_N_RGST
, "º≥¡§ ¿¸∑˘ ∞™ ¿ÃªÛ", "", "" },

134 { 
OL_I_RANGE_OVER
, "√÷¥Î ¿¸∑˘ º≥¡§ π¸¿ß √ ∞˙", "", "" },

135 { 
OL_I_RANGE_UNDER
, "√÷º“ ¿¸∑˘ º≥¡§ π¸¿ß √ ∞˙", "", "" },

137 { 
OVERTIME
, "OverÅime", "", "" },

138 { 
OT_SETNCHK
, "Souce ¿¸æ–º≥¡§ ¿ÃªÛ", "", "" },

141 { 
DEVICE
, "Device", "", "" },

142 { 
MOTION
, "Motion", "", "" },

143 { 
INVALID_RETURN_DIOINPBIT
, "InvalidÑeturn from DioInpBit()", "", "" },

144 { 
INVALID_RETURN_DIOOUTBIT
, "InvalidÑeturn from DioOutBit()", "", "" },

145 { 
INVALID_RETURN_DIOINPBYTE
, "InvalidÑeturn from DioInpByte()", "", "" },

146 { 
INVALID_RETURN_DIOOUTBYTE
, "InvalidÑeturn from DioOutByte()", "", "" },

150 
	#ERRMSG_TABLE_LEN
 (
EºMsgTabÀ
)/(EºMsgTabÀ[0])

	)

153 ˛as†
	cCEº‹


155 
	m¥iv©e
:

156 
m_îr‹_no
;

158 
	mpublic
:

159 
CSåög
 
m_°rSèã
;

161 
Së
(
îrcode
, 
CSåög
 
°rSèã
="");

162 
	$Gë
(Ë{  
m_îr‹_no
; }

163 
	`Re£t
();

164 
BOOL
 
	`GëMsg
(
îr‹_no
, 
CSåög
 &
tôÀ
, CSåög &
°©e
, CSåög &
sﬁ
);

166 
public
:

167 
	`CEº‹
();

168 
vútuÆ
 ~
	`CEº‹
();

169 
	}
};

172 
CEº‹
 
ERR
;

	@Font.h

9 ˛as†
	cCOÀF⁄t
 : 
public
 
COÀDi•©chDrivî


11 
public
:

12 
	$COÀF⁄t
() {}

13 
	$COÀF⁄t
(
LPDISPATCH
 
pDi•©ch
Ë: 
	$COÀDi•©chDrivî
(
pDi•©ch
Ë{
	}
}

14 
	$COÀF⁄t
(c⁄° 
COÀF⁄t
& 
di•©chSrc
Ë: 
	$COÀDi•©chDrivî
(
di•©chSrc
Ë{
	}
}

17 
public
:

18 
CSåög
 
GëName
();

19 
SëName
(
LPCTSTR
);

20 
CY
 
GëSize
();

21 
SëSize
(c⁄° 
CY
&);

22 
BOOL
 
GëBﬁd
();

23 
SëBﬁd
(
BOOL
);

24 
BOOL
 
GëIèlic
();

25 
SëIèlic
(
BOOL
);

26 
BOOL
 
GëUndîlöe
();

27 
SëUndîlöe
(
BOOL
);

28 
BOOL
 
GëSåikëhrough
();

29 
SëSåikëhrough
(
BOOL
);

30 
GëWeight
();

31 
SëWeight
();

32 
GëCh¨£t
();

33 
SëCh¨£t
();

36 
	gpublic
:

	@Globals.h

5 #i‡!
deföed
(
AFX_GLOBALS_H__FDA16379_4221_4970_8471_B8FBD39D2C1E__INCLUDED_
)

6 
	#AFX_GLOBALS_H__FDA16379_4221_4970_8471_B8FBD39D2C1E__INCLUDED_


	)

8 #i‡
_MSC_VER
 > 1000

9 #¥agm®
⁄˚


13 ˛as†
	cCGlobÆs


15 
	mpublic
:

16 
CGlobÆs
();

17 
	mvútuÆ
 ~
CGlobÆs
();

22 
	eUNIT
 { 
	m£c
=0, 
	mm£c
=1, 
	mu£c
=2, 
	mmA
, 
	muA
, 
	mMohm
, 
	mKohm
, 
	mohm
, 
	mmohm
, 
	muohm
 };

23 
	eUNIT_CONVERT_TYPE
 {

24 
	mMM_TO_UM
, 
	mUM_TO_MM
, 
	mSEC_TO_MSEC
, 
	mMSEC_TO_SEC
,

25 
	mVOLT_TO_DA
, 
	mI0_TO_DA
, 
	mI1_TO_DA
, 
	mI2_TO_DA
, 
	mI3_TO_DA
, 
	mI4_TO_DA
, 
	mI5_TO_DA
, 
	mI6_TO_DA
,

26 
	mAD_TO_LVOLT
, 
	mAD_TO_HVOLT
, 
	mAD_TO_I0
, 
	mAD_TO_I1
, 
	mAD_TO_I2
, 
	mAD_TO_I3
, 
	mAD_TO_I4
, 
	mAD_TO_I5
, 
	mAD_TO_I6


29 
	gãm∂©e
 <
˛ass
 
	gT
> 
	$UNIT_CONVERT
(
T
 &
vÆue
, 
UINT
 
c⁄dôi⁄
)

31 
max_VDAD
 = 4000, 
max_IDAD
 = 50000;

33 
max_LV
 = 20, 
max_HV
 = 300;

34 
dVÆue
 = 
vÆue
;

36 
c⁄dôi⁄
)

38 
VOLT_TO_DA
:

39 if(
dVÆue
 <=
max_LV
ËdVÆuê*
max_VDAD
/max_LV;

40 
dVÆue
 *
max_VDAD
/
max_HV
;

43 
I0_TO_DA
:

44 
dVÆue
 *
max_IDAD
/100000.;

47 
I1_TO_DA
:

48 
dVÆue
 *
max_IDAD
/20000.;

51 
I2_TO_DA
:

52 
dVÆue
 *
max_IDAD
/10000.;

55 
I3_TO_DA
:

56 
dVÆue
 *
max_IDAD
/2000.;

59 
I4_TO_DA
:

60 
dVÆue
 *
max_IDAD
/200.;

63 
I5_TO_DA
:

64 
dVÆue
 *
max_IDAD
/20.;

67 
I6_TO_DA
:

72 
AD_TO_LVOLT
:

73 
dVÆue
 *
max_LV
/
max_VDAD
;

76 
AD_TO_HVOLT
:

77 
dVÆue
 *
max_HV
/
max_VDAD
;

80 
AD_TO_I0
:

81 
dVÆue
 *100/
max_IDAD
;

84 
AD_TO_I1
:

85 
dVÆue
 *20./
max_IDAD
;

88 
AD_TO_I2
:

89 
dVÆue
 *10./
max_IDAD
;

92 
AD_TO_I3
:

93 
dVÆue
 *2000./
max_IDAD
;

96 
AD_TO_I4
:

97 
dVÆue
 *200./
max_IDAD
;

100 
AD_TO_I5
:

101 
dVÆue
 *20./
max_IDAD
;

104 
AD_TO_I6
:

108 
vÆue
 = (
T
)(
dVÆue
+0.5);

110  
dVÆue
;

111 
	}
};

113 
DoEvíts
(
DWORD
 
dwMûli£c⁄ds
=0);

114 
Dñay
(
UINT
 
dñaytime
=0, UINT 
unô
=
u£c
);

	@MacroMotion.h

5 #i‡!
deföed
(
AFX_MACROMOTION_H__EA8A1C4F_12A4_4D1E_9CA4_370F29FA8B41__INCLUDED_
)

6 
	#AFX_MACROMOTION_H__EA8A1C4F_12A4_4D1E_9CA4_370F29FA8B41__INCLUDED_


	)

8 #i‡
_MSC_VER
 > 1000

9 #¥agm®
⁄˚


12 
	~"SeqSåu˘V43.h
"

15 ˛as†
	cCMa¸oMŸi⁄


18 
	mpublic
:

19 
CMa¸oMŸi⁄
();

20 
	mvútuÆ
 ~
CMa¸oMŸi⁄
();

22 
DWORD
 
Së
(
UINT
 
moduÀ_id
, 
vÆue1
=-1, 
vÆue2
=-1, 
vÆue3
=-1);

23 
UINT
 
Gë
(UINT 
typGë
);

24 
DWORD
 
Aµly
(
UINT
 
moduÀ_id
);

25 
DWORD
 
Bªak
(
UINT
 
moduÀ_id
=
ALL_OUT
);

26 
DWORD
 
R°
(
UINT
 
moduÀ_id
, UINT 
vÆue
=0, UINT 
vÆue2
=0);

27 
SëFûãr
(
UINT
 
ã°_ty≥
);

28 
BOOL
 
R°Box
(
±B
, 
±C
);

29 
BOOL
 
R°BoxAŒ
(BOOL 
bBBox
=
TRUE
, BOOL 
bCBox
=TRUE);

32 
CMa¸oMŸi⁄
 
MM
;

	@MicroMotion.h

5 #i‡!
deföed
(
AFX_MICROMOTION_H__BABAC453_C627_42E1_993B_D6AF7B1B15BA__INCLUDED_
)

6 
	#AFX_MICROMOTION_H__BABAC453_C627_42E1_993B_D6AF7B1B15BA__INCLUDED_


	)

8 #i‡
_MSC_VER
 > 1000

9 #¥agm®
⁄˚


13 ˛as†
	cCMi¸oMŸi⁄


15 
	mpublic
:

16 
CMi¸oMŸi⁄
();

17 
	mvútuÆ
 ~
CMi¸oMŸi⁄
();

21 
	#INPUT_START
 1000

	)

22 
	#OUTPUT_START
 2000

	)

23 
	#CONTEC_BOARD_NUM
 2

	)

24 
	#CONTEC_BOARD_DRIVER_NO
 2

	)

25 
	#TOTAL_INPUT_NUM
 64

	)

26 
	#TOTAL_OUTPUT_NUM
 128

	)

27 
	#MAX_ORDER_NUM
 20

	)

28 
	#UNKNOWN
 -1

	)

30 
	eSEQ_CMD
 { 
	mENDCMD
, 
	mBIT_TRS
, 
	mBYTE_TRS
, 
	mMBIT_TRS
, 
	mMBYTE_TRS
, 
	mBIT_RCV
, 
	mBYTE_RCV
, 
	mMBIT_RCV
, 
	mMBYTE_RCV
, 
	mDLY
 };

31 
	eTEST_TYPE
 { 
	mLV_OPEN_TEST
, 
	mHV_OPEN_TEST
, 
	mSHORT_TEST
, 
	mLEAK_TEST
, 
	mFOUR_WIRE_TEST
, 
	mEMBEDED_TEST
 };

32 
	eMODULE_TYPE
 { 
	mLV1
, 
	mLV2
, 
	mHV1
, 
	mHV2
, 
	mPULSE
, 
	mVB_OUT
, 
	mSPARK
, 
	mV
, 
	mI
, 
	mVI
, 
	mPFFT
, 
	mPSFT
, 
	mVBFT
, 
	mCFFT
, 
	mCSFT
, 
	mCAV
, 
	mLVB
, 
	mHVB
, 
	mLVC
, 
	mHVC
, 
	mHVO
, 
	mFW_GAIN
, 
	mVCFFT
, 
	mVCSFT
, 
	mFWFT
, 
	mHVOFT
, 
	mBBOX
, 
	mCBOX
, 
	mBPOINT
, 
	mCPOINT
 };

33 
	eBOX_ID
 { 
	mBOX_ALL
, 
	mBOX_A
, 
	mBOX_B
, 
	mBOX_C
, 
	mBOX_D
, 
	mBOX_E
, 
	mBOX_F
, 
	mBOX_G
, 
	mBOX_H
 };

34 
	eBREAK_TYPE
 { 
	mALL_OUT
, 
	mVB_ONLY
 };

35 
	eGATE_TYPE
 { 
	mTR
, 
	mRY
 };

36 
	eSET_POINT
 { 
	mPT_B
, 
	mPT_C
 };

37 
	eI_RANGE
 { 
	mI_RANGE_INIT
, 
	mI_RANGE0
, 
	mI_RANGE1
, 
	mI_RANGE2
, 
	mI_RANGE3
, 
	mI_RANGE4
, 
	mI_RANGE5
, 
	mI_RANGE6
 };

39 
	ssSEQ


41 
UINT
 
	mcmd
[
MAX_ORDER_NUM
];

42 
WORD
 
	mBôNo
[
MAX_ORDER_NUM
];

43 
WORD
 
	mP‹tNo
[
MAX_ORDER_NUM
];

44 
BYTE
 
	mbyãBuf
[
MAX_ORDER_NUM
];

45 
	mmbôBuf
[
MAX_ORDER_NUM
][
TOTAL_OUTPUT_NUM
];

46 
UINT
 
	mrcv_°¨t
;

48 
sSEQ
()

50 
ZîoMem‹y
(
cmd
, (
UINT
)*((cmd)/(UINT)));

51 
ZîoMem‹y
(
BôNo
, (
WORD
)*((BitNo)/(WORD)));

52 
ZîoMem‹y
(
P‹tNo
, (
WORD
)*((PortNo)/(WORD)));

53 
ZîoMem‹y
(
byãBuf
, (
BYTE
)*((byteBuf)/(BYTE)));

54 
FûlMem‹y
(
mbôBuf
, ()*((mbitBuf)/()), -1);

55 
	mrcv_°¨t
 = 0;

57 
Inô
()

59 
ZîoMem‹y
(
cmd
, (
UINT
)*((cmd)/(UINT)));

60 
ZîoMem‹y
(
BôNo
, (
WORD
)*((BitNo)/(WORD)));

61 
ZîoMem‹y
(
P‹tNo
, (
WORD
)*((PortNo)/(WORD)));

62 
ZîoMem‹y
(
byãBuf
, (
BYTE
)*((byteBuf)/(BYTE)));

63 
FûlMem‹y
(
mbôBuf
, ()*((mbitBuf)/()), -1);

64 
	mrcv_°¨t
 = 0;

67 } 
	tsSEQ
, *
	tpsSEQ
;

69 
HANDLE
 
m_hDIODrv
[
CONTEC_BOARD_NUM
];

71 
BOOL
 
InôMŸi⁄
();

72 
On
(
WORD
 
wBôNo
);

73 
Off
(
WORD
 
wBôNo
);

74 
BOOL
 
IsOn
(
WORD
 
wBôNo
);

75 
BOOL
 
IsOff
(
WORD
 
wBôNo
);

76 
BOOL
 
Tøn˚iveSeq
(
psSEQ
 
psSeq
);

	@Picture.h

9 ˛as†
	cCPi˘uª
 : 
public
 
COÀDi•©chDrivî


11 
public
:

12 
	$CPi˘uª
() {}

13 
	$CPi˘uª
(
LPDISPATCH
 
pDi•©ch
Ë: 
	$COÀDi•©chDrivî
(
pDi•©ch
Ë{
	}
}

14 
	$CPi˘uª
(c⁄° 
CPi˘uª
& 
di•©chSrc
Ë: 
	$COÀDi•©chDrivî
(
di•©chSrc
Ë{
	}
}

17 
public
:

18 
GëH™dÀ
();

19 
GëHPÆ
();

20 
SëHPÆ
();

21 
GëTy≥
();

22 
GëWidth
();

23 
GëHeight
();

26 
	gpublic
:

	@SeqStructV43.h

2 
	~"Mi¸oMŸi⁄.h
"

5 
	#TOTAL_DA_BIT_NUM
 12

6 
	#TOTAL_AD_BIT_NUM
 32

7 

	)

8 
	eDIGITAL_INPUT


10 
	mADC_A_D0
 = 
INPUT_START
+0,

11 
	mADC_A_D1
,

12 
	mADC_A_D2
,

13 
	mADC_A_D3
,

14 
	mADC_A_D4
,

15 
	mADC_A_D5
,

16 
	mADC_A_D6
,

17 
	mADC_A_D7
,

18 
	mADC_A_D8
,

19 
	mADC_A_D9
,

20 
	mADC_A_D10
,

21 
	mADC_A_D11
,

22 
	mADC_A_D12
,

23 
	mADC_A_D13
,

24 
	mADC_A_D14
,

25 
	mADC_A_D15
,

26 
	mADC_B_D0
,

27 
	mADC_B_D1
,

28 
	mADC_B_D2
,

29 
	mADC_B_D3
,

30 
	mADC_B_D4
,

31 
	mADC_B_D5
,

32 
	mADC_B_D6
,

33 
	mADC_B_D7
,

34 
	mADC_B_D8
,

35 
	mADC_B_D9
,

36 
	mADC_B_D10
,

37 
	mADC_B_D11
,

38 
	mADC_B_D12
,

39 
	mADC_B_D13
,

40 
	mADC_B_D14
,

41 
	mADC_B_D15
,

42 
	mDT12V
 = 
INPUT_START
+32,

43 
	mDT5V
,

44 
	mDT24V
,

45 
	mDTHV
,

49 
	mSPARK_ON
 = 
INPUT_START
+39,

58 
	mDT5VC_D
 = 
INPUT_START
+48,

59 
	mDT5VB_D
,

60 
	mDT5VC_C
,

61 
	mDT5VB_C
,

62 
	mDT5VC_B
,

63 
	mDT5VB_B
,

64 
	mDT5VC_A
,

65 
	mDT5VB_A
,

66 
	mPB_A0
,

67 
	mPB_A1
,

68 
	mBOX_A0
,

69 
	mBOX_A1
,

76 
	eDIGITAL_OUTPUT


78 
	mDA0
 = 
OUTPUT_START
+0,

79 
	mDA1
,

80 
	mDA2
,

81 
	mDA3
,

82 
	mDA4
,

83 
	mDA5
,

84 
	mDA6
,

85 
	mDA7
,

86 
	mDA8
,

87 
	mDA9
,

88 
	mDA10
,

89 
	mDA11
,

90 
	mSPARK_SET_CE
,

91 
	m_SPARK_SET_CLR
,

92 
	m_SPARK_RST
,

93 
	mI_GAIN_MODE_CMD
,

94 
	mI_SET_CE
,

95 
	m_I_SET_CLR
,

96 
	mLV_SET_CE_0
,

97 
	m_LV_SET_CLR_0
,

98 
	mHV_SET_CE_0
,

99 
	m_HV_SET_CLR_0
,

100 
	mLV_SET_CE_1
,

101 
	m_LV_SET_CLR_1
,

102 
	mHV_SET_CE_1
,

103 
	m_HV_SET_CLR_1
,

104 
	mGPIO0
,

105 
	mGPIO1
,

106 
	mGPIO2
,

107 
	mGPIO3
,

108 
	mGPIO4
,

109 
	mGPIO5
,

110 
	mFWIRE_SELF_VB
,

111 
	mFWIRE_SELF_VC
,

112 
	mVB_AC_MODE
,

114 
	mCC_CV_MODE
 = 
OUTPUT_START
+36,

115 
	mRNG_SET_2
,

116 
	mRNG_SET_1
,

117 
	mRNG_SET_0
,

122 
	mGPIO6
 = 
OUTPUT_START
+44,

123 
	mDC_RELAY_OUT
,

124 
	mVB_OUT_CHK
,

125 
	mBASE_I_LIMIT_CMD
,

126 
	mVB_RY_OUT_A2
,

127 
	mVB_RY_OUT_A1
,

128 
	mVB_RY_OUT_A0
,

130 
	mADC_B_CH_A1
 = 
OUTPUT_START
+52,

131 
	mADC_B_CH_A0
,

132 
	mADC_A_CH_A1
,

133 
	mADC_A_CH_A0
,

134 
	mVC_GUARD_SEL
,

135 
	mVC_GUARD_ON
,

136 
	mVB_GUARD_SEL
,

137 
	mVB_GUARD_ON
,

138 
	mPIN_SEARCH
,

139 
	m_AD_CONVST
,

141 
	mHVGB_DISCHARGE
 = 
OUTPUT_START
+63,

142 
	mVB_PIN_A0
,

143 
	mVB_PIN_A1
,

144 
	mVB_PIN_A2
,

145 
	mVB_PIN_A3
,

146 
	mVB_PIN_A4
,

147 
	mVB_PIN_A5
,

148 
	mVB_CPLD_A0
,

149 
	mVB_CPLD_A1
,

150 
	mVB_CPLD_A2
,

151 
	mVB_CPLD_A3
,

152 
	m_VB_PIN_SEL
,

154 
	mVB_CARD_A0
 = 
OUTPUT_START
+76,

155 
	mVB_CARD_A1
,

156 
	mVB_CARD_A2
,

157 
	mVB_CARD_A3
,

158 
	mVC_PIN_A0
,

159 
	mVC_PIN_A1
,

160 
	mVC_PIN_A2
,

161 
	mVC_PIN_A3
,

162 
	mVC_PIN_A4
,

163 
	mVC_PIN_A5
,

164 
	mVC_CPLD_A0
,

165 
	mVC_CPLD_A1
,

166 
	mVC_CPLD_A2
,

167 
	mVC_CPLD_A3
,

168 
	m_VC_PIN_SEL
,

170 
	mVC_CARD_A0
 = 
OUTPUT_START
+92,

171 
	mVC_CARD_A1
,

172 
	mVC_CARD_A2
,

173 
	mVC_CARD_A3
,

174 
	mVB_ENA_A_A0
,

175 
	mVB_ENA_A_A1
,

176 
	mVB_ENA_B_A0
,

177 
	mVB_ENA_B_A1
,

178 
	mVB_ENA_C_A0
,

179 
	mVB_ENA_C_A1
,

180 
	mVB_ENA_D_A0
,

181 
	mVB_ENA_D_A1
,

182 
	mVC_ENA_A_A0
,

183 
	mVC_ENA_A_A1
,

184 
	mVC_ENA_B_A0
,

185 
	mVC_ENA_B_A1
,

186 
	mVC_ENA_C_A0
,

187 
	mVC_ENA_C_A1
,

188 
	mVC_ENA_D_A0
,

189 
	mVC_ENA_D_A1
,

190 
	m_BOX_A_VB_RST
,

191 
	m_BOX_B_VB_RST
,

192 
	m_BOX_C_VB_RST
,

193 
	m_BOX_D_VB_RST
,

194 
	m_BOX_A_VC_RST
,

195 
	m_BOX_B_VC_RST
,

196 
	m_BOX_C_VC_RST
,

197 
	m_BOX_D_VC_RST
,

198 
	mBOX_VB_ENA_A
,

199 
	mBOX_VB_ENA_B
,

200 
	mBOX_VB_ENA_C
,

201 
	mBOX_VB_ENA_D
,

202 
	mBOX_VC_ENA_A
,

203 
	mBOX_VC_ENA_B
,

204 
	mBOX_VC_ENA_C
,

205 
	mBOX_VC_ENA_D
,

209 
	ssSET_VB


211 
	mty≥
, 
	mda_vÆue
;

212 
sSEQ
 
	msSeq
;

214 
sSET_VB
()

216 
	mty≥
=
LV1
;

217 
	mda_vÆue
 = 0;

218 
	msSeq
.
Inô
();

221 
Inô
()

223 
	m˛r
=0, 
	m˚
=0, 
	m‹dî
=0;

224 
	msSeq
.
Inô
();

226 
	mty≥
)

229 
LV1
:

230 
˛r
 = 
_LV_SET_CLR_0
-
OUTPUT_START
;

231 
	m˚
 = 
LV_SET_CE_0
-
OUTPUT_START
;

234 
	mLV2
:

235 
˛r
 = 
_LV_SET_CLR_1
-
OUTPUT_START
;

236 
	m˚
 = 
LV_SET_CE_1
-
OUTPUT_START
;

239 
	mHV1
:

240 
˛r
 = 
_HV_SET_CLR_0
-
OUTPUT_START
;

241 
	m˚
 = 
HV_SET_CE_0
-
OUTPUT_START
;

244 
	mHV2
:

245 
˛r
 = 
_HV_SET_CLR_1
-
OUTPUT_START
;

246 
	m˚
 = 
HV_SET_CE_1
-
OUTPUT_START
;

249 
	mSPARK
:

250 
˛r
 = 
_SPARK_SET_CLR
-
OUTPUT_START
;

251 
	m˚
 = 
SPARK_SET_CE
-
OUTPUT_START
;

256 
	msSeq
.
	mcmd
[
‹dî
] = 
MBIT_TRS
;

257 
	msSeq
.
	mmbôBuf
[
‹dî
][
˛r
] = 0;

258 
	msSeq
.
	mmbôBuf
[
‹dî
][
˚
] = 0;

259 
	m‹dî
++;

262 
	msSeq
.
	mcmd
[
‹dî
] = 
DLY
;

263 
	msSeq
.
	mP‹tNo
[
‹dî
] = 
u£c
;

264 
	msSeq
.
	mbyãBuf
[
‹dî
] = 200;

265 
	m‹dî
++;

268 
	msSeq
.
	mcmd
[
‹dî
] = 
BIT_TRS
;

269 
	msSeq
.
	mbyãBuf
[
‹dî
] = 1;

270 
	msSeq
.
	mBôNo
[
‹dî
] = 
˛r
;

271 
	m‹dî
++;

274 
	msSeq
.
	mcmd
[
‹dî
] = 
MBIT_TRS
;

275 
	mi
=0; i<
	mTOTAL_DA_BIT_NUM
; i++Ë
	msSeq
.
	mmbôBuf
[
‹dî
][
DA0
-
OUTPUT_START
+
i
] = (
da_vÆue
>>i) & 1;

276 
	m‹dî
++;

279 
	msSeq
.
	mcmd
[
‹dî
] = 
BIT_TRS
;

280 
	msSeq
.
	mbyãBuf
[
‹dî
] = 1;

281 
	msSeq
.
	mBôNo
[
‹dî
] = 
˚
;

282 
	m‹dî
++;

285 } 
	tsSET_VB
;

287 
	ssSET_PULSE


289 
	m‰eq
, 
	mvﬁt
, 
	mˇv
;

290 
sSEQ
 
	msSeq
;

292 
sSET_PULSE
()

294 
	m‰eq
=
vﬁt
=
ˇv
=-1;

295 
	msSeq
.
Inô
();

298 
Inô
()

300 
	m‹dî
=0;

301 
	msSeq
.
Inô
();

304 
	msSeq
.
	mcmd
[
‹dî
] = 
MBIT_TRS
;

305 
	m‰eq
)

308 
sSeq
.
mbôBuf
[
‹dî
][
GPIO1
-
OUTPUT_START
] = 0;

309 
	msSeq
.
	mmbôBuf
[
‹dî
][
GPIO0
-
OUTPUT_START
] = 0;

313 
sSeq
.
mbôBuf
[
‹dî
][
GPIO1
-
OUTPUT_START
] = 0;

314 
	msSeq
.
	mmbôBuf
[
‹dî
][
GPIO0
-
OUTPUT_START
] = 1;

318 
sSeq
.
mbôBuf
[
‹dî
][
GPIO1
-
OUTPUT_START
] = 1;

319 
	msSeq
.
	mmbôBuf
[
‹dî
][
GPIO0
-
OUTPUT_START
] = 0;

323 
sSeq
.
mbôBuf
[
‹dî
][
GPIO1
-
OUTPUT_START
] = 1;

324 
	msSeq
.
	mmbôBuf
[
‹dî
][
GPIO0
-
OUTPUT_START
] = 1;

328 
	mvﬁt
)

331 
sSeq
.
mbôBuf
[
‹dî
][
GPIO3
-
OUTPUT_START
] = 0;

332 
	msSeq
.
	mmbôBuf
[
‹dî
][
GPIO2
-
OUTPUT_START
] = 0;

336 
sSeq
.
mbôBuf
[
‹dî
][
GPIO3
-
OUTPUT_START
] = 0;

337 
	msSeq
.
	mmbôBuf
[
‹dî
][
GPIO2
-
OUTPUT_START
] = 1;

341 
sSeq
.
mbôBuf
[
‹dî
][
GPIO3
-
OUTPUT_START
] = 1;

342 
	msSeq
.
	mmbôBuf
[
‹dî
][
GPIO2
-
OUTPUT_START
] = 0;

346 
sSeq
.
mbôBuf
[
‹dî
][
GPIO3
-
OUTPUT_START
] = 1;

347 
	msSeq
.
	mmbôBuf
[
‹dî
][
GPIO2
-
OUTPUT_START
] = 1;

351 
	mˇv
)

354 
sSeq
.
mbôBuf
[
‹dî
][
ADC_A_CH_A1
-
OUTPUT_START
] = 0;

355 
	msSeq
.
	mmbôBuf
[
‹dî
][
ADC_A_CH_A0
-
OUTPUT_START
] = 0;

356 
	msSeq
.
	mmbôBuf
[
‹dî
][
GPIO5
-
OUTPUT_START
] = 0;

357 
	msSeq
.
	mmbôBuf
[
‹dî
][
GPIO4
-
OUTPUT_START
] = 0;

361 
sSeq
.
mbôBuf
[
‹dî
][
ADC_A_CH_A1
-
OUTPUT_START
] = 0;

362 
	msSeq
.
	mmbôBuf
[
‹dî
][
ADC_A_CH_A0
-
OUTPUT_START
] = 0;

363 
	msSeq
.
	mmbôBuf
[
‹dî
][
GPIO5
-
OUTPUT_START
] = 0;

364 
	msSeq
.
	mmbôBuf
[
‹dî
][
GPIO4
-
OUTPUT_START
] = 1;

368 
sSeq
.
mbôBuf
[
‹dî
][
ADC_A_CH_A1
-
OUTPUT_START
] = 0;

369 
	msSeq
.
	mmbôBuf
[
‹dî
][
ADC_A_CH_A0
-
OUTPUT_START
] = 0;

370 
	msSeq
.
	mmbôBuf
[
‹dî
][
GPIO5
-
OUTPUT_START
] = 1;

371 
	msSeq
.
	mmbôBuf
[
‹dî
][
GPIO4
-
OUTPUT_START
] = 0;

375 
sSeq
.
mbôBuf
[
‹dî
][
ADC_A_CH_A1
-
OUTPUT_START
] = 0;

376 
	msSeq
.
	mmbôBuf
[
‹dî
][
ADC_A_CH_A0
-
OUTPUT_START
] = 0;

377 
	msSeq
.
	mmbôBuf
[
‹dî
][
GPIO5
-
OUTPUT_START
] = 1;

378 
	msSeq
.
	mmbôBuf
[
‹dî
][
GPIO4
-
OUTPUT_START
] = 1;

381 
	m‹dî
++;

384 } 
	tsSET_PULSE
;

386 
	ssSET_I


388 
	mda_vÆue
, 
	mønge
;

389 
sSEQ
 
	msSeq
;

391 
sSET_I
()

393 
	mønge
 = 
da_vÆue
 = -1;

394 
	msSeq
.
Inô
();

397 
Inô
()

399 
	m‹dî
=0;

400 
	msSeq
.
Inô
();

403 if(
	mda_vÆue
 >= 0)

405 
sSeq
.
cmd
[
‹dî
] = 
MBIT_TRS
;

406 
	msSeq
.
	mmbôBuf
[
‹dî
][
_I_SET_CLR
-
OUTPUT_START
] = 1;

407 
	msSeq
.
	mmbôBuf
[
‹dî
][
I_SET_CE
-
OUTPUT_START
] = 0;

408 
	m‹dî
++;

412 
	msSeq
.
	mcmd
[
‹dî
] = 
MBIT_TRS
;

413 if(
	mønge
 >= 0)

415 
sSeq
.
mbôBuf
[
‹dî
][
RNG_SET_0
-
OUTPUT_START
] = (
ønge
 & 0x01)>>0;

416 
	msSeq
.
	mmbôBuf
[
‹dî
][
RNG_SET_1
-
OUTPUT_START
] = (
ønge
 & 0x02)>>1;

417 
	msSeq
.
	mmbôBuf
[
‹dî
][
RNG_SET_2
-
OUTPUT_START
] = (
ønge
 & 0x04)>>2;

420 if(
	mda_vÆue
 >= 0)

422 
i
=0; 
	mi
<
	mTOTAL_DA_BIT_NUM
; i++Ë
	msSeq
.
	mmbôBuf
[
‹dî
][
DA0
-
OUTPUT_START
+i] = (
da_vÆue
>>i) & 1;

424 
	m‹dî
++;

427 if(
	mda_vÆue
 >= 0)

429 
sSeq
.
cmd
[
‹dî
] = 
DLY
;

430 
	msSeq
.
	mP‹tNo
[
‹dî
] = 
u£c
;

431 
	msSeq
.
	mbyãBuf
[
‹dî
] = 200;

432 
	m‹dî
++;

435 
	msSeq
.
	mcmd
[
‹dî
] = 
BIT_TRS
;

436 
	msSeq
.
	mBôNo
[
‹dî
] = 
I_SET_CE
-
OUTPUT_START
;

437 
	msSeq
.
	mbyãBuf
[
‹dî
] = 1;

438 
	m‹dî
++;

442 } 
	tsSET_I
;

444 
	ssSET_VB_HL


446 
	mty≥
;

447 
sSEQ
 
	msSeq
;

449 
sSET_VB_HL
()

451 
	mty≥
 = 0;

452 
	msSeq
.
Inô
();

455 
Inô
()

457 
	m‹dî
=0;

458 
	msSeq
.
Inô
();

461 
	msSeq
.
	mcmd
[
‹dî
] = 
MBIT_TRS
;

462 
	msSeq
.
	mmbôBuf
[
‹dî
][
VB_OUT_CHK
-
OUTPUT_START
] = 0;

463 
	msSeq
.
	mmbôBuf
[
‹dî
][
ADC_A_CH_A1
-
OUTPUT_START
] = 0;

464 
	msSeq
.
	mmbôBuf
[
‹dî
][
ADC_A_CH_A0
-
OUTPUT_START
] = 1;

465 
	mty≥
)

467 
	mLV1
:

468 
sSeq
.
mbôBuf
[
‹dî
][
GPIO6
-
OUTPUT_START
] = 0;

469 
	msSeq
.
	mmbôBuf
[
‹dî
][
GPIO5
-
OUTPUT_START
] = 0;

472 
	mLV2
:

473 
sSeq
.
mbôBuf
[
‹dî
][
GPIO6
-
OUTPUT_START
] = 0;

474 
	msSeq
.
	mmbôBuf
[
‹dî
][
GPIO5
-
OUTPUT_START
] = 1;

477 
	mHV1
:

478 
sSeq
.
mbôBuf
[
‹dî
][
GPIO6
-
OUTPUT_START
] = 1;

479 
	msSeq
.
	mmbôBuf
[
‹dî
][
GPIO4
-
OUTPUT_START
] = 0;

482 
	mHV2
:

483 
sSeq
.
mbôBuf
[
‹dî
][
GPIO6
-
OUTPUT_START
] = 1;

484 
	msSeq
.
	mmbôBuf
[
‹dî
][
GPIO4
-
OUTPUT_START
] = 1;

487 
	m‹dî
++;

490 } 
	tsSET_VB_HL
;

492 
	ssSET_ADC_A


494 
	mty≥
;

495 
sSEQ
 
	msSeq
;

497 
sSET_ADC_A
()

499 
	mty≥
 = 0;

500 
	msSeq
.
Inô
();

503 
Inô
()

505 
	m‹dî
=0;

506 
	msSeq
.
Inô
();

509 
	msSeq
.
	mcmd
[
‹dî
] = 
MBIT_TRS
;

510 
	mty≥
)

512 
	mPFFT
:

513 
sSeq
.
mbôBuf
[
‹dî
][
ADC_A_CH_A1
-
OUTPUT_START
] = 0;

514 
	msSeq
.
	mmbôBuf
[
‹dî
][
ADC_A_CH_A0
-
OUTPUT_START
] = 0;

515 
	msSeq
.
	mmbôBuf
[
‹dî
][
GPIO6
-
OUTPUT_START
] = 0;

518 
	mPSFT
:

519 
sSeq
.
mbôBuf
[
‹dî
][
ADC_A_CH_A1
-
OUTPUT_START
] = 0;

520 
	msSeq
.
	mmbôBuf
[
‹dî
][
ADC_A_CH_A0
-
OUTPUT_START
] = 0;

521 
	msSeq
.
	mmbôBuf
[
‹dî
][
GPIO6
-
OUTPUT_START
] = 1;

524 
	mVBFT
:

525 
sSeq
.
mbôBuf
[
‹dî
][
ADC_A_CH_A1
-
OUTPUT_START
] = 0;

526 
	msSeq
.
	mmbôBuf
[
‹dî
][
ADC_A_CH_A0
-
OUTPUT_START
] = 1;

529 
	mCFFT
:

530 
sSeq
.
mbôBuf
[
‹dî
][
ADC_A_CH_A1
-
OUTPUT_START
] = 1;

531 
	msSeq
.
	mmbôBuf
[
‹dî
][
ADC_A_CH_A0
-
OUTPUT_START
] = 0;

534 
	mCSFT
:

535 
sSeq
.
mbôBuf
[
‹dî
][
ADC_A_CH_A1
-
OUTPUT_START
] = 1;

536 
	msSeq
.
	mmbôBuf
[
‹dî
][
ADC_A_CH_A0
-
OUTPUT_START
] = 1;

539 
	m‹dî
++;

542 } 
	tsSET_ADC_A
;

544 
	ssSET_VC_HL


546 
	mty≥
;

547 
sSEQ
 
	msSeq
;

549 
sSET_VC_HL
()

551 
	mty≥
 = 0;

552 
	msSeq
.
Inô
();

555 
Inô
()

557 
	m‹dî
=0;

558 
	msSeq
.
Inô
();

561 
	msSeq
.
	mcmd
[
‹dî
] = 
MBIT_TRS
;

562 
	msSeq
.
	mmbôBuf
[
‹dî
][
ADC_B_CH_A1
-
OUTPUT_START
] = 0;

563 
	msSeq
.
	mmbôBuf
[
‹dî
][
ADC_B_CH_A0
-
OUTPUT_START
] = 0;

564 
	mty≥
)

566 
	mHVC
:

567 
sSeq
.
mbôBuf
[
‹dî
][
GPIO0
-
OUTPUT_START
] = 1;

568 
	msSeq
.
	mmbôBuf
[
‹dî
][
GPIO1
-
OUTPUT_START
] = 0;

569 
	msSeq
.
	mmbôBuf
[
‹dî
][
GPIO2
-
OUTPUT_START
] = 0;

572 
	mLVC
:

573 
sSeq
.
mbôBuf
[
‹dî
][
GPIO0
-
OUTPUT_START
] = 0;

574 
	msSeq
.
	mmbôBuf
[
‹dî
][
GPIO1
-
OUTPUT_START
] = 1;

575 
	msSeq
.
	mmbôBuf
[
‹dî
][
GPIO2
-
OUTPUT_START
] = 1;

578 
	m‹dî
++;

581 } 
	tsSET_VC_HL
;

583 
	ssSET_HVO


585 
	moff£t
, 
	mgaö
;

586 
sSEQ
 
	msSeq
;

588 
sSET_HVO
()

590 
	moff£t
 = 
gaö
 = -1;

591 
	msSeq
.
Inô
();

594 
Inô
()

596 
	m‹dî
=0;

597 
	msSeq
.
Inô
();

599 if(
	moff£t
 >0 || 
gaö
 >= 0)

602 
sSeq
.
cmd
[
‹dî
] = 
MBIT_TRS
;

603 
	msSeq
.
	mmbôBuf
[
‹dî
][
ADC_B_CH_A1
-
OUTPUT_START
] = 1;

604 
	msSeq
.
	mmbôBuf
[
‹dî
][
ADC_B_CH_A0
-
OUTPUT_START
] = 0;

606 if(
	moff£t
 >= 0)

608 
sSeq
.
mbôBuf
[
‹dî
][
GPIO1
-
OUTPUT_START
] = (
off£t
>>1) & 1;

609 
	msSeq
.
	mmbôBuf
[
‹dî
][
GPIO0
-
OUTPUT_START
] = 
off£t
 & 1;

611 if(
	mgaö
 >= 0)

613 
sSeq
.
mbôBuf
[
‹dî
][
GPIO3
-
OUTPUT_START
] = (
gaö
>>1) & 1;

614 
	msSeq
.
	mmbôBuf
[
‹dî
][
GPIO2
-
OUTPUT_START
] = 
gaö
 & 1;

616 
	m‹dî
++;

620 } 
	tsSET_HVO
;

622 
	ssSET_FW_GAIN


624 
	mmode
;

625 
sSEQ
 
	msSeq
;

627 
sSET_FW_GAIN
()

629 
	mmode
 = -1;

630 
	msSeq
.
Inô
();

633 
Inô
()

635 
	m‹dî
=0;

636 
	msSeq
.
Inô
();

639 
	msSeq
.
	mcmd
[
‹dî
] = 
MBIT_TRS
;

640 
	msSeq
.
	mmbôBuf
[
‹dî
][
ADC_B_CH_A1
-
OUTPUT_START
] = 1;

641 
	msSeq
.
	mmbôBuf
[
‹dî
][
ADC_B_CH_A0
-
OUTPUT_START
] = 1;

642 
	mmode
)

645 
sSeq
.
mbôBuf
[
‹dî
][
GPIO1
-
OUTPUT_START
] = 0;

649 
sSeq
.
mbôBuf
[
‹dî
][
GPIO1
-
OUTPUT_START
] = 1;

652 
	m‹dî
++;

655 } 
	tsSET_FW_GAIN
;

657 
	ssSET_ADC_B


659 
	mty≥
;

660 
sSEQ
 
	msSeq
;

662 
sSET_ADC_B
()

664 
	mty≥
=-1;

665 
	msSeq
.
Inô
();

668 
Inô
()

670 
	m‹dî
=0;

671 
	msSeq
.
Inô
();

674 
	msSeq
.
	mcmd
[
‹dî
] = 
MBIT_TRS
;

675 
	msSeq
.
	mmbôBuf
[
‹dî
][
FWIRE_SELF_VB
-
OUTPUT_START
] = 0;

676 
	msSeq
.
	mmbôBuf
[
‹dî
][
FWIRE_SELF_VC
-
OUTPUT_START
] = 0;

677 
	mty≥
)

679 
	mVCFFT
:

680 
sSeq
.
mbôBuf
[
‹dî
][
ADC_B_CH_A1
-
OUTPUT_START
] = 0;

681 
	msSeq
.
	mmbôBuf
[
‹dî
][
ADC_B_CH_A0
-
OUTPUT_START
] = 0;

684 
	mVCSFT
:

685 
sSeq
.
mbôBuf
[
‹dî
][
ADC_B_CH_A1
-
OUTPUT_START
] = 0;

686 
	msSeq
.
	mmbôBuf
[
‹dî
][
ADC_B_CH_A0
-
OUTPUT_START
] = 1;

689 
	mHVOFT
:

690 
sSeq
.
mbôBuf
[
‹dî
][
ADC_B_CH_A1
-
OUTPUT_START
] = 1;

691 
	msSeq
.
	mmbôBuf
[
‹dî
][
ADC_B_CH_A0
-
OUTPUT_START
] = 0;

694 
	mFWFT
:

695 
sSeq
.
mbôBuf
[
‹dî
][
ADC_B_CH_A1
-
OUTPUT_START
] = 1;

696 
	msSeq
.
	mmbôBuf
[
‹dî
][
ADC_B_CH_A0
-
OUTPUT_START
] = 1;

699 
	m‹dî
++;

702 } 
	tsSET_ADC_B
;

704 
	ssGET_VI


706 
	mtypGë
;

707 
BOOL
 
	mbSkùDñay
;

708 
sSEQ
 
	msSeq
;

710 
sGET_VI
()

712 
	mtypGë
=
VI
;

713 
	mbSkùDñay
 = 
FALSE
;

714 
	msSeq
.
Inô
();

717 
Inô
()

719 
	m‹dî
=0;

720 
	msSeq
.
Inô
();

723 
	msSeq
.
	mcmd
[
‹dî
] = 
BIT_TRS
;

724 
	msSeq
.
	mBôNo
[
‹dî
] = 
_AD_CONVST
-
OUTPUT_START
;

725 
	msSeq
.
	mbyãBuf
[
‹dî
] = 1;

726 
	m‹dî
++;

729 if(
	mbSkùDñay
 =
FALSE
)

731 
sSeq
.
cmd
[
‹dî
] = 
DLY
;

732 
	msSeq
.
	mP‹tNo
[
‹dî
] = 
u£c
;

733 
	msSeq
.
	mbyãBuf
[
‹dî
] = 1;

734 
	m‹dî
++;

738 
	msSeq
.
	mcmd
[
‹dî
] = 
BIT_TRS
;

739 
	msSeq
.
	mBôNo
[
‹dî
] = 
_AD_CONVST
-
OUTPUT_START
;

740 
	msSeq
.
	mbyãBuf
[
‹dî
] = 0;

741 
	m‹dî
++;

743 
	mtypGë
)

745 
	mV
:

747 
sSeq
.
cmd
[
‹dî
] = 
BYTE_RCV
;

748 
	msSeq
.
	mP‹tNo
[
‹dî
] = ()(
ADC_A_D0
-
INPUT_START
)/8;

749 
	msSeq
.
	mrcv_°¨t
 = 
‹dî
;

750 
	m‹dî
++;

753 
	msSeq
.
	mcmd
[
‹dî
] = 
BYTE_RCV
;

754 
	msSeq
.
	mP‹tNo
[
‹dî
] = ()(
ADC_A_D8
-
INPUT_START
)/8;

755 
	m‹dî
++;

758 
	mI
:

760 
sSeq
.
cmd
[
‹dî
] = 
BYTE_RCV
;

761 
	msSeq
.
	mP‹tNo
[
‹dî
] = ()(
ADC_B_D0
-
INPUT_START
)/8;

762 
	msSeq
.
	mrcv_°¨t
 = 
‹dî
;

763 
	m‹dî
++;

766 
	msSeq
.
	mcmd
[
‹dî
] = 
BYTE_RCV
;

767 
	msSeq
.
	mP‹tNo
[
‹dî
] = ()(
ADC_B_D8
-
INPUT_START
)/8;

768 
	m‹dî
++;

771 
	mVI
:

773 
sSeq
.
cmd
[
‹dî
] = 
BYTE_RCV
;

774 
	msSeq
.
	mP‹tNo
[
‹dî
] = ()(
ADC_A_D0
-
INPUT_START
)/8;

775 
	msSeq
.
	mrcv_°¨t
 = 
‹dî
;

776 
	m‹dî
++;

779 
	msSeq
.
	mcmd
[
‹dî
] = 
BYTE_RCV
;

780 
	msSeq
.
	mP‹tNo
[
‹dî
] = ()(
ADC_A_D8
-
INPUT_START
)/8;

781 
	m‹dî
++;

784 
	msSeq
.
	mcmd
[
‹dî
] = 
BYTE_RCV
;

785 
	msSeq
.
	mP‹tNo
[
‹dî
] = ()(
ADC_B_D0
-
INPUT_START
)/8;

786 
	m‹dî
++;

789 
	msSeq
.
	mcmd
[
‹dî
] = 
BYTE_RCV
;

790 
	msSeq
.
	mP‹tNo
[
‹dî
] = ()(
ADC_B_D8
-
INPUT_START
)/8;

791 
	m‹dî
++;

796 } 
	tsGET_VI
;

798 
	ssAPPLY


800 
	mty≥
;

801 
sSEQ
 
	msSeq
;

803 
sAPPLY
()

805 
	mty≥
 = 
ALL_OUT
;

806 
	msSeq
.
Inô
();

809 
Inô
()

811 
	m‹dî
=0;

812 
	msSeq
.
Inô
();

815 
	msSeq
.
	mcmd
[
‹dî
] = 
MBIT_TRS
;

816 
	msSeq
.
	mmbôBuf
[
‹dî
][
VB_RY_OUT_A2
-
OUTPUT_START
] = 0;

817 
	msSeq
.
	mmbôBuf
[
‹dî
][
VB_RY_OUT_A1
-
OUTPUT_START
] = 0;

818 
	msSeq
.
	mmbôBuf
[
‹dî
][
VB_RY_OUT_A0
-
OUTPUT_START
] = 0;

819 
	m‹dî
++;

822 
	msSeq
.
	mcmd
[
‹dî
] = 
MBIT_TRS
;

823 
	mty≥
)

825 
	mLV1
:

826 
sSeq
.
mbôBuf
[
‹dî
][
VB_RY_OUT_A2
-
OUTPUT_START
] = 0;

827 
	msSeq
.
	mmbôBuf
[
‹dî
][
VB_RY_OUT_A1
-
OUTPUT_START
] = 1;

828 
	msSeq
.
	mmbôBuf
[
‹dî
][
VB_RY_OUT_A0
-
OUTPUT_START
] = 1;

831 
	mLV2
:

832 
sSeq
.
mbôBuf
[
‹dî
][
VB_RY_OUT_A2
-
OUTPUT_START
] = 1;

833 
	msSeq
.
	mmbôBuf
[
‹dî
][
VB_RY_OUT_A1
-
OUTPUT_START
] = 0;

834 
	msSeq
.
	mmbôBuf
[
‹dî
][
VB_RY_OUT_A0
-
OUTPUT_START
] = 0;

837 
	mHV1
:

838 
sSeq
.
mbôBuf
[
‹dî
][
VB_RY_OUT_A2
-
OUTPUT_START
] = 0;

839 
	msSeq
.
	mmbôBuf
[
‹dî
][
VB_RY_OUT_A1
-
OUTPUT_START
] = 0;

840 
	msSeq
.
	mmbôBuf
[
‹dî
][
VB_RY_OUT_A0
-
OUTPUT_START
] = 1;

843 
	mHV2
:

844 
sSeq
.
mbôBuf
[
‹dî
][
VB_RY_OUT_A2
-
OUTPUT_START
] = 0;

845 
	msSeq
.
	mmbôBuf
[
‹dî
][
VB_RY_OUT_A1
-
OUTPUT_START
] = 1;

846 
	msSeq
.
	mmbôBuf
[
‹dî
][
VB_RY_OUT_A0
-
OUTPUT_START
] = 0;

849 
	mPULSE
:

850 
sSeq
.
mbôBuf
[
‹dî
][
VB_RY_OUT_A2
-
OUTPUT_START
] = 1;

851 
	msSeq
.
	mmbôBuf
[
‹dî
][
VB_RY_OUT_A1
-
OUTPUT_START
] = 0;

852 
	msSeq
.
	mmbôBuf
[
‹dî
][
VB_RY_OUT_A0
-
OUTPUT_START
] = 1;

855 
	m‹dî
++;

858 } 
	tsAPPLY
;

860 
	ssBREAK


862 
	mty≥
;

863 
sSEQ
 
	msSeq
;

865 
sBREAK
()

867 
	mty≥
 = 
ALL_OUT
;

868 
	msSeq
.
Inô
();

871 
Inô
()

873 
	m‹dî
=0;

874 
	msSeq
.
Inô
();

877 
	msSeq
.
	mcmd
[
‹dî
] = 
MBIT_TRS
;

878 if(
	mty≥
 =
VB_ONLY
)

880 
sSeq
.
mbôBuf
[
‹dî
][
VB_RY_OUT_A2
-
OUTPUT_START
] = 0;

881 
	msSeq
.
	mmbôBuf
[
‹dî
][
VB_RY_OUT_A1
-
OUTPUT_START
] = 0;

882 
	msSeq
.
	mmbôBuf
[
‹dî
][
VB_RY_OUT_A0
-
OUTPUT_START
] = 0;

886 
	mi
=
OUTPUT_START
; i<
	mOUTPUT_START
+
	mTOTAL_OUTPUT_NUM
; i++)

888 if(
	mi
 =
BOX_VB_ENA_A
 || 
i
 =
BOX_VB_ENA_B
 || i =
BOX_VB_ENA_C
 || i =
BOX_VB_ENA_D


889 || 
i
 =
BOX_VC_ENA_A
 || i =
BOX_VC_ENA_B
 || i =
BOX_VC_ENA_C
 || i =
BOX_VC_ENA_D


890 || 
i
 =
_AD_CONVST
)

891 { 
sSeq
.
mbôBuf
[
‹dî
][
i
-
OUTPUT_START
] = 1; }

893 { 
	msSeq
.
	mmbôBuf
[
‹dî
][
i
-
OUTPUT_START
] = 0; }

896 
	m‹dî
++;

898 } 
	tsBREAK
;

900 
	ssSET_BPOINT


902 
	mbpoöt
, 
	mbTRY
;

903 
sSEQ
 
	msSeq
;

905 
sSET_BPOINT
()

907 
	mbpoöt
 = 0;

908 
	mbTRY
 = 
TR
;

909 
	msSeq
.
Inô
();

912 
Inô
()

914 
	mi
=0, 
	m‹dî
=0;

915 
BYTE
 
	mByã
=0;

916 
	msSeq
.
Inô
();

919 
	msSeq
.
	mcmd
[
‹dî
] = 
BYTE_TRS
;

920 
	msSeq
.
	mP‹tNo
[
‹dî
] = ()(
VB_ENA_A_A0
-
OUTPUT_START
)/8;

922 
	mByã
 = 0;

923 
	mByã
 += 1<<0;

924 
	mByã
 += 1<<1;

925 
	mByã
 += 1<<2;

926 
	mByã
 += 1<<3;

927 
	mByã
 += 1<<4;

928 
	mByã
 += 1<<5;

929 
	mByã
 += 1<<6;

930 
	mByã
 += 1<<7;

931 
	msSeq
.
	mbyãBuf
[
‹dî
] = 
Byã
;

932 
	m‹dî
++;

935 
	msSeq
.
	mcmd
[
‹dî
] = 
BIT_TRS
;

936 
	msSeq
.
	mbyãBuf
[
‹dî
] = 1;

937 if(((1<<(
	mbpoöt
>>12 & 0x0f)Ë& 0x01)>>0Ë
	msSeq
.
	mBôNo
[
‹dî
] = 
_BOX_A_VB_RST
-
OUTPUT_START
;

938 if(((1<<(
	mbpoöt
>>12 & 0x0f)Ë& 0x02)>>1Ë
	msSeq
.
	mBôNo
[
‹dî
] = 
_BOX_B_VB_RST
-
OUTPUT_START
;

939 if(((1<<(
	mbpoöt
>>12 & 0x0f)Ë& 0x04)>>2Ë
	msSeq
.
	mBôNo
[
‹dî
] = 
_BOX_C_VB_RST
-
OUTPUT_START
;

940 if(((1<<(
	mbpoöt
>>12 & 0x0f)Ë& 0x08)>>3Ë
	msSeq
.
	mBôNo
[
‹dî
] = 
_BOX_D_VB_RST
-
OUTPUT_START
;

941 
	m‹dî
++;

955 
	msSeq
.
	mcmd
[
‹dî
] = 
BYTE_TRS
;

956 
	msSeq
.
	mP‹tNo
[
‹dî
] = ()(
BOX_VB_ENA_A
-
OUTPUT_START
)/8;

958 
	mByã
 = 0;

959 
	mByã
 +((1<<(
bpoöt
>>12 & 0x0f)) ^ 0x01) & 0x01;

960 
	mByã
 +((1<<(
bpoöt
>>12 & 0x0f)) ^ 0x02) & 0x02;

961 
	mByã
 +((1<<(
bpoöt
>>12 & 0x0f)) ^ 0x04) & 0x04;

962 
	mByã
 +((1<<(
bpoöt
>>12 & 0x0f)) ^ 0x08) & 0x08;

963 
	msSeq
.
	mbyãBuf
[
‹dî
] = 
Byã
;

964 
	m‹dî
++;

967 
	msSeq
.
	mcmd
[
‹dî
] = 
BYTE_TRS
;

968 
	msSeq
.
	mP‹tNo
[
‹dî
] = ()(
VB_PIN_A0
-
OUTPUT_START
)/8;

970 
	mByã
 = 0;

971 
	mByã
 +
bpoöt
 & 0x01;

972 
	mByã
 +
bpoöt
 & 0x02;

973 
	mByã
 +
bpoöt
 & 0x04;

974 
	mByã
 +
bpoöt
 & 0x08;

975 
	mByã
 +
bpoöt
 & 0x10;

976 
	mByã
 +
bpoöt
 & 0x20;

978 if(
	mbTRY
 =
TR
)

981 
Byã
 +((1<<(
bpoöt
>>6 & 0x01)) & 0x01)<<6;

982 
	mByã
 +((1<<(
bpoöt
>>6 & 0x01)) & 0x02)<<6;

984 
	msSeq
.
	mbyãBuf
[
‹dî
] = 
Byã
;

985 
	m‹dî
++;

988 
	msSeq
.
	mcmd
[
‹dî
] = 
BYTE_TRS
;

989 
	msSeq
.
	mP‹tNo
[
‹dî
] = ()(
VB_CPLD_A2
-
OUTPUT_START
)/8;

991 
	mByã
 = 0;

992 if(
	mbTRY
 =
RY
)

995 
Byã
 +((1<<(
bpoöt
>>6 & 0x01)) & 0x01)<<0;

996 
	mByã
 +((1<<(
bpoöt
>>6 & 0x01)) & 0x02)<<0;

998 
	mByã
 += 0<<2;

999 
	mByã
 +(
bpoöt
 & 0x080)>>3;

1000 
	mByã
 +(
bpoöt
 & 0x100)>>3;

1001 
	mByã
 +(
bpoöt
 & 0x200)>>3;

1002 
	mByã
 +(
bpoöt
 & 0x400)>>3;

1003 
	msSeq
.
	mbyãBuf
[
‹dî
] = 
Byã
;

1004 
	m‹dî
++;

1007 
	msSeq
.
	mcmd
[
‹dî
] = 
BYTE_TRS
;

1008 
	msSeq
.
	mP‹tNo
[
‹dî
] = ()(
VB_ENA_A_A0
-
OUTPUT_START
)/8;

1010 
	mByã
 = 0;

1011 
	mByã
 +((1<<(
bpoöt
>>11 & 0x01)) ^ 0x01) & 0x01;

1012 
	mByã
 +((1<<(
bpoöt
>>11 & 0x01)) ^ 0x02) & 0x02;

1013 
	msSeq
.
	mbyãBuf
[
‹dî
] = 
Byã
;

1014 
	m‹dî
++;

1017 } 
	tsSET_BPOINT
;

1019 
	ssSET_CPOINT


1021 
	m˝oöt
, 
	mbTRY
;

1022 
sSEQ
 
	msSeq
;

1024 
sSET_CPOINT
()

1026 
	m˝oöt
 = 0;

1027 
	mbTRY
 = 
TR
;

1028 
	msSeq
.
Inô
();

1031 
Inô
()

1033 
	mi
=0, 
	m‹dî
=0;

1034 
BYTE
 
	mByã
=0;

1035 
	msSeq
.
Inô
();

1038 
	msSeq
.
	mcmd
[
‹dî
] = 
BYTE_TRS
;

1039 
	msSeq
.
	mP‹tNo
[
‹dî
] = ()(
VC_ENA_A_A0
-
OUTPUT_START
)/8;

1041 
	mByã
 = 0;

1042 
	mByã
 += 1<<0;

1043 
	mByã
 += 1<<1;

1044 
	mByã
 += 1<<2;

1045 
	mByã
 += 1<<3;

1046 
	mByã
 += 1<<4;

1047 
	mByã
 += 1<<5;

1048 
	mByã
 += 1<<6;

1049 
	mByã
 += 1<<7;

1050 
	msSeq
.
	mbyãBuf
[
‹dî
] = 
Byã
;

1051 
	m‹dî
++;

1054 
	msSeq
.
	mcmd
[
‹dî
] = 
BIT_TRS
;

1055 
	msSeq
.
	mbyãBuf
[
‹dî
] = 1;

1056 if(((1<<(
	m˝oöt
>>12 & 0x0f)Ë& 0x01)>>0Ë
	msSeq
.
	mBôNo
[
‹dî
] = 
_BOX_A_VC_RST
-
OUTPUT_START
;

1057 if(((1<<(
	m˝oöt
>>12 & 0x0f)Ë& 0x02)>>1Ë
	msSeq
.
	mBôNo
[
‹dî
] = 
_BOX_B_VC_RST
-
OUTPUT_START
;

1058 if(((1<<(
	m˝oöt
>>12 & 0x0f)Ë& 0x04)>>2Ë
	msSeq
.
	mBôNo
[
‹dî
] = 
_BOX_C_VC_RST
-
OUTPUT_START
;

1059 if(((1<<(
	m˝oöt
>>12 & 0x0f)Ë& 0x08)>>3Ë
	msSeq
.
	mBôNo
[
‹dî
] = 
_BOX_D_VC_RST
-
OUTPUT_START
;

1060 
	m‹dî
++;

1074 
	msSeq
.
	mcmd
[
‹dî
] = 
BYTE_TRS
;

1075 
	msSeq
.
	mP‹tNo
[
‹dî
] = ()(
BOX_VC_ENA_A
-
OUTPUT_START
)/8;

1077 
	mByã
 = 0;

1078 
	mByã
 +((1<<(
˝oöt
>>12 & 0x0f)) ^ 0x01) & 0x01;

1079 
	mByã
 +((1<<(
˝oöt
>>12 & 0x0f)) ^ 0x02) & 0x02;

1080 
	mByã
 +((1<<(
˝oöt
>>12 & 0x0f)) ^ 0x04) & 0x04;

1081 
	mByã
 +((1<<(
˝oöt
>>12 & 0x0f)) ^ 0x08) & 0x08;

1082 
	msSeq
.
	mbyãBuf
[
‹dî
] = 
Byã
;

1083 
	m‹dî
++;

1086 
	msSeq
.
	mcmd
[
‹dî
] = 
BYTE_TRS
;

1087 
	msSeq
.
	mP‹tNo
[
‹dî
] = ()(
VC_PIN_A0
-
OUTPUT_START
)/8;

1089 
	mByã
 = 0;

1090 
	mByã
 +
˝oöt
 & 0x01;

1091 
	mByã
 +
˝oöt
 & 0x02;

1092 
	mByã
 +
˝oöt
 & 0x04;

1093 
	mByã
 +
˝oöt
 & 0x08;

1094 
	mByã
 +
˝oöt
 & 0x10;

1095 
	mByã
 +
˝oöt
 & 0x20;

1097 if(
	mbTRY
 =
TR
)

1100 
Byã
 +((1<<(
˝oöt
>>6 & 0x01)) & 0x01)<<6;

1101 
	mByã
 +((1<<(
˝oöt
>>6 & 0x01)) & 0x02)<<6;

1103 
	msSeq
.
	mbyãBuf
[
‹dî
] = 
Byã
;

1104 
	m‹dî
++;

1107 
	msSeq
.
	mcmd
[
‹dî
] = 
BYTE_TRS
;

1108 
	msSeq
.
	mP‹tNo
[
‹dî
] = ()(
VC_CPLD_A2
-
OUTPUT_START
)/8;

1110 
	mByã
 = 0;

1111 if(
	mbTRY
 =
RY
)

1114 
Byã
 +((1<<(
˝oöt
>>6 & 0x01)) & 0x01)<<0;

1115 
	mByã
 +((1<<(
˝oöt
>>6 & 0x01)) & 0x02)<<0;

1117 
	mByã
 += 0<<2;

1118 
	mByã
 +(
˝oöt
 & 0x080)>>3;

1119 
	mByã
 +(
˝oöt
 & 0x100)>>3;

1120 
	mByã
 +(
˝oöt
 & 0x200)>>3;

1121 
	mByã
 +(
˝oöt
 & 0x400)>>3;

1122 
	msSeq
.
	mbyãBuf
[
‹dî
] = 
Byã
;

1123 
	m‹dî
++;

1126 
	msSeq
.
	mcmd
[
‹dî
] = 
BYTE_TRS
;

1127 
	msSeq
.
	mP‹tNo
[
‹dî
] = ()(
VC_ENA_A_A0
-
OUTPUT_START
)/8;

1129 
	mByã
 = 0;

1130 
	mByã
 +((1<<(
˝oöt
>>11 & 0x01)) ^ 0x01) & 0x01;

1131 
	mByã
 +((1<<(
˝oöt
>>11 & 0x01)) ^ 0x02) & 0x02;

1132 
	msSeq
.
	mbyãBuf
[
‹dî
] = 
Byã
;

1133 
	m‹dî
++;

1136 } 
	tsSET_CPOINT
;

1138 
	ssRST_BBOX


1140 
	mbbox
;

1141 
sSEQ
 
	msSeq
;

1143 
sRST_BBOX
()

1145 
	mbbox
 = -1;

1146 
	msSeq
.
Inô
();

1149 
Inô
()

1151 
	m‹dî
=0;

1152 
BYTE
 
	mByã
=0;

1153 
	msSeq
.
Inô
();

1155 
	mbbox
)

1157 
	mBOX_A
:

1158 
BOX_B
:

1159 
BOX_C
:

1160 
BOX_D
:

1162 
sSeq
.
cmd
[
‹dî
] = 
BIT_TRS
;

1163 
	msSeq
.
	mbyãBuf
[
‹dî
] = 0;

1165 if(
	mbbox
 =
BOX_A
Ë
sSeq
.
BôNo
[
‹dî
] = 
_BOX_A_VB_RST
-
OUTPUT_START
;

1166 if(
	mbbox
 =
BOX_B
Ë
sSeq
.
BôNo
[
‹dî
] = 
_BOX_B_VB_RST
-
OUTPUT_START
;

1167 if(
	mbbox
 =
BOX_C
Ë
sSeq
.
BôNo
[
‹dî
] = 
_BOX_C_VB_RST
-
OUTPUT_START
;

1168 if(
	mbbox
 =
BOX_D
Ë
sSeq
.
BôNo
[
‹dî
] = 
_BOX_D_VB_RST
-
OUTPUT_START
;

1169 
	m‹dî
++;

1172 
	mBOX_ALL
:

1174 
sSeq
.
cmd
[
‹dî
] = 
BYTE_TRS
;

1175 
	msSeq
.
	mP‹tNo
[
‹dî
] = ()(
_BOX_A_VB_RST
-
OUTPUT_START
)/8;

1177 
	mByã
 = 0;

1178 
	mByã
 += 0<<0;

1179 
	mByã
 += 0<<1;

1180 
	mByã
 += 0<<2;

1181 
	mByã
 += 0<<3;

1182 
	mByã
 += 1<<4;

1183 
	mByã
 += 1<<5;

1184 
	mByã
 += 1<<6;

1185 
	mByã
 += 1<<7;

1186 
	msSeq
.
	mbyãBuf
[
‹dî
] = 
Byã
;

1187 
	m‹dî
++;

1192 } 
	tsRST_BBOX
;

1194 
	ssRST_CBOX


1196 
	mcbox
;

1197 
sSEQ
 
	msSeq
;

1199 
sRST_CBOX
()

1201 
	mcbox
 = -1;

1202 
	msSeq
.
Inô
();

1205 
Inô
()

1207 
	m‹dî
=0;

1208 
BYTE
 
	mByã
=0;

1209 
	msSeq
.
Inô
();

1211 
	mcbox
)

1213 
	mBOX_A
:

1214 
BOX_B
:

1215 
BOX_C
:

1216 
BOX_D
:

1218 
sSeq
.
cmd
[
‹dî
] = 
BIT_TRS
;

1219 
	msSeq
.
	mbyãBuf
[
‹dî
] = 0;

1221 if(
	mcbox
 =
BOX_A
Ë
sSeq
.
BôNo
[
‹dî
] = 
_BOX_A_VC_RST
-
OUTPUT_START
;

1222 if(
	mcbox
 =
BOX_B
Ë
sSeq
.
BôNo
[
‹dî
] = 
_BOX_B_VC_RST
-
OUTPUT_START
;

1223 if(
	mcbox
 =
BOX_C
Ë
sSeq
.
BôNo
[
‹dî
] = 
_BOX_C_VC_RST
-
OUTPUT_START
;

1224 if(
	mcbox
 =
BOX_D
Ë
sSeq
.
BôNo
[
‹dî
] = 
_BOX_D_VC_RST
-
OUTPUT_START
;

1225 
	m‹dî
++;

1228 
	mBOX_ALL
:

1230 
sSeq
.
cmd
[
‹dî
] = 
BYTE_TRS
;

1231 
	msSeq
.
	mP‹tNo
[
‹dî
] = ()(
_BOX_A_VC_RST
-
OUTPUT_START
)/8;

1233 
	mByã
 = 0;

1234 
	mByã
 += 1<<0;

1235 
	mByã
 += 1<<1;

1236 
	mByã
 += 1<<2;

1237 
	mByã
 += 1<<3;

1238 
	mByã
 += 0<<4;

1239 
	mByã
 += 0<<5;

1240 
	mByã
 += 0<<6;

1241 
	mByã
 += 0<<7;

1242 
	msSeq
.
	mbyãBuf
[
‹dî
] = 
Byã
;

1243 
	m‹dî
++;

1248 } 
	tsRST_CBOX
;

1250 
	ssRST_BOX


1252 
	m±B
, 
	m±C
;

1253 
sSEQ
 
	msSeq
;

1255 
sRST_BOX
()

1257 
	m±B
 = 
±C
 = -1;

1258 
	msSeq
.
Inô
();

1261 
Inô
()

1263 
	m‹dî
=0;

1264 
BYTE
 
	mByã
=0;

1265 
	msSeq
.
Inô
();

1268 if(
	m±B
 >= 0)

1270 
sSeq
.
cmd
[
‹dî
] = 
BIT_TRS
;

1271 
	msSeq
.
	mbyãBuf
[
‹dî
] = 0;

1272 if(((1<<(
	m±B
>>12 & 0x0f)Ë& 0x01)>>0Ë
	msSeq
.
	mBôNo
[
‹dî
] = 
_BOX_A_VB_RST
-
OUTPUT_START
;

1273 if(((1<<(
	m±B
>>12 & 0x0f)Ë& 0x02)>>1Ë
	msSeq
.
	mBôNo
[
‹dî
] = 
_BOX_B_VB_RST
-
OUTPUT_START
;

1274 if(((1<<(
	m±B
>>12 & 0x0f)Ë& 0x04)>>2Ë
	msSeq
.
	mBôNo
[
‹dî
] = 
_BOX_C_VB_RST
-
OUTPUT_START
;

1275 if(((1<<(
	m±B
>>12 & 0x0f)Ë& 0x08)>>3Ë
	msSeq
.
	mBôNo
[
‹dî
] = 
_BOX_D_VB_RST
-
OUTPUT_START
;

1276 
	m‹dî
++;

1280 if(
	m±C
 >= 0)

1282 
sSeq
.
cmd
[
‹dî
] = 
BIT_TRS
;

1283 
	msSeq
.
	mbyãBuf
[
‹dî
] = 0;

1284 if(((1<<(
	m±C
>>12 & 0x0f)Ë& 0x01)>>0Ë
	msSeq
.
	mBôNo
[
‹dî
] = 
_BOX_A_VC_RST
-
OUTPUT_START
;

1285 if(((1<<(
	m±C
>>12 & 0x0f)Ë& 0x02)>>1Ë
	msSeq
.
	mBôNo
[
‹dî
] = 
_BOX_B_VC_RST
-
OUTPUT_START
;

1286 if(((1<<(
	m±C
>>12 & 0x0f)Ë& 0x04)>>2Ë
	msSeq
.
	mBôNo
[
‹dî
] = 
_BOX_C_VC_RST
-
OUTPUT_START
;

1287 if(((1<<(
	m±C
>>12 & 0x0f)Ë& 0x08)>>3Ë
	msSeq
.
	mBôNo
[
‹dî
] = 
_BOX_D_VC_RST
-
OUTPUT_START
;

1288 
	m‹dî
++;

1292 } 
	tsRST_BOX
;

1294 
	ssRST_BOXALL


1296 
BOOL
 
	mbBBox
, 
	mbCBox
;

1297 
sSEQ
 
	msSeq
;

1299 
sRST_BOXALL
()

1301 
	mbBBox
 = 
bCBox
 = 
TRUE
;

1302 
	msSeq
.
Inô
();

1305 
Inô
()

1307 
	m‹dî
=0;

1308 
BYTE
 
	mByã
=0;

1309 
	msSeq
.
Inô
();

1311 if(
	mbBBox
 =
TRUE
 && 
bCBox
 == TRUE)

1314 
sSeq
.
cmd
[
‹dî
] = 
BYTE_TRS
;

1315 
	msSeq
.
	mP‹tNo
[
‹dî
] = ()(
_BOX_A_VB_RST
-
OUTPUT_START
)/8;

1317 
	mByã
 = 0;

1318 
	mByã
 += 0<<0;

1319 
	mByã
 += 0<<1;

1320 
	mByã
 += 0<<2;

1321 
	mByã
 += 0<<3;

1322 
	mByã
 += 0<<4;

1323 
	mByã
 += 0<<5;

1324 
	mByã
 += 0<<6;

1325 
	mByã
 += 0<<7;

1326 
	msSeq
.
	mbyãBuf
[
‹dî
] = 
Byã
;

1327 
	m‹dî
++;

1329 if(
	mbBBox
 =
TRUE
)

1332 
sSeq
.
cmd
[
‹dî
] = 
BYTE_TRS
;

1333 
	msSeq
.
	mP‹tNo
[
‹dî
] = ()(
_BOX_A_VB_RST
-
OUTPUT_START
)/8;

1335 
	mByã
 = 0;

1336 
	mByã
 += 0<<0;

1337 
	mByã
 += 0<<1;

1338 
	mByã
 += 0<<2;

1339 
	mByã
 += 0<<3;

1340 
	mByã
 += 1<<4;

1341 
	mByã
 += 1<<5;

1342 
	mByã
 += 1<<6;

1343 
	mByã
 += 1<<7;

1344 
	msSeq
.
	mbyãBuf
[
‹dî
] = 
Byã
;

1345 
	m‹dî
++;

1347 if(
	mbCBox
 =
TRUE
)

1350 
sSeq
.
cmd
[
‹dî
] = 
BYTE_TRS
;

1351 
	msSeq
.
	mP‹tNo
[
‹dî
] = ()(
_BOX_A_VC_RST
-
OUTPUT_START
)/8;

1353 
	mByã
 = 0;

1354 
	mByã
 += 1<<0;

1355 
	mByã
 += 1<<1;

1356 
	mByã
 += 1<<2;

1357 
	mByã
 += 1<<3;

1358 
	mByã
 += 0<<4;

1359 
	mByã
 += 0<<5;

1360 
	mByã
 += 0<<6;

1361 
	mByã
 += 0<<7;

1362 
	msSeq
.
	mbyãBuf
[
‹dî
] = 
Byã
;

1363 
	m‹dî
++;

1367 } 
	tsRST_BOXALL
;

1369 
	ssRST_BPOINT


1371 
	mbpoöt
, 
	mbTRY
;

1372 
sSEQ
 
	msSeq
;

1374 
sRST_BPOINT
()

1376 
	mbpoöt
 = 0;

1377 
	mbTRY
 = 
TR
;

1378 
	msSeq
.
Inô
();

1381 
Inô
()

1383 
	mi
=0, 
	m‹dî
=0;

1384 
BYTE
 
	mByã
=0;

1385 
	msSeq
.
Inô
();

1388 
	msSeq
.
	mcmd
[
‹dî
] = 
BYTE_TRS
;

1389 
	msSeq
.
	mP‹tNo
[
‹dî
] = ()(
VB_ENA_A_A0
-
OUTPUT_START
)/8;

1391 
	mByã
 = 0;

1392 
	mByã
 += 1<<0;

1393 
	mByã
 += 1<<1;

1394 
	mByã
 += 1<<2;

1395 
	mByã
 += 1<<3;

1396 
	mByã
 += 1<<4;

1397 
	mByã
 += 1<<5;

1398 
	mByã
 += 1<<6;

1399 
	mByã
 += 1<<7;

1400 
	msSeq
.
	mbyãBuf
[
‹dî
] = 
Byã
;

1401 
	m‹dî
++;

1404 
	msSeq
.
	mcmd
[
‹dî
] = 
BIT_TRS
;

1405 
	msSeq
.
	mbyãBuf
[
‹dî
] = 1;

1406 if(((1<<(
	mbpoöt
>>12 & 0x0f)Ë& 0x01)>>0Ë
	msSeq
.
	mBôNo
[
‹dî
] = 
_BOX_A_VB_RST
-
OUTPUT_START
;

1407 if(((1<<(
	mbpoöt
>>12 & 0x0f)Ë& 0x02)>>1Ë
	msSeq
.
	mBôNo
[
‹dî
] = 
_BOX_B_VB_RST
-
OUTPUT_START
;

1408 if(((1<<(
	mbpoöt
>>12 & 0x0f)Ë& 0x04)>>2Ë
	msSeq
.
	mBôNo
[
‹dî
] = 
_BOX_C_VB_RST
-
OUTPUT_START
;

1409 if(((1<<(
	mbpoöt
>>12 & 0x0f)Ë& 0x08)>>3Ë
	msSeq
.
	mBôNo
[
‹dî
] = 
_BOX_D_VB_RST
-
OUTPUT_START
;

1410 
	m‹dî
++;

1424 
	msSeq
.
	mcmd
[
‹dî
] = 
BYTE_TRS
;

1425 
	msSeq
.
	mP‹tNo
[
‹dî
] = ()(
BOX_VB_ENA_A
-
OUTPUT_START
)/8;

1427 
	mByã
 = 0;

1428 
	mByã
 +((1<<(
bpoöt
>>12 & 0x0f)) ^ 0x01) & 0x01;

1429 
	mByã
 +((1<<(
bpoöt
>>12 & 0x0f)) ^ 0x02) & 0x02;

1430 
	mByã
 +((1<<(
bpoöt
>>12 & 0x0f)) ^ 0x04) & 0x04;

1431 
	mByã
 +((1<<(
bpoöt
>>12 & 0x0f)) ^ 0x08) & 0x08;

1432 
	msSeq
.
	mbyãBuf
[
‹dî
] = 
Byã
;

1433 
	m‹dî
++;

1436 
	msSeq
.
	mcmd
[
‹dî
] = 
BYTE_TRS
;

1437 
	msSeq
.
	mP‹tNo
[
‹dî
] = ()(
VB_PIN_A0
-
OUTPUT_START
)/8;

1439 
	mByã
 = 0;

1440 
	mByã
 +
bpoöt
 & 0x01;

1441 
	mByã
 +
bpoöt
 & 0x02;

1442 
	mByã
 +
bpoöt
 & 0x04;

1443 
	mByã
 +
bpoöt
 & 0x08;

1444 
	mByã
 +
bpoöt
 & 0x10;

1445 
	mByã
 +
bpoöt
 & 0x20;

1447 if(
	mbTRY
 =
TR
)

1450 
Byã
 +((1<<(
bpoöt
>>6 & 0x01)) & 0x01)<<6;

1451 
	mByã
 +((1<<(
bpoöt
>>6 & 0x01)) & 0x02)<<6;

1453 
	msSeq
.
	mbyãBuf
[
‹dî
] = 
Byã
;

1454 
	m‹dî
++;

1457 
	msSeq
.
	mcmd
[
‹dî
] = 
BYTE_TRS
;

1458 
	msSeq
.
	mP‹tNo
[
‹dî
] = ()(
VB_CPLD_A2
-
OUTPUT_START
)/8;

1460 
	mByã
 = 0;

1461 if(
	mbTRY
 =
RY
)

1464 
Byã
 +((1<<(
bpoöt
>>6 & 0x01)) & 0x01)<<0;

1465 
	mByã
 +((1<<(
bpoöt
>>6 & 0x01)) & 0x02)<<0;

1467 
	mByã
 += 1<<2;

1468 
	mByã
 +(
bpoöt
 & 0x080)>>3;

1469 
	mByã
 +(
bpoöt
 & 0x100)>>3;

1470 
	mByã
 +(
bpoöt
 & 0x200)>>3;

1471 
	mByã
 +(
bpoöt
 & 0x400)>>3;

1472 
	msSeq
.
	mbyãBuf
[
‹dî
] = 
Byã
;

1473 
	m‹dî
++;

1476 
	msSeq
.
	mcmd
[
‹dî
] = 
BYTE_TRS
;

1477 
	msSeq
.
	mP‹tNo
[
‹dî
] = ()(
VB_ENA_A_A0
-
OUTPUT_START
)/8;

1479 
	mByã
 = 0;

1480 
	mByã
 +((1<<(
bpoöt
>>11 & 0x01)) ^ 0x01) & 0x01;

1481 
	mByã
 +((1<<(
bpoöt
>>11 & 0x01)) ^ 0x02) & 0x02;

1482 
	msSeq
.
	mbyãBuf
[
‹dî
] = 
Byã
;

1483 
	m‹dî
++;

1486 } 
	tsRST_BPOINT
;

1488 
	ssRST_CPOINT


1490 
	m˝oöt
, 
	mbTRY
;

1491 
sSEQ
 
	msSeq
;

1493 
sRST_CPOINT
()

1495 
	m˝oöt
 = 0;

1496 
	mbTRY
 = 
TR
;

1497 
	msSeq
.
Inô
();

1500 
Inô
()

1502 
	mi
=0, 
	m‹dî
=0;

1503 
BYTE
 
	mByã
=0;

1504 
	msSeq
.
Inô
();

1507 
	msSeq
.
	mcmd
[
‹dî
] = 
BYTE_TRS
;

1508 
	msSeq
.
	mP‹tNo
[
‹dî
] = ()(
VC_ENA_A_A0
-
OUTPUT_START
)/8;

1510 
	mByã
 = 0;

1511 
	mByã
 += 1<<0;

1512 
	mByã
 += 1<<1;

1513 
	mByã
 += 1<<2;

1514 
	mByã
 += 1<<3;

1515 
	mByã
 += 1<<4;

1516 
	mByã
 += 1<<5;

1517 
	mByã
 += 1<<6;

1518 
	mByã
 += 1<<7;

1519 
	msSeq
.
	mbyãBuf
[
‹dî
] = 
Byã
;

1520 
	m‹dî
++;

1523 
	msSeq
.
	mcmd
[
‹dî
] = 
BIT_TRS
;

1524 
	msSeq
.
	mbyãBuf
[
‹dî
] = 1;

1525 if(((1<<(
	m˝oöt
>>12 & 0x0f)Ë& 0x01)>>0Ë
	msSeq
.
	mBôNo
[
‹dî
] = 
_BOX_A_VC_RST
-
OUTPUT_START
;

1526 if(((1<<(
	m˝oöt
>>12 & 0x0f)Ë& 0x02)>>1Ë
	msSeq
.
	mBôNo
[
‹dî
] = 
_BOX_B_VC_RST
-
OUTPUT_START
;

1527 if(((1<<(
	m˝oöt
>>12 & 0x0f)Ë& 0x04)>>2Ë
	msSeq
.
	mBôNo
[
‹dî
] = 
_BOX_C_VC_RST
-
OUTPUT_START
;

1528 if(((1<<(
	m˝oöt
>>12 & 0x0f)Ë& 0x08)>>3Ë
	msSeq
.
	mBôNo
[
‹dî
] = 
_BOX_D_VC_RST
-
OUTPUT_START
;

1529 
	m‹dî
++;

1543 
	msSeq
.
	mcmd
[
‹dî
] = 
BYTE_TRS
;

1544 
	msSeq
.
	mP‹tNo
[
‹dî
] = ()(
BOX_VC_ENA_A
-
OUTPUT_START
)/8;

1546 
	mByã
 = 0;

1547 
	mByã
 +((1<<(
˝oöt
>>12 & 0x0f)) ^ 0x01) & 0x01;

1548 
	mByã
 +((1<<(
˝oöt
>>12 & 0x0f)) ^ 0x02) & 0x02;

1549 
	mByã
 +((1<<(
˝oöt
>>12 & 0x0f)) ^ 0x04) & 0x04;

1550 
	mByã
 +((1<<(
˝oöt
>>12 & 0x0f)) ^ 0x08) & 0x08;

1551 
	msSeq
.
	mbyãBuf
[
‹dî
] = 
Byã
;

1552 
	m‹dî
++;

1555 
	msSeq
.
	mcmd
[
‹dî
] = 
BYTE_TRS
;

1556 
	msSeq
.
	mP‹tNo
[
‹dî
] = ()(
VC_PIN_A0
-
OUTPUT_START
)/8;

1558 
	mByã
 = 0;

1559 
	mByã
 +
˝oöt
 & 0x01;

1560 
	mByã
 +
˝oöt
 & 0x02;

1561 
	mByã
 +
˝oöt
 & 0x04;

1562 
	mByã
 +
˝oöt
 & 0x08;

1563 
	mByã
 +
˝oöt
 & 0x10;

1564 
	mByã
 +
˝oöt
 & 0x20;

1566 if(
	mbTRY
 =
TR
)

1569 
Byã
 +((1<<(
˝oöt
>>6 & 0x01)) & 0x01)<<6;

1570 
	mByã
 +((1<<(
˝oöt
>>6 & 0x01)) & 0x02)<<6;

1572 
	msSeq
.
	mbyãBuf
[
‹dî
] = 
Byã
;

1573 
	m‹dî
++;

1576 
	msSeq
.
	mcmd
[
‹dî
] = 
BYTE_TRS
;

1577 
	msSeq
.
	mP‹tNo
[
‹dî
] = ()(
VC_CPLD_A2
-
OUTPUT_START
)/8;

1579 
	mByã
 = 0;

1580 if(
	mbTRY
 =
RY
)

1583 
Byã
 +((1<<(
˝oöt
>>6 & 0x01)) & 0x01)<<0;

1584 
	mByã
 +((1<<(
˝oöt
>>6 & 0x01)) & 0x02)<<0;

1586 
	mByã
 += 1<<2;

1587 
	mByã
 +(
˝oöt
 & 0x080)>>3;

1588 
	mByã
 +(
˝oöt
 & 0x100)>>3;

1589 
	mByã
 +(
˝oöt
 & 0x200)>>3;

1590 
	mByã
 +(
˝oöt
 & 0x400)>>3;

1591 
	msSeq
.
	mbyãBuf
[
‹dî
] = 
Byã
;

1592 
	m‹dî
++;

1595 
	msSeq
.
	mcmd
[
‹dî
] = 
BYTE_TRS
;

1596 
	msSeq
.
	mP‹tNo
[
‹dî
] = ()(
VC_ENA_A_A0
-
OUTPUT_START
)/8;

1598 
	mByã
 = 0;

1599 
	mByã
 +((1<<(
˝oöt
>>11 & 0x01)) ^ 0x01) & 0x01;

1600 
	mByã
 +((1<<(
˝oöt
>>11 & 0x01)) ^ 0x02) & 0x02;

1601 
	msSeq
.
	mbyãBuf
[
‹dî
] = 
Byã
;

1602 
	m‹dî
++;

1605 } 
	tsRST_CPOINT
;

	@ACE400Cal.h

4 #i‡!
deföed
(
AFX_ACE400Cal_H__882AA407_5121_4650_8BB4_1927849024C9__INCLUDED_
)

5 
	#AFX_ACE400Cal_H__882AA407_5121_4650_8BB4_1927849024C9__INCLUDED_


	)

7 #i‡
_MSC_VER
 > 1000

8 #¥agm®
⁄˚


11 #i‚de‡
__AFXWIN_H__


12 #îr‹ 
ö˛ude
 '°dafx.h' 
bef‹e
 
ö˛udög
 
this
 
fûe
 
PCH


15 
	~"ªsour˚.h
"

17 
	~"GlobÆs.h
"

18 
	~"Ma¸oMŸi⁄.h
"

19 
	~"DlgNumbîKeyPad.h
"

21 
	~"Eº‹.h
"

23 
	#WDM
 
TRUE


	)

24 
	~"CDIO.h
"

25 #¥agm®
commít
(
lib
, "CDIO.lib")

37 ˛as†
	cCV43M™uÆTe°Aµ
 : 
public
 
CWöAµ


39 
public
:

40 
CV43M™uÆTe°Aµ
();

45 
	mpublic
:

46 
vútuÆ
 
BOOL
 
InôIn°™˚
();

55 
DECLARE_MESSAGE_MAP
()

	@ACE400CalDlg.h

2 
	~"œbñc⁄åﬁ.h
"

7 #i‡!
deföed
(
AFX_ACE400CalDLG_H__E0BF6063_6F03_40DE_A586_5DB4D3DA7AA0__INCLUDED_
)

8 
	#AFX_ACE400CalDLG_H__E0BF6063_6F03_40DE_A586_5DB4D3DA7AA0__INCLUDED_


	)

10 #i‡
_MSC_VER
 > 1000

11 #¥agm®
⁄˚


17 ˛as†
	cCV43M™uÆTe°Dlg
 : 
public
 
CDülog


19 
BOOL
 
m_bNKeyPadO≥n
, 
	mm_bBTRY
, 
	mm_bCTRY
;

20 
	mm_nBPCB
, 
	mm_nCPCB
, 
	mm_nIR™ge
;

21 
UINT
 
	mm_nIadvÆue
, 
	mm_nVadvÆue
;

22 
	mm_dIamp
, 
	mm_dVvﬁt
, 
	mm_dRohm
;

25 
	mpublic
:

26 
CV43M™uÆTe°Dlg
(
CWnd
* 
pP¨ít
 = 
NULL
);

28 
InôMembî
();

29 
InôVõw
();

30 
Re‰eshVõw
(
CWnd
 *
pWnd
 = 
NULL
);

31 
CÆcPoöt
();

35 íum { 
	mIDD
 = 
IDD_ACE400Cal_DIALOG
 };

36 
CLi°Box
 
	gm_li°Msg
;

37 
CLi°Box
 
	gm_li°BPoöt
;

38 
CLi°Box
 
	gm_li°CPoöt
;

39 
UINT
 
	gm_nLV1
;

40 
UINT
 
	gm_nLV2
;

41 
UINT
 
	gm_nHV1
;

42 
UINT
 
	gm_nHV2
;

43 
UINT
 
	gm_nI
;

44 
UINT
 
	gm_nBPö
;

45 
UINT
 
	gm_nCPö
;

46 
	gm_nBBox
;

47 
	gm_nCBox
;

48 
	gm_nBPCBE«bÀ
;

49 
	gm_nCPCBE«bÀ
;

50 
	gm_nBCPLD
;

51 
	gm_nCCPLD
;

52 
BOOL
 
	gm_nBPCB0
;

53 
BOOL
 
	gm_nBPCB1
;

54 
BOOL
 
	gm_nBPCB2
;

55 
BOOL
 
	gm_nBPCB3
;

56 
BOOL
 
	gm_nBPö0
;

57 
BOOL
 
	gm_nBPö1
;

58 
BOOL
 
	gm_nBPö2
;

59 
BOOL
 
	gm_nBPö3
;

60 
BOOL
 
	gm_nBPö4
;

61 
BOOL
 
	gm_nBPö5
;

62 
BOOL
 
	gm_nCPCB0
;

63 
BOOL
 
	gm_nCPCB1
;

64 
BOOL
 
	gm_nCPCB2
;

65 
BOOL
 
	gm_nCPCB3
;

66 
BOOL
 
	gm_nCPö0
;

67 
BOOL
 
	gm_nCPö1
;

68 
BOOL
 
	gm_nCPö2
;

69 
BOOL
 
	gm_nCPö3
;

70 
BOOL
 
	gm_nCPö4
;

71 
BOOL
 
	gm_nCPö5
;

72 
CLabñC⁄åﬁ
 
	gm_lbIamp
;

73 
CLabñC⁄åﬁ
 
	gm_lbVvﬁt
;

74 
CLabñC⁄åﬁ
 
	gm_lbRohm
;

75 
BOOL
 
	gm_nS∑rkOn
;

76 
UINT
 
	gm_nS∑rk
;

77 
BOOL
 
	gm_bIHighGaöMode
;

78 
BOOL
 
	gm_bFWHighGaöMode
;

79 
BOOL
 
	gm_bDCOut
;

80 
UINT
 
	gm_±BTR
;

81 
UINT
 
	gm_±BRY
;

82 
UINT
 
	gm_±CTR
;

83 
UINT
 
	gm_±CRY
;

84 
BOOL
 
	gm_bVBGu¨dOn
;

85 
BOOL
 
	gm_bVCGu¨dOn
;

86 
UINT
 
	gm_nBCCV
;

87 
UINT
 
	gm_nCCCV
;

88 
	gm_nBCVC
;

89 
	gm_nCCVC
;

90 
BOOL
 
	gm_bPul£
;

91 
	gm_nADC_B
;

92 
	gm_nADC_A
;

93 
	gm_nHLVC
;

94 
	gm_nHVOGaö
;

95 
	gm_nHVOOff£t
;

96 
	gm_nICC
;

97 
	gm_nVB
;

98 
	gm_nPul£Fªq
;

99 
	gm_nPul£Mó
;

100 
	gm_nPul£Vﬁt
;

101 
UINT
 
	gm_adcHV1
;

102 
UINT
 
	gm_adcHV2
;

103 
UINT
 
	gm_adcLV1
;

104 
UINT
 
	gm_adcLV2
;

105 
	gm_nIRng
;

110 
	gpublic
:

111 
vútuÆ
 
BOOL
 
PªTøn¶©eMesßge
(
MSG
* 
pMsg
);

112 
vútuÆ
 
BOOL
 
De°royWödow
();

113 
	g¥Ÿe˘ed
:

114 
vútuÆ
 
DoD©aExch™ge
(
CD©aExch™ge
* 
pDX
);

118 
	g¥Ÿe˘ed
:

119 
HICON
 
m_hIc⁄
;

123 
vútuÆ
 
BOOL
 
OnInôDülog
();

124 
afx_msg
 
OnSysComm™d
(
UINT
 
nID
, 
LPARAM
 
lP¨am
);

125 
afx_msg
 
OnPaöt
();

126 
afx_msg
 
HCURSOR
 
OnQuîyDøgIc⁄
();

127 
afx_msg
 
HBRUSH
 
OnCéCﬁ‹
(
CDC
* 
pDC
, 
CWnd
* 
pWnd
, 
UINT
 
nCéCﬁ‹
);

128 
afx_msg
 
OnTimî
(
UINT
 
nIDEvít
);

129 
afx_msg
 
OnBuâ⁄Lv1Së
();

130 
afx_msg
 
OnBuâ⁄Lv2Së
();

131 
afx_msg
 
OnBuâ⁄Hv1Së
();

132 
afx_msg
 
OnBuâ⁄Hv2Së
();

133 
afx_msg
 
OnSëfocusEdôLv1
();

134 
afx_msg
 
OnSëfocusEdôLv2
();

135 
afx_msg
 
OnSëfocusEdôHv1
();

136 
afx_msg
 
OnSëfocusEdôHv2
();

137 
afx_msg
 
OnSëfocusEdôI
();

138 
afx_msg
 
OnBuâ⁄ISë
();

139 
afx_msg
 
OnRadioIf·
();

140 
afx_msg
 
OnRadioIs·
();

141 
afx_msg
 
OnRadioVb·
();

142 
afx_msg
 
OnRadioHvc
();

143 
afx_msg
 
OnRadioLvc
();

144 
afx_msg
 
OnRadioVcf·
();

145 
afx_msg
 
OnRadioVcs·
();

146 
afx_msg
 
OnDbl˛kLi°Bpoöt
();

147 
afx_msg
 
OnSëfocusEdôBpö
();

148 
afx_msg
 
OnDbl˛kLi°Cpoöt
();

149 
afx_msg
 
OnSëfocusEdôCpö
();

150 
afx_msg
 
OnRadioLv1
();

151 
afx_msg
 
OnRadioLv2
();

152 
afx_msg
 
OnRadioHv1
();

153 
afx_msg
 
OnRadioHv2
();

154 
afx_msg
 
OnBuâ⁄Bªak
();

155 
afx_msg
 
OnBuâ⁄PoötSë
();

156 
afx_msg
 
OnBuâ⁄BoxR°
();

157 
afx_msg
 
OnBuâ⁄AdRód
();

158 
afx_msg
 
OnSëfocusEdôQmBpoöt
();

159 
afx_msg
 
OnSëfocusEdôQmCpoöt
();

160 
afx_msg
 
OnShowWödow
(
BOOL
 
bShow
, 
UINT
 
nSètus
);

161 
afx_msg
 
OnBuâ⁄VbOutSë
();

162 
afx_msg
 
OnBuâ⁄S∑rkSë
();

163 
afx_msg
 
OnSëfocusEdôS∑rk
();

164 
afx_msg
 
OnCheckS∑rkOn
();

165 
afx_msg
 
OnRadioPul£
();

166 
afx_msg
 
OnCheckDcOut
();

167 
afx_msg
 
OnRadioP·Fa°
();

168 
afx_msg
 
OnRadioP·Slow
();

169 
afx_msg
 
OnRadioPul£Vﬁt
();

170 
afx_msg
 
OnRadioPul£Vﬁt1
();

171 
afx_msg
 
OnRadioPul£Vﬁt2
();

172 
afx_msg
 
OnRadioPul£Vﬁt3
();

173 
afx_msg
 
OnRadioPul£Fªq
();

174 
afx_msg
 
OnRadioPul£Fªq1
();

175 
afx_msg
 
OnRadioPul£Fªq2
();

176 
afx_msg
 
OnRadioPul£Fªq3
();

177 
afx_msg
 
OnRadioPul£MósuªCav0
();

178 
afx_msg
 
OnRadioPul£MósuªCav1
();

179 
afx_msg
 
OnRadioPul£MósuªCav2
();

180 
afx_msg
 
OnRadioPul£MósuªCav3
();

181 
afx_msg
 
OnRadioIRng0
();

182 
afx_msg
 
OnRadioIRng1
();

183 
afx_msg
 
OnRadioIRng2
();

184 
afx_msg
 
OnRadioIRng3
();

185 
afx_msg
 
OnRadioIRng4
();

186 
afx_msg
 
OnRadioIRng5
();

187 
afx_msg
 
OnRadioIRng6
();

188 
afx_msg
 
OnRadioICc
();

189 
afx_msg
 
OnRadioICv
();

190 
afx_msg
 
OnCheckIHighGaö
();

191 
afx_msg
 
OnRadioHvoGaö0
();

192 
afx_msg
 
OnRadioHvoGaö1
();

193 
afx_msg
 
OnRadioHvoGaö2
();

194 
afx_msg
 
OnRadioHvoGaö3
();

195 
afx_msg
 
OnRadioHvoOf°0
();

196 
afx_msg
 
OnRadioHvoOf°1
();

197 
afx_msg
 
OnRadioHvoOf°2
();

198 
afx_msg
 
OnRadioHvoOf°3
();

199 
afx_msg
 
OnCheckFwHighGaö
();

200 
afx_msg
 
OnBuâ⁄BpoötTrSë
();

201 
afx_msg
 
OnBuâ⁄BpoötTrR°
();

202 
afx_msg
 
OnBuâ⁄BpoötRySë
();

203 
afx_msg
 
OnBuâ⁄BpoötRyR°
();

204 
afx_msg
 
OnSëfocusEdôBpoötTr
();

205 
afx_msg
 
OnSëfocusEdôBpoötRy
();

206 
afx_msg
 
OnSëfocusEdôCpoötTr
();

207 
afx_msg
 
OnSëfocusEdôCpoötRy
();

208 
afx_msg
 
OnBuâ⁄CpoötTrSë
();

209 
afx_msg
 
OnBuâ⁄CpoötTrR°
();

210 
afx_msg
 
OnBuâ⁄CpoötRySë
();

211 
afx_msg
 
OnBuâ⁄CpoötRyR°
();

212 
afx_msg
 
OnRadioB˝ld0
();

213 
afx_msg
 
OnRadioB˝ld1
();

214 
afx_msg
 
OnRadioB˝ld2
();

215 
afx_msg
 
OnRadioB˝ld3
();

216 
afx_msg
 
OnRadioC˝ld0
();

217 
afx_msg
 
OnRadioC˝ld1
();

218 
afx_msg
 
OnRadioC˝ld2
();

219 
afx_msg
 
OnRadioC˝ld3
();

220 
afx_msg
 
OnSëfocusEdôBpoötCcV
();

221 
afx_msg
 
OnSëfocusEdôCpoötCcV
();

222 
afx_msg
 
OnRadioBpoötCv
();

223 
afx_msg
 
OnRadioBpoötCc
();

224 
afx_msg
 
OnRadioCpoötCv
();

225 
afx_msg
 
OnRadioCpoötCc
();

226 
afx_msg
 
OnCheckVbGu¨dOn
();

227 
afx_msg
 
OnCheckVcGu¨dOn
();

228 
afx_msg
 
OnBuâ⁄BpoötCcvSë
();

229 
afx_msg
 
OnBuâ⁄CpoötCcvSë
();

230 
afx_msg
 
OnCheckPul£
();

231 
afx_msg
 
OnRadioHvo·
();

232 
afx_msg
 
OnRadioFw·
();

233 
afx_msg
 
OnBuâ⁄Inô
();

234 
	$DECLARE_EVENTSINK_MAP
()

236 
	`DECLARE_MESSAGE_MAP
()

237 
	}
};

	@font.h

9 ˛as†
	cCOÀF⁄t
 : 
public
 
COÀDi•©chDrivî


11 
public
:

12 
	$COÀF⁄t
() {}

13 
	$COÀF⁄t
(
LPDISPATCH
 
pDi•©ch
Ë: 
	$COÀDi•©chDrivî
(
pDi•©ch
Ë{
	}
}

14 
	$COÀF⁄t
(c⁄° 
COÀF⁄t
& 
di•©chSrc
Ë: 
	$COÀDi•©chDrivî
(
di•©chSrc
Ë{
	}
}

17 
public
:

18 
CSåög
 
GëName
();

19 
SëName
(
LPCTSTR
);

20 
CY
 
GëSize
();

21 
SëSize
(c⁄° 
CY
&);

22 
BOOL
 
GëBﬁd
();

23 
SëBﬁd
(
BOOL
);

24 
BOOL
 
GëIèlic
();

25 
SëIèlic
(
BOOL
);

26 
BOOL
 
GëUndîlöe
();

27 
SëUndîlöe
(
BOOL
);

28 
BOOL
 
GëSåikëhrough
();

29 
SëSåikëhrough
(
BOOL
);

30 
GëWeight
();

31 
SëWeight
();

32 
GëCh¨£t
();

33 
SëCh¨£t
();

36 
	gpublic
:

	@labelcontrol.h

1 #i‡!
deföed
(
AFX_LABELCONTROL_H__40217C5B_09A9_412D_9896_EB425CA14E16__INCLUDED_
)

2 
	#AFX_LABELCONTROL_H__40217C5B_09A9_412D_9896_EB425CA14E16__INCLUDED_


	)

4 #i‡
_MSC_VER
 > 1000

5 #¥agm®
⁄˚


14 
˛ass
 
	gCOÀF⁄t
;

15 
˛ass
 
	gCPi˘uª
;

20 ˛as†
	cCLabñC⁄åﬁ
 : 
public
 
CWnd


22 
¥Ÿe˘ed
:

23 
	$DECLARE_DYNCREATE
(
CLabñC⁄åﬁ
)

24 
public
:

25 
CLSID
 c⁄°& 
	$GëClsid
()

27 
CLSID
 c⁄° 
˛sid


29  
˛sid
;

31 
vútuÆ
 
BOOL
 
	$Cª©e
(
LPCTSTR
 
ÕszCœssName
,

32 
LPCTSTR
 
ÕszWödowName
, 
DWORD
 
dwStyÀ
,

33 c⁄° 
RECT
& 
ª˘
,

34 
CWnd
* 
pP¨ítWnd
, 
UINT
 
nID
,

35 
CCª©eC⁄ãxt
* 
pC⁄ãxt
 = 
NULL
)

36 {  
	`Cª©eC⁄åﬁ
(
	`GëClsid
(), 
ÕszWödowName
, 
dwStyÀ
, 
ª˘
, 
pP¨ítWnd
, 
nID
); 
	}
}

38 
BOOL
 
	$Cª©e
(
LPCTSTR
 
ÕszWödowName
, 
DWORD
 
dwStyÀ
,

39 c⁄° 
RECT
& 
ª˘
, 
CWnd
* 
pP¨ítWnd
, 
UINT
 
nID
,

40 
CFûe
* 
pPîsi°
 = 
NULL
, 
BOOL
 
bSt‹age
 = 
FALSE
,

41 
BSTR
 
b°rLicKey
 = 
NULL
)

42 {  
	`Cª©eC⁄åﬁ
(
	`GëClsid
(), 
ÕszWödowName
, 
dwStyÀ
, 
ª˘
, 
pP¨ítWnd
, 
nID
,

43 
pPîsi°
, 
bSt‹age
, 
b°rLicKey
); 
	}
}

46 
	gpublic
:

49 
public
:

50 
SëAutoSize
(
BOOL
 
bNewVÆue
);

51 
BOOL
 
GëAutoSize
();

52 
SëBackCﬁ‹
(
nNewVÆue
);

53 
GëBackCﬁ‹
();

54 
SëBackStyÀ
(
nNewVÆue
);

55 
GëBackStyÀ
();

56 
SëB‹dîCﬁ‹
(
nNewVÆue
);

57 
GëB‹dîCﬁ‹
();

58 
SëB‹dîStyÀ
(
nNewVÆue
);

59 
GëB‹dîStyÀ
();

60 
SëC≠ti⁄
(
LPCTSTR
 
ÕszNewVÆue
);

61 
CSåög
 
GëC≠ti⁄
();

62 
SëE«bÀd
(
BOOL
 
bNewVÆue
);

63 
BOOL
 
GëE«bÀd
();

64 
SëRefF⁄t
(
LPDISPATCH
 
√wVÆue
);

65 
COÀF⁄t
 
GëF⁄t
();

66 
SëF‹eCﬁ‹
(
nNewVÆue
);

67 
GëF‹eCﬁ‹
();

68 
SëMou£Ic⁄
(
LPDISPATCH
 
√wVÆue
);

69 
SëRefMou£Ic⁄
(
LPDISPATCH
 
√wVÆue
);

70 
CPi˘uª
 
GëMou£Ic⁄
();

71 
SëMou£Poöãr
(
nNewVÆue
);

72 
GëMou£Poöãr
();

73 
SëPi˘uª
(
LPDISPATCH
 
√wVÆue
);

74 
SëRefPi˘uª
(
LPDISPATCH
 
√wVÆue
);

75 
CPi˘uª
 
GëPi˘uª
();

76 
SëPi˘uªPosôi⁄
(
nNewVÆue
);

77 
GëPi˘uªPosôi⁄
();

78 
SëS≥cülEf„˘
(
nNewVÆue
);

79 
GëS≥cülEf„˘
();

80 
SëTextAlign
(
nNewVÆue
);

81 
GëTextAlign
();

82 
SëW‹dWøp
(
BOOL
 
bNewVÆue
);

83 
BOOL
 
GëW‹dWøp
();

84 
SëAc˚Àøt‹
(
LPCTSTR
 
ÕszNewVÆue
);

85 
CSåög
 
GëAc˚Àøt‹
();

	@picture.h

9 ˛as†
	cCPi˘uª
 : 
public
 
COÀDi•©chDrivî


11 
public
:

12 
	$CPi˘uª
() {}

13 
	$CPi˘uª
(
LPDISPATCH
 
pDi•©ch
Ë: 
	$COÀDi•©chDrivî
(
pDi•©ch
Ë{
	}
}

14 
	$CPi˘uª
(c⁄° 
CPi˘uª
& 
di•©chSrc
Ë: 
	$COÀDi•©chDrivî
(
di•©chSrc
Ë{
	}
}

17 
public
:

18 
GëH™dÀ
();

19 
GëHPÆ
();

20 
SëHPÆ
();

21 
GëTy≥
();

22 
GëWidth
();

23 
GëHeight
();

26 
	gpublic
:

	@resource.h

5 
	#IDM_ABOUTBOX
 0x0010

	)

6 
	#IDD_ABOUTBOX
 100

	)

7 
	#IDS_ABOUTBOX
 101

	)

8 
	#IDD_ACE400Cal_DIALOG
 102

	)

9 
	#IDR_MAINFRAME
 128

	)

10 
	#IDD_DIALOG_NUM_PAD
 160

	)

11 
	#IDD_DIALOG_CONTROLLER
 277

	)

12 
	#IDC_LABEL1
 1000

	)

13 
	#IDC_STATIC_I_ADC
 1001

	)

14 
	#IDC_EDIT_LV1
 1007

	)

15 
	#IDC_SSPANEL2
 1007

	)

16 
	#IDC_EDIT_LV2
 1008

	)

17 
	#IDC_SSPANEL4
 1008

	)

18 
	#IDC_EDIT_HV1
 1009

	)

19 
	#IDC_EDIT_BPOINT_CC_V
 1010

	)

20 
	#IDC_EDIT_SPARK
 1011

	)

21 
	#IDC_EDIT_HV2
 1012

	)

22 
	#IDC_BUTTON_LV1_SET
 1013

	)

23 
	#IDC_BUTTON_LV2_SET
 1014

	)

24 
	#IDC_BUTTON_DEL
 1014

	)

25 
	#IDC_BUTTON_HV1_SET
 1015

	)

26 
	#IDC_BUTTON_HV2_SET
 1016

	)

27 
	#IDC_BUTTON_CURSOR_BACK
 1016

	)

28 
	#IDC_RADIO_LV1
 1017

	)

29 
	#IDC_BUTTON_CURSOR_FWD
 1017

	)

30 
	#IDC_RADIO_I_RNG0
 1018

	)

31 
	#IDC_BUTTON_BACKSPACE
 1018

	)

32 
	#IDC_BUTTON_I_SET
 1019

	)

33 
	#IDC_BUTTON_KEYPAD_7
 1019

	)

34 
	#IDC_RADIO_HVO_OFST0
 1020

	)

35 
	#IDC_BUTTON_KEYPAD_8
 1020

	)

36 
	#IDC_BUTTON_AD_READ
 1021

	)

37 
	#IDC_BUTTON_KEYPAD_9
 1021

	)

38 
	#IDC_RADIO_LV2
 1022

	)

39 
	#IDC_BUTTON_CLR
 1022

	)

40 
	#IDC_RADIO_HV1
 1023

	)

41 
	#IDC_BUTTON_KEYPAD_4
 1023

	)

42 
	#IDC_RADIO_HV2
 1024

	)

43 
	#IDC_BUTTON_KEYPAD_5
 1024

	)

44 
	#IDC_RADIO_HVO_GAIN0
 1025

	)

45 
	#IDC_BUTTON_KEYPAD_6
 1025

	)

46 
	#IDC_EDIT_I
 1026

	)

47 
	#IDC_BUTTON_CANCEL
 1026

	)

48 
	#IDC_RADIO_I_RNG1
 1027

	)

49 
	#IDC_BUTTON_KEYPAD_1
 1027

	)

50 
	#IDC_RADIO_I_RNG2
 1028

	)

51 
	#IDC_BUTTON_KEYPAD_2
 1028

	)

52 
	#IDC_RADIO_I_RNG3
 1029

	)

53 
	#IDC_SSPANEL3
 1029

	)

54 
	#IDC_RADIO_I_RNG4
 1030

	)

55 
	#IDC_BUTTON_KEYPAD_3
 1030

	)

56 
	#IDC_RADIO_HVO_OFST1
 1031

	)

57 
	#IDC_BUTTON_ENTER
 1031

	)

58 
	#IDC_RADIO_HVO_OFST2
 1032

	)

59 
	#IDC_BUTTON_SIGN
 1032

	)

60 
	#IDC_RADIO_HVO_OFST3
 1033

	)

61 
	#IDC_BUTTON_KEYPAD_0
 1033

	)

62 
	#IDC_RADIO_HVO_GAIN1
 1034

	)

63 
	#IDC_BUTTON_DOT
 1034

	)

64 
	#IDC_RADIO_HVO_GAIN2
 1035

	)

65 
	#IDC_RADIO_HVO_GAIN3
 1036

	)

66 
	#IDC_BUTTON_BPOINT_CCV_SET
 1037

	)

67 
	#IDC_LIST_CPOINT
 1038

	)

68 
	#IDC_BUTTON_CPOINT_CCV_SET
 1039

	)

69 
	#IDC_RADIO_I_RNG5
 1040

	)

70 
	#IDC_RADIO_I_RNG6
 1041

	)

71 
	#IDC_RADIO_PULSE
 1042

	)

72 
	#IDC_EDIT_LV1_DA
 1043

	)

73 
	#IDC_BUTTON_SPARK_SET
 1044

	)

74 
	#IDC_EDIT_CPOINT_CC_V
 1045

	)

75 
	#IDC_RADIO_PULSE_MEASURE_CAV0
 1046

	)

76 
	#IDC_RADIO_PULSE_MEASURE_CAV1
 1047

	)

77 
	#IDC_RADIO_PULSE_MEASURE_CAV2
 1048

	)

78 
	#IDC_RADIO_PULSE_MEASURE_CAV3
 1049

	)

79 
	#IDC_EDIT_LV2_DA
 1050

	)

80 
	#IDC_EDIT_HV1_DA
 1051

	)

81 
	#IDC_EDIT_HV2_DA
 1052

	)

82 
	#IDC_BUTTON_INIT
 1053

	)

83 
	#IDC_RADIO_I_CC
 1056

	)

84 
	#IDC_RADIO_I_CV
 1057

	)

85 
	#IDC_RADIO_BPOINT_CV
 1058

	)

86 
	#IDC_RADIO_VCSFT
 1059

	)

87 
	#IDC_RADIO_VBFT
 1060

	)

88 
	#IDC_RADIO_PFT_FAST
 1061

	)

89 
	#IDC_RADIO_PFT_SLOW
 1062

	)

90 
	#IDC_RADIO_BPOINT_CC
 1063

	)

91 
	#IDC_RADIO_CPOINT_CV
 1064

	)

92 
	#IDC_RADIO_CPOINT_CC
 1065

	)

93 
	#IDC_EDIT_CPOINT_TR
 1070

	)

94 
	#IDC_BUTTON_CPOINT_TR_SET
 1071

	)

95 
	#IDC_RADIO_CBOXA
 1072

	)

96 
	#IDC_RADIO_CBOXB
 1073

	)

97 
	#IDC_RADIO_CBOXC
 1074

	)

98 
	#IDC_RADIO_CBOXD
 1075

	)

99 
	#IDC_RADIO_CBOXE
 1076

	)

100 
	#IDC_RADIO_CBOXF
 1077

	)

101 
	#IDC_RADIO_CBOXG
 1078

	)

102 
	#IDC_RADIO_CBOXH
 1079

	)

103 
	#IDC_EDIT_CPOINT_RY
 1080

	)

104 
	#IDC_BUTTON_CPOINT_RY_SET
 1081

	)

105 
	#IDC_RADIO_CCPLD0
 1084

	)

106 
	#IDC_RADIO_CCPLD1
 1085

	)

107 
	#IDC_RADIO_CCPLD2
 1086

	)

108 
	#IDC_RADIO_CCPLD3
 1087

	)

109 
	#IDC_BUTTON_CPOINT_TR_RST
 1094

	)

110 
	#IDC_SSPANEL_NUM_DATA
 1096

	)

111 
	#IDC_BUTTON_POINT_SET
 1098

	)

112 
	#IDC_LABEL_I_AMP
 1099

	)

113 
	#IDC_BUTTON_BOX_RST
 1100

	)

114 
	#IDC_LABEL_V_VOLT
 1101

	)

115 
	#IDC_LABEL_R_OHM
 1102

	)

116 
	#IDC_BUTTON_VB_OUT_SET
 1103

	)

117 
	#IDC_BUTTON_CPOINT_RY_RST
 1104

	)

118 
	#IDC_LIST_MSG
 1111

	)

119 
	#IDC_STATIC_LV1
 1112

	)

120 
	#IDC_SSPANEL_MIN_VALUE
 1115

	)

121 
	#IDC_SSPANEL_NUMPOS_0
 1116

	)

122 
	#IDC_SSPANEL_NUMPOS_1
 1117

	)

123 
	#IDC_SSPANEL_NUMPOS_2
 1118

	)

124 
	#IDC_EDIT_CPIN
 1119

	)

125 
	#IDC_SSPANEL_NUMPOS_3
 1119

	)

126 
	#IDC_CHECK_CPIN0
 1120

	)

127 
	#IDC_SSPANEL_NUMPOS_4
 1120

	)

128 
	#IDC_CHECK_CPIN1
 1121

	)

129 
	#IDC_SSPANEL_NUMPOS_5
 1121

	)

130 
	#IDC_CHECK_CPIN2
 1122

	)

131 
	#IDC_SSPANEL_NUMPOS_6
 1122

	)

132 
	#IDC_CHECK_CPIN3
 1123

	)

133 
	#IDC_SSPANEL_NUMPOS_7
 1123

	)

134 
	#IDC_CHECK_CPIN4
 1124

	)

135 
	#IDC_SSPANEL_NUMPOS_8
 1124

	)

136 
	#IDC_CHECK_CPIN5
 1125

	)

137 
	#IDC_SSPANEL_NUMPOS_9
 1125

	)

138 
	#IDC_SSPANEL_NUMPOS_10
 1126

	)

139 
	#IDC_SSPANEL_NUMPOS_11
 1127

	)

140 
	#IDC_SSPANEL_MAX_VALUE
 1128

	)

141 
	#IDC_STATIC_LV1_MNT
 1131

	)

142 
	#IDC_STATIC_LV2_MNT
 1132

	)

143 
	#IDC_CHECK_CPCB0
 1133

	)

144 
	#IDC_CHECK_CPCB1
 1134

	)

145 
	#IDC_CHECK_CPCB2
 1135

	)

146 
	#IDC_CHECK_CPCB3
 1136

	)

147 
	#IDC_EDIT_BPOINT_TR
 1137

	)

148 
	#IDC_BUTTON_BPOINT_TR_SET
 1138

	)

149 
	#IDC_RADIO_BBOXA
 1139

	)

150 
	#IDC_RADIO_BBOXB
 1140

	)

151 
	#IDC_RADIO_BBOXC
 1141

	)

152 
	#IDC_RADIO_BBOXD
 1142

	)

153 
	#IDC_RADIO_BBOXE
 1143

	)

154 
	#IDC_RADIO_BBOXF
 1144

	)

155 
	#IDC_RADIO_BBOXG
 1145

	)

156 
	#IDC_RADIO_BBOXH
 1146

	)

157 
	#IDC_RADIO_BCPLD0
 1147

	)

158 
	#IDC_RADIO_BCPLD1
 1148

	)

159 
	#IDC_RADIO_BCPLD2
 1149

	)

160 
	#IDC_RADIO_BCPLD3
 1150

	)

161 
	#IDC_BUTTON_BPOINT_RY_RST
 1151

	)

162 
	#IDC_STATIC_LV1_MNT_AD
 1152

	)

163 
	#IDC_STATIC_LV2_MNT_AD
 1153

	)

164 
	#IDC_EDIT_BPIN
 1154

	)

165 
	#IDC_STATIC_HV1_MNT
 1155

	)

166 
	#IDC_CHECK_BPIN0
 1156

	)

167 
	#IDC_CHECK_BPIN1
 1157

	)

168 
	#IDC_CHECK_BPIN2
 1158

	)

169 
	#IDC_CHECK_BPIN3
 1159

	)

170 
	#IDC_CHECK_BPIN4
 1160

	)

171 
	#IDC_CHECK_BPIN5
 1161

	)

172 
	#IDC_CHECK_BPCB0
 1162

	)

173 
	#IDC_CHECK_BPCB1
 1163

	)

174 
	#IDC_CHECK_BPCB2
 1164

	)

175 
	#IDC_CHECK_BPCB3
 1165

	)

176 
	#IDC_STATIC_HV2_MNT
 1166

	)

177 
	#IDC_STATIC_HV1_MNT_AD
 1167

	)

178 
	#IDC_STATIC_LV1_UNIT1
 1168

	)

179 
	#IDC_STATIC_HV2_MNT_AD
 1168

	)

180 
	#IDC_STATIC_LV2_UNIT1
 1169

	)

181 
	#IDC_STATIC_HV1_UNIT1
 1170

	)

182 
	#IDC_STATIC_HV2_UNIT1
 1171

	)

183 
	#IDC_RADIO_IFFT
 1173

	)

184 
	#IDC_RADIO_ISFT
 1174

	)

185 
	#IDC_RADIO_HVC
 1175

	)

186 
	#IDC_RADIO_VCFFT
 1176

	)

187 
	#IDC_RADIO_FWFT
 1177

	)

188 
	#IDC_BUTTON_BREAK
 1178

	)

189 
	#IDC_BUTTON_BPOINT_RY_SET
 1179

	)

190 
	#IDC_BUTTON_BPOINT_TR_RST
 1180

	)

191 
	#IDC_STATIC_SPARK_UNIT
 1182

	)

192 
	#IDC_STATIC_VB_OUT_MNT
 1183

	)

193 
	#IDC_STATIC_VB_OUT_MNT_AD
 1184

	)

194 
	#IDC_LIST_BPOINT
 1191

	)

195 
	#IDC_STATIC_I_UNIT
 1192

	)

196 
	#IDC_RADIO_BPCB_ENABLE0
 1193

	)

197 
	#IDC_RADIO_BPCB_ENABLE1
 1194

	)

198 
	#IDC_RADIO_CPCB_ENABLE0
 1195

	)

199 
	#IDC_RADIO_CPCB_ENABLE1
 1196

	)

200 
	#IDC_STATIC_I
 1197

	)

201 
	#IDC_STATIC_V
 1198

	)

202 
	#IDC_STATIC_R
 1199

	)

203 
	#IDC_STATIC_QM_I_UNIT
 1200

	)

204 
	#IDC_STATIC_QM_V_UNIT
 1201

	)

205 
	#IDC_STATIC_QM_R_UNIT
 1202

	)

206 
	#IDC_STATIC_QM_I_ADVALUE
 1203

	)

207 
	#IDC_STATIC_QM_V_ADVALUE
 1204

	)

208 
	#IDC_EDIT_QM_BPOINT
 1205

	)

209 
	#IDC_EDIT_QM_CPOINT
 1206

	)

210 
	#IDC_STATIC_VB_OUT_UNIT
 1207

	)

211 
	#IDC_EDIT_BPOINT_RY
 1209

	)

212 
	#IDC_CHECK_I_HIGH_GAIN
 1211

	)

213 
	#IDC_CHECK_FW_HIGH_GAIN
 1212

	)

214 
	#IDC_CHECK_SPARK_ON
 1226

	)

215 
	#IDC_CHECK_DC_OUT
 1229

	)

216 
	#IDC_CHECK_VB_GUARD_ON
 1231

	)

217 
	#IDC_CHECK_VC_GUARD_ON
 1232

	)

218 
	#IDC_STATIC_BTR
 1233

	)

219 
	#IDC_STATIC_BRY
 1234

	)

220 
	#IDC_STATIC_CTR
 1235

	)

221 
	#IDC_STATIC_CRY
 1236

	)

222 
	#IDC_CHECK_PULSE
 1237

	)

223 
	#IDC_STATIC_PULSE
 1238

	)

224 
	#IDC_RADIO_PULSE_VOLT
 1279

	)

225 
	#IDC_RADIO_LVC
 1280

	)

226 
	#IDC_RADIO_HVOFT
 1281

	)

227 
	#IDC_RADIO_PULSE_VOLT1
 1282

	)

228 
	#IDC_RADIO_PULSE_VOLT2
 1283

	)

229 
	#IDC_RADIO_PULSE_VOLT3
 1284

	)

230 
	#IDC_RADIO_PULSE_FREQ
 1285

	)

231 
	#IDC_RADIO_PULSE_FREQ1
 1286

	)

232 
	#IDC_RADIO_PULSE_FREQ2
 1287

	)

233 
	#IDC_RADIO_PULSE_FREQ3
 1288

	)

237 #ifde‡
APSTUDIO_INVOKED


238 #i‚de‡
APSTUDIO_READONLY_SYMBOLS


239 
	#_APS_NEXT_RESOURCE_VALUE
 131

	)

240 
	#_APS_NEXT_COMMAND_VALUE
 32771

	)

241 
	#_APS_NEXT_CONTROL_VALUE
 1002

	)

242 
	#_APS_NEXT_SYMED_VALUE
 101

	)

	@sspnctrl.h

1 #i‡!
deföed
(
AFX_SSPNCTRL_H__317B7428_E7D1_4FD1_BF39_BC98618EBD61__INCLUDED_
)

2 
	#AFX_SSPNCTRL_H__317B7428_E7D1_4FD1_BF39_BC98618EBD61__INCLUDED_


	)

4 #i‡
_MSC_VER
 > 1000

5 #¥agm®
⁄˚


14 
˛ass
 
	gCOÀF⁄t
;

15 
˛ass
 
	gCPi˘uª
;

20 ˛as†
	cCSSPNCål
 : 
public
 
CWnd


22 
¥Ÿe˘ed
:

23 
	$DECLARE_DYNCREATE
(
CSSPNCål
)

24 
public
:

25 
CLSID
 c⁄°& 
	$GëClsid
()

27 
CLSID
 c⁄° 
˛sid


29  
˛sid
;

31 
vútuÆ
 
BOOL
 
	$Cª©e
(
LPCTSTR
 
ÕszCœssName
,

32 
LPCTSTR
 
ÕszWödowName
, 
DWORD
 
dwStyÀ
,

33 c⁄° 
RECT
& 
ª˘
,

34 
CWnd
* 
pP¨ítWnd
, 
UINT
 
nID
,

35 
CCª©eC⁄ãxt
* 
pC⁄ãxt
 = 
NULL
)

36 {  
	`Cª©eC⁄åﬁ
(
	`GëClsid
(), 
ÕszWödowName
, 
dwStyÀ
, 
ª˘
, 
pP¨ítWnd
, 
nID
); 
	}
}

38 
BOOL
 
	$Cª©e
(
LPCTSTR
 
ÕszWödowName
, 
DWORD
 
dwStyÀ
,

39 c⁄° 
RECT
& 
ª˘
, 
CWnd
* 
pP¨ítWnd
, 
UINT
 
nID
,

40 
CFûe
* 
pPîsi°
 = 
NULL
, 
BOOL
 
bSt‹age
 = 
FALSE
,

41 
BSTR
 
b°rLicKey
 = 
NULL
)

42 {  
	`Cª©eC⁄åﬁ
(
	`GëClsid
(), 
ÕszWödowName
, 
dwStyÀ
, 
ª˘
, 
pP¨ítWnd
, 
nID
,

43 
pPîsi°
, 
bSt‹age
, 
b°rLicKey
); 
	}
}

46 
	gpublic
:

47 
CSåög
 
GëC≠ti⁄
();

48 
SëC≠ti⁄
(
LPCTSTR
);

49 
GëBevñWidth
();

50 
SëBevñWidth
();

51 
GëB‹dîWidth
();

52 
SëB‹dîWidth
();

53 
GëBevñOuãr
();

54 
SëBevñOuãr
();

55 
GëBevñI¬î
();

56 
SëBevñI¬î
();

57 
BOOL
 
GëRoundedC‹√rs
();

58 
SëRoundedC‹√rs
(
BOOL
);

59 
BOOL
 
GëOuéöe
();

60 
SëOuéöe
(
BOOL
);

61 
GëFloodTy≥
();

62 
SëFloodTy≥
();

63 
GëFloodCﬁ‹
();

64 
SëFloodCﬁ‹
();

65 
GëFloodPî˚¡
();

66 
SëFloodPî˚¡
();

67 
GëShadowCﬁ‹
();

68 
SëShadowCﬁ‹
();

69 
BOOL
 
GëFloodShowP˘
();

70 
SëFloodShowP˘
(
BOOL
);

71 
GëF⁄t3D
();

72 
SëF⁄t3D
();

73 
GëAlignmít
();

74 
SëAlignmít
();

75 
GëAutoSize
();

76 
SëAutoSize
();

77 
COÀF⁄t
 
GëF⁄t
();

78 
SëF⁄t
(
LPDISPATCH
);

79 
BOOL
 
GëE«bÀd
();

80 
SëE«bÀd
(
BOOL
);

81 
GëMou£Poöãr
();

82 
SëMou£Poöãr
();

83 
CPi˘uª
 
GëMou£Ic⁄
();

84 
SëMou£Ic⁄
(
LPDISPATCH
);

85 
OLE_COLOR
 
GëBackCﬁ‹
();

86 
SëBackCﬁ‹
(
OLE_COLOR
);

87 
OLE_COLOR
 
GëF‹eCﬁ‹
();

88 
SëF‹eCﬁ‹
(
OLE_COLOR
);

89 
OLE_HANDLE
 
GëHWnd
();

90 
SëHWnd
(
OLE_HANDLE
);

93 
	gpublic
:

94 
Re‰esh
();

	@stdafx.h

6 #i‡!
deföed
(
AFX_STDAFX_H__B40F1493_8241_4047_8B88_C9E026A6B456__INCLUDED_
)

7 
	#AFX_STDAFX_H__B40F1493_8241_4047_8B88_C9E026A6B456__INCLUDED_


	)

9 #i‡
_MSC_VER
 > 1000

10 #¥agm®
⁄˚


13 
	#VC_EXTRALEAN


14 

	)

15 
	~<afxwö.h
>

16 
	~<afxext.h
>

17 
	~<afxdi•.h
>

18 
	~<afxdt˘l.h
>

19 #i‚de‡
_AFX_NO_AFXCMN_SUPPORT


20 
	~<afxcmn.h
>

	@
1
.
0
45
2221
C:\sonji\Bioptro\ACE400Cal_140409\ACE400Cal_140409\APIDIO.H
C:\sonji\Bioptro\ACE400Cal_140409\ACE400Cal_140409\CDio.h
C:\sonji\Bioptro\ACE400Cal_140409\ACE400Cal_140409\DlgNumberKeyPad.cpp
C:\sonji\Bioptro\ACE400Cal_140409\ACE400Cal_140409\DlgNumberKeyPad.h
C:\sonji\Bioptro\ACE400Cal_140409\ACE400Cal_140409\Error.cpp
C:\sonji\Bioptro\ACE400Cal_140409\ACE400Cal_140409\Error.h
C:\sonji\Bioptro\ACE400Cal_140409\ACE400Cal_140409\Globals.cpp
C:\sonji\Bioptro\ACE400Cal_140409\ACE400Cal_140409\Globals.h
C:\sonji\Bioptro\ACE400Cal_140409\ACE400Cal_140409\MacroMotion.cpp
C:\sonji\Bioptro\ACE400Cal_140409\ACE400Cal_140409\MacroMotion.h
C:\sonji\Bioptro\ACE400Cal_140409\ACE400Cal_140409\MicroMotion.cpp
C:\sonji\Bioptro\ACE400Cal_140409\ACE400Cal_140409\MicroMotion.h
C:\sonji\Bioptro\ACE400Cal_140409\ACE400Cal_140409\SeqStructV43.h
C:\sonji\Bioptro\ACE400Cal_140409\ACE400Cal_140409\StdAfx.cpp
C:\sonji\Bioptro\ACE400Cal_140409\ACE400Cal_140409\StdAfx.h
C:\sonji\Bioptro\ACE400Cal_140409\ACE400Cal_140409\ACE400Cal.cpp
C:\sonji\Bioptro\ACE400Cal_140409\ACE400Cal_140409\ACE400Cal.h
C:\sonji\Bioptro\ACE400Cal_140409\ACE400Cal_140409\ACE400CalDlg.cpp
C:\sonji\Bioptro\ACE400Cal_140409\ACE400Cal_140409\ACE400CalDlg.h
C:\sonji\Bioptro\ACE400Cal_140409\ACE400Cal_140409\font.cpp
C:\sonji\Bioptro\ACE400Cal_140409\ACE400Cal_140409\font.h
C:\sonji\Bioptro\ACE400Cal_140409\ACE400Cal_140409\labelcontrol.cpp
C:\sonji\Bioptro\ACE400Cal_140409\ACE400Cal_140409\labelcontrol.h
C:\sonji\Bioptro\ACE400Cal_140409\ACE400Cal_140409\picture.cpp
C:\sonji\Bioptro\ACE400Cal_140409\ACE400Cal_140409\picture.h
C:\sonji\Bioptro\ACE400Cal_140409\ACE400Cal_140409\resource.h
C:\sonji\Bioptro\ACE400Cal_140409\ACE400Cal_140409\sspnctrl.cpp
C:\sonji\Bioptro\ACE400Cal_140409\ACE400Cal_140409\sspnctrl.h
CDIO.h
DlgNumberKeyPad.h
Error.h
Font.h
Globals.h
MacroMotion.h
MicroMotion.h
Picture.h
SeqStructV43.h
ACE400Cal.h
ACE400CalDlg.h
font.h
labelcontrol.h
picture.h
resource.h
sspnctrl.h
stdafx.h
